gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
               00004 ; This file was generated Tue Nov 28 18:32:49 2017
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _UpdateTimeValue
               00016         global _CompleteHoursSetting
               00017         global _Int2String
               00018         global _SetupCompleteTime
               00019         global _HandleButton1Pressure
               00020         global _UpdateProperTimeValue
               00021         global _HandleButton2Pressure
               00022         global _ConfigureRegisters
               00023         global _AssignDefaultValues
               00024         global _UpdateDisplay
               00025         global _UpdateClock
               00026         global _DisplayWORD
               00027         global _DisplayString
               00028         global _strlcpy
               00029         global _in_setting
               00030         global _flags
               00031         global _clock
               00032         global _timer
               00033         global _setting
               00034         global _ints
               00035         global _time_value
               00036         global _HighISR
               00037         global _main
               00038 
               00039 ;--------------------------------------------------------
               00040 ; extern variables in this module
               00041 ;--------------------------------------------------------
               00042         extern __gptrget2
               00043         extern __gptrput2
               00044         extern __gptrget1
               00045         extern __gptrput1
               00046         extern _EBSTCONbits
               00047         extern _MISTATbits
               00048         extern _EFLOCONbits
               00049         extern _MACON1bits
               00050         extern _MACON2bits
               00051         extern _MACON3bits
               00052         extern _MACON4bits
               00053         extern _MACLCON1bits
               00054         extern _MACLCON2bits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _MICONbits
               00056         extern _MICMDbits
               00057         extern _EWOLIEbits
               00058         extern _EWOLIRbits
               00059         extern _ERXFCONbits
               00060         extern _EIEbits
               00061         extern _ESTATbits
               00062         extern _ECON2bits
               00063         extern _EIRbits
               00064         extern _EDATAbits
               00065         extern _SSP2CON2bits
               00066         extern _SSP2CON1bits
               00067         extern _SSP2STATbits
               00068         extern _ECCP2DELbits
               00069         extern _ECCP2ASbits
               00070         extern _ECCP3DELbits
               00071         extern _ECCP3ASbits
               00072         extern _RCSTA2bits
               00073         extern _TXSTA2bits
               00074         extern _CCP5CONbits
               00075         extern _CCP4CONbits
               00076         extern _T4CONbits
               00077         extern _ECCP1DELbits
               00078         extern _BAUDCON2bits
               00079         extern _BAUDCTL2bits
               00080         extern _BAUDCONbits
               00081         extern _BAUDCON1bits
               00082         extern _BAUDCTLbits
               00083         extern _BAUDCTL1bits
               00084         extern _PORTAbits
               00085         extern _PORTBbits
               00086         extern _PORTCbits
               00087         extern _PORTDbits
               00088         extern _PORTEbits
               00089         extern _PORTFbits
               00090         extern _PORTGbits
               00091         extern _PORTHbits
               00092         extern _PORTJbits
               00093         extern _LATAbits
               00094         extern _LATBbits
               00095         extern _LATCbits
               00096         extern _LATDbits
               00097         extern _LATEbits
               00098         extern _LATFbits
               00099         extern _LATGbits
               00100         extern _LATHbits
               00101         extern _LATJbits
               00102         extern _DDRAbits
               00103         extern _TRISAbits
               00104         extern _DDRBbits
               00105         extern _TRISBbits
               00106         extern _DDRCbits
               00107         extern _TRISCbits
               00108         extern _DDRDbits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _TRISDbits
               00110         extern _DDREbits
               00111         extern _TRISEbits
               00112         extern _DDRFbits
               00113         extern _TRISFbits
               00114         extern _DDRGbits
               00115         extern _TRISGbits
               00116         extern _DDRHbits
               00117         extern _TRISHbits
               00118         extern _DDRJbits
               00119         extern _TRISJbits
               00120         extern _OSCTUNEbits
               00121         extern _MEMCONbits
               00122         extern _PIE1bits
               00123         extern _PIR1bits
               00124         extern _IPR1bits
               00125         extern _PIE2bits
               00126         extern _PIR2bits
               00127         extern _IPR2bits
               00128         extern _PIE3bits
               00129         extern _PIR3bits
               00130         extern _IPR3bits
               00131         extern _EECON1bits
               00132         extern _RCSTAbits
               00133         extern _RCSTA1bits
               00134         extern _TXSTAbits
               00135         extern _TXSTA1bits
               00136         extern _PSPCONbits
               00137         extern _T3CONbits
               00138         extern _CMCONbits
               00139         extern _CVRCONbits
               00140         extern _ECCP1ASbits
               00141         extern _CCP3CONbits
               00142         extern _ECCP3CONbits
               00143         extern _CCP2CONbits
               00144         extern _ECCP2CONbits
               00145         extern _CCP1CONbits
               00146         extern _ECCP1CONbits
               00147         extern _ADCON2bits
               00148         extern _ADCON1bits
               00149         extern _ADCON0bits
               00150         extern _SSP1CON2bits
               00151         extern _SSPCON2bits
               00152         extern _SSP1CON1bits
               00153         extern _SSPCON1bits
               00154         extern _SSP1STATbits
               00155         extern _SSPSTATbits
               00156         extern _T2CONbits
               00157         extern _T1CONbits
               00158         extern _RCONbits
               00159         extern _WDTCONbits
               00160         extern _ECON1bits
               00161         extern _OSCCONbits
               00162         extern _T0CONbits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _STATUSbits
               00164         extern _INTCON3bits
               00165         extern _INTCON2bits
               00166         extern _INTCONbits
               00167         extern _STKPTRbits
               00168         extern _stdin
               00169         extern _stdout
               00170         extern _LCDText
               00171         extern _MAADR5
               00172         extern _MAADR6
               00173         extern _MAADR3
               00174         extern _MAADR4
               00175         extern _MAADR1
               00176         extern _MAADR2
               00177         extern _EBSTSD
               00178         extern _EBSTCON
               00179         extern _EBSTCS
               00180         extern _EBSTCSL
               00181         extern _EBSTCSH
               00182         extern _MISTAT
               00183         extern _EFLOCON
               00184         extern _EPAUS
               00185         extern _EPAUSL
               00186         extern _EPAUSH
               00187         extern _MACON1
               00188         extern _MACON2
               00189         extern _MACON3
               00190         extern _MACON4
               00191         extern _MABBIPG
               00192         extern _MAIPG
               00193         extern _MAIPGL
               00194         extern _MAIPGH
               00195         extern _MACLCON1
               00196         extern _MACLCON2
               00197         extern _MAMXFL
               00198         extern _MAMXFLL
               00199         extern _MAMXFLH
               00200         extern _MICON
               00201         extern _MICMD
               00202         extern _MIREGADR
               00203         extern _MIWR
               00204         extern _MIWRL
               00205         extern _MIWRH
               00206         extern _MIRD
               00207         extern _MIRDL
               00208         extern _MIRDH
               00209         extern _EHT0
               00210         extern _EHT1
               00211         extern _EHT2
               00212         extern _EHT3
               00213         extern _EHT4
               00214         extern _EHT5
               00215         extern _EHT6
               00216         extern _EHT7
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EPMM0
               00218         extern _EPMM1
               00219         extern _EPMM2
               00220         extern _EPMM3
               00221         extern _EPMM4
               00222         extern _EPMM5
               00223         extern _EPMM6
               00224         extern _EPMM7
               00225         extern _EPMCS
               00226         extern _EPMCSL
               00227         extern _EPMCSH
               00228         extern _EPMO
               00229         extern _EPMOL
               00230         extern _EPMOH
               00231         extern _EWOLIE
               00232         extern _EWOLIR
               00233         extern _ERXFCON
               00234         extern _EPKTCNT
               00235         extern _EWRPT
               00236         extern _EWRPTL
               00237         extern _EWRPTH
               00238         extern _ETXST
               00239         extern _ETXSTL
               00240         extern _ETXSTH
               00241         extern _ETXND
               00242         extern _ETXNDL
               00243         extern _ETXNDH
               00244         extern _ERXST
               00245         extern _ERXSTL
               00246         extern _ERXSTH
               00247         extern _ERXND
               00248         extern _ERXNDL
               00249         extern _ERXNDH
               00250         extern _ERXRDPT
               00251         extern _ERXRDPTL
               00252         extern _ERXRDPTH
               00253         extern _ERXWRPT
               00254         extern _ERXWRPTL
               00255         extern _ERXWRPTH
               00256         extern _EDMAST
               00257         extern _EDMASTL
               00258         extern _EDMASTH
               00259         extern _EDMAND
               00260         extern _EDMANDL
               00261         extern _EDMANDH
               00262         extern _EDMADST
               00263         extern _EDMADSTL
               00264         extern _EDMADSTH
               00265         extern _EDMACS
               00266         extern _EDMACSL
               00267         extern _EDMACSH
               00268         extern _EIE
               00269         extern _ESTAT
               00270         extern _ECON2
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _EIR
               00272         extern _EDATA
               00273         extern _SSP2CON2
               00274         extern _SSP2CON1
               00275         extern _SSP2STAT
               00276         extern _SSP2ADD
               00277         extern _SSP2BUF
               00278         extern _ECCP2DEL
               00279         extern _ECCP2AS
               00280         extern _ECCP3DEL
               00281         extern _ECCP3AS
               00282         extern _RCSTA2
               00283         extern _TXSTA2
               00284         extern _TXREG2
               00285         extern _RCREG2
               00286         extern _SPBRG2
               00287         extern _CCP5CON
               00288         extern _CCPR5
               00289         extern _CCPR5L
               00290         extern _CCPR5H
               00291         extern _CCP4CON
               00292         extern _CCPR4
               00293         extern _CCPR4L
               00294         extern _CCPR4H
               00295         extern _T4CON
               00296         extern _PR4
               00297         extern _TMR4
               00298         extern _ECCP1DEL
               00299         extern _ERDPT
               00300         extern _ERDPTL
               00301         extern _ERDPTH
               00302         extern _BAUDCON2
               00303         extern _BAUDCTL2
               00304         extern _SPBRGH2
               00305         extern _BAUDCON
               00306         extern _BAUDCON1
               00307         extern _BAUDCTL
               00308         extern _BAUDCTL1
               00309         extern _SPBRGH
               00310         extern _SPBRGH1
               00311         extern _PORTA
               00312         extern _PORTB
               00313         extern _PORTC
               00314         extern _PORTD
               00315         extern _PORTE
               00316         extern _PORTF
               00317         extern _PORTG
               00318         extern _PORTH
               00319         extern _PORTJ
               00320         extern _LATA
               00321         extern _LATB
               00322         extern _LATC
               00323         extern _LATD
               00324         extern _LATE
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATF
               00326         extern _LATG
               00327         extern _LATH
               00328         extern _LATJ
               00329         extern _DDRA
               00330         extern _TRISA
               00331         extern _DDRB
               00332         extern _TRISB
               00333         extern _DDRC
               00334         extern _TRISC
               00335         extern _DDRD
               00336         extern _TRISD
               00337         extern _DDRE
               00338         extern _TRISE
               00339         extern _DDRF
               00340         extern _TRISF
               00341         extern _DDRG
               00342         extern _TRISG
               00343         extern _DDRH
               00344         extern _TRISH
               00345         extern _DDRJ
               00346         extern _TRISJ
               00347         extern _OSCTUNE
               00348         extern _MEMCON
               00349         extern _PIE1
               00350         extern _PIR1
               00351         extern _IPR1
               00352         extern _PIE2
               00353         extern _PIR2
               00354         extern _IPR2
               00355         extern _PIE3
               00356         extern _PIR3
               00357         extern _IPR3
               00358         extern _EECON1
               00359         extern _EECON2
               00360         extern _RCSTA
               00361         extern _RCSTA1
               00362         extern _TXSTA
               00363         extern _TXSTA1
               00364         extern _TXREG
               00365         extern _TXREG1
               00366         extern _RCREG
               00367         extern _RCREG1
               00368         extern _SPBRG
               00369         extern _SPBRG1
               00370         extern _PSPCON
               00371         extern _T3CON
               00372         extern _TMR3L
               00373         extern _TMR3H
               00374         extern _CMCON
               00375         extern _CVRCON
               00376         extern _ECCP1AS
               00377         extern _CCP3CON
               00378         extern _ECCP3CON
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _CCPR3
               00380         extern _CCPR3L
               00381         extern _CCPR3H
               00382         extern _CCP2CON
               00383         extern _ECCP2CON
               00384         extern _CCPR2
               00385         extern _CCPR2L
               00386         extern _CCPR2H
               00387         extern _CCP1CON
               00388         extern _ECCP1CON
               00389         extern _CCPR1
               00390         extern _CCPR1L
               00391         extern _CCPR1H
               00392         extern _ADCON2
               00393         extern _ADCON1
               00394         extern _ADCON0
               00395         extern _ADRES
               00396         extern _ADRESL
               00397         extern _ADRESH
               00398         extern _SSP1CON2
               00399         extern _SSPCON2
               00400         extern _SSP1CON1
               00401         extern _SSPCON1
               00402         extern _SSP1STAT
               00403         extern _SSPSTAT
               00404         extern _SSP1ADD
               00405         extern _SSPADD
               00406         extern _SSP1BUF
               00407         extern _SSPBUF
               00408         extern _T2CON
               00409         extern _PR2
               00410         extern _TMR2
               00411         extern _T1CON
               00412         extern _TMR1L
               00413         extern _TMR1H
               00414         extern _RCON
               00415         extern _WDTCON
               00416         extern _ECON1
               00417         extern _OSCCON
               00418         extern _T0CON
               00419         extern _TMR0L
               00420         extern _TMR0H
               00421         extern _STATUS
               00422         extern _FSR2L
               00423         extern _FSR2H
               00424         extern _PLUSW2
               00425         extern _PREINC2
               00426         extern _POSTDEC2
               00427         extern _POSTINC2
               00428         extern _INDF2
               00429         extern _BSR
               00430         extern _FSR1L
               00431         extern _FSR1H
               00432         extern _PLUSW1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _PREINC1
               00434         extern _POSTDEC1
               00435         extern _POSTINC1
               00436         extern _INDF1
               00437         extern _WREG
               00438         extern _FSR0L
               00439         extern _FSR0H
               00440         extern _PLUSW0
               00441         extern _PREINC0
               00442         extern _POSTDEC0
               00443         extern _POSTINC0
               00444         extern _INDF0
               00445         extern _INTCON3
               00446         extern _INTCON2
               00447         extern _INTCON
               00448         extern _PROD
               00449         extern _PRODL
               00450         extern _PRODH
               00451         extern _TABLAT
               00452         extern _TBLPTR
               00453         extern _TBLPTRL
               00454         extern _TBLPTRH
               00455         extern _TBLPTRU
               00456         extern _PC
               00457         extern _PCL
               00458         extern _PCLATH
               00459         extern _PCLATU
               00460         extern _STKPTR
               00461         extern _TOS
               00462         extern _TOSL
               00463         extern _TOSH
               00464         extern _TOSU
               00465         extern _ultoa
               00466         extern _strlen
               00467         extern _LCDInit
               00468         extern _LCDUpdate
               00469 ;--------------------------------------------------------
               00470 ;       Equates to used internal registers
               00471 ;--------------------------------------------------------
  00000FD8     00472 STATUS  equ     0xfd8
  00000FF9     00473 PCL     equ     0xff9
  00000FFA     00474 PCLATH  equ     0xffa
  00000FFB     00475 PCLATU  equ     0xffb
  00000FE8     00476 WREG    equ     0xfe8
  00000FE0     00477 BSR     equ     0xfe0
  00000FE9     00478 FSR0L   equ     0xfe9
  00000FEA     00479 FSR0H   equ     0xfea
  00000FE1     00480 FSR1L   equ     0xfe1
  00000FD9     00481 FSR2L   equ     0xfd9
  00000FEF     00482 INDF0   equ     0xfef
  00000FE5     00483 POSTDEC1        equ     0xfe5
  00000FE4     00484 PREINC1 equ     0xfe4
  00000FDB     00485 PLUSW2  equ     0xfdb
  00000FF3     00486 PRODL   equ     0xff3
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
  00000FF4     00487 PRODH   equ     0xff4
               00488 
               00489 
               00490 ; Internal registers
               00491 .registers      udata_ovr       0x0000
               00492 r0x00   res     1
               00493 r0x01   res     1
               00494 r0x02   res     1
               00495 r0x03   res     1
               00496 r0x04   res     1
               00497 r0x05   res     1
               00498 r0x06   res     1
               00499 r0x07   res     1
               00500 r0x08   res     1
               00501 r0x09   res     1
               00502 r0x0a   res     1
               00503 r0x0b   res     1
               00504 r0x0c   res     1
               00505 r0x0d   res     1
               00506 r0x0e   res     1
               00507 r0x0f   res     1
               00508 r0x10   res     1
               00509 r0x11   res     1
               00510 r0x12   res     1
               00511 r0x13   res     1
               00512 r0x14   res     1
               00513 r0x15   res     1
               00514 
               00515 udata_timer_0   udata
               00516 _in_setting     res     1
               00517 
               00518 udata_timer_1   udata
               00519 _time_value     res     9
               00520 
               00521 udata_timer_2   udata
               00522 _clock  res     6
               00523 
               00524 udata_timer_3   udata
               00525 _flags  res     12
               00526 
               00527 udata_timer_4   udata
               00528 _setting        res     4
               00529 
               00530 udata_timer_5   udata
               00531 _timer  res     4
               00532 
               00533 udata_timer_6   udata
               00534 _ints   res     4
               00535 
               00536 udata_timer_7   udata
               00537 _DisplayWORD_WDigit_1_1 res     6
               00538 
               00539 ;--------------------------------------------------------
               00540 ; interrupt vector 
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 ;--------------------------------------------------------
               00542 
               00543 ;--------------------------------------------------------
               00544 ; global & static initialisations
               00545 ;--------------------------------------------------------
               00546 ; ; Starting pCode block for absolute section
               00547 ; ;-----------------------------------------
               00548 S_timer_ivec_0x1_HighISR        code    0X000008
0008 00549 ivec_0x1_HighISR:
0008 EF00 F000 00550         GOTO    _HighISR
               00551 
               00552 ; I code from now on!
               00553 ; ; Starting pCode block
               00554 S_timer__main   code
0000 00555 _main:
               00556 ;       .line   393; timer.c    LCDInit();
0000 EC00 F000 00557         CALL    _LCDInit
               00558 ;       .line   394; timer.c    DelayMs(200);
0004 0E20      00559         MOVLW   0x20
0006 6E00      00560         MOVWF   r0x00
0008 0E30      00561         MOVLW   0x30
000A 6E00      00562         MOVWF   r0x01
000C 0E05      00563         MOVLW   0x05
000E 6E00      00564         MOVWF   r0x02
0010 6A00      00565         CLRF    r0x03
0012 00566 _00265_DS_:
0012 C000 F000 00567         MOVFF   r0x00, r0x04
0016 C000 F000 00568         MOVFF   r0x01, r0x05
001A C000 F000 00569         MOVFF   r0x02, r0x06
001E C000 F000 00570         MOVFF   r0x03, r0x07
0022 0EFF      00571         MOVLW   0xff
0024 2600      00572         ADDWF   r0x00, F
0026 0EFF      00573         MOVLW   0xff
0028 2200      00574         ADDWFC  r0x01, F
002A 0EFF      00575         MOVLW   0xff
002C 2200      00576         ADDWFC  r0x02, F
002E 0EFF      00577         MOVLW   0xff
0030 2200      00578         ADDWFC  r0x03, F
0032 5000      00579         MOVF    r0x04, W
0034 1000      00580         IORWF   r0x05, W
0036 1000      00581         IORWF   r0x06, W
0038 1000      00582         IORWF   r0x07, W
003A E100      00583         BNZ     _00265_DS_
               00584 ;       .line   397; timer.c    ConfigureRegisters();
003C EC00 F000 00585         CALL    _ConfigureRegisters
               00586 ;       .line   398; timer.c    AssignDefaultValues();
0040 EC00 F000 00587         CALL    _AssignDefaultValues
0044 00588 _00284_DS_:
0044 0000      00589         BANKSEL (_flags + 6)
               00590 ;       .line   401; timer.c    if (flags.half_sec) {               // routine executed every half second
0046 5100      00591         MOVF    (_flags + 6), W, B
0048 0000      00592         BANKSEL (_flags + 7)
004A 1100      00593         IORWF   (_flags + 7), W, B
004C B4D8      00594         BTFSC   STATUS, 2
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004E D000      00595         BRA     _00278_DS_
0050 0000      00596         BANKSEL (_flags + 8)
               00597 ;       .line   403; timer.c    if (flags.one_sec) {
0052 5100      00598         MOVF    (_flags + 8), W, B
0054 0000      00599         BANKSEL (_flags + 9)
0056 1100      00600         IORWF   (_flags + 9), W, B
0058 E000      00601         BZ      _00272_DS_
               00602 ;       .line   404; timer.c    UpdateClock();
005A EC00 F000 00603         CALL    _UpdateClock
005E 00604 _00272_DS_:
005E 0000      00605         BANKSEL (_flags + 8)
               00606 ;       .line   407; timer.c    if (flags.one_sec && flags.alarm) {
0060 5100      00607         MOVF    (_flags + 8), W, B
0062 0000      00608         BANKSEL (_flags + 9)
0064 1100      00609         IORWF   (_flags + 9), W, B
0066 E000      00610         BZ      _00274_DS_
0068 0000      00611         BANKSEL (_flags + 10)
006A 5100      00612         MOVF    (_flags + 10), W, B
006C 0000      00613         BANKSEL (_flags + 11)
006E 1100      00614         IORWF   (_flags + 11), W, B
0070 E000      00615         BZ      _00274_DS_
               00616 ;       .line   408; timer.c    LATJbits.LATJ0 ^= 1;        // led0 blink
0072 6A00      00617         CLRF    r0x00
0074 B000      00618         BTFSC   _LATJbits, 0
0076 2A00      00619         INCF    r0x00, F
0078 0E01      00620         MOVLW   0x01
007A 1A00      00621         XORWF   r0x00, F
007C 5000      00622         MOVF    r0x00, W
007E 0B01      00623         ANDLW   0x01
0080 6EF4      00624         MOVWF   PRODH
0082 5000      00625         MOVF    _LATJbits, W
0084 0BFE      00626         ANDLW   0xfe
0086 10F4      00627         IORWF   PRODH, W
0088 6E00      00628         MOVWF   _LATJbits
               00629 ;       .line   409; timer.c    LATJbits.LATJ1 ^= 1;        // led1 blink
008A 6A00      00630         CLRF    r0x00
008C B200      00631         BTFSC   _LATJbits, 1
008E 2A00      00632         INCF    r0x00, F
0090 0E01      00633         MOVLW   0x01
0092 1A00      00634         XORWF   r0x00, F
0094 5000      00635         MOVF    r0x00, W
0096 0B01      00636         ANDLW   0x01
0098 44E8      00637         RLNCF   WREG, W
009A 6EF4      00638         MOVWF   PRODH
009C 5000      00639         MOVF    _LATJbits, W
009E 0BFD      00640         ANDLW   0xfd
00A0 10F4      00641         IORWF   PRODH, W
00A2 6E00      00642         MOVWF   _LATJbits
00A4 D000      00643         BRA     _00275_DS_
00A6 00644 _00274_DS_:
               00645 ;       .line   411; timer.c    LATJbits.LATJ0 ^= 1;        // led0 blink
00A6 6A00      00646         CLRF    r0x00
00A8 B000      00647         BTFSC   _LATJbits, 0
00AA 2A00      00648         INCF    r0x00, F
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00AC 0E01      00649         MOVLW   0x01
00AE 1A00      00650         XORWF   r0x00, F
00B0 5000      00651         MOVF    r0x00, W
00B2 0B01      00652         ANDLW   0x01
00B4 6EF4      00653         MOVWF   PRODH
00B6 5000      00654         MOVF    _LATJbits, W
00B8 0BFE      00655         ANDLW   0xfe
00BA 10F4      00656         IORWF   PRODH, W
00BC 6E00      00657         MOVWF   _LATJbits
00BE 00658 _00275_DS_:
00BE 0000      00659         BANKSEL (_flags + 8)
               00660 ;       .line   414; timer.c    flags.one_sec = 0;
00C0 6B00      00661         CLRF    (_flags + 8), B
00C2 0000      00662         BANKSEL (_flags + 9)
00C4 6B00      00663         CLRF    (_flags + 9), B
00C6 0000      00664         BANKSEL (_flags + 6)
               00665 ;       .line   415; timer.c    flags.half_sec = 0;
00C8 6B00      00666         CLRF    (_flags + 6), B
00CA 0000      00667         BANKSEL (_flags + 7)
00CC 6B00      00668         CLRF    (_flags + 7), B
00CE 00669 _00278_DS_:
00CE 0000      00670         BANKSEL _ints
               00671 ;       .line   417; timer.c    if (ints.button1) {         // button 1 pressed
00D0 5100      00672         MOVF    _ints, W, B
00D2 0000      00673         BANKSEL (_ints + 1)
00D4 1100      00674         IORWF   (_ints + 1), W, B
00D6 E000      00675         BZ      _00280_DS_
00D8 0000      00676         BANKSEL _ints
               00677 ;       .line   418; timer.c    ints.button1 = 0;
00DA 6B00      00678         CLRF    _ints, B
00DC 0000      00679         BANKSEL (_ints + 1)
00DE 6B00      00680         CLRF    (_ints + 1), B
               00681 ;       .line   419; timer.c    HandleButton1Pressure();
00E0 EC00 F000 00682         CALL    _HandleButton1Pressure
00E4 00683 _00280_DS_:
00E4 0000      00684         BANKSEL (_ints + 2)
               00685 ;       .line   421; timer.c    if (ints.button2) {         // button 2 pressed
00E6 5100      00686         MOVF    (_ints + 2), W, B
00E8 0000      00687         BANKSEL (_ints + 3)
00EA 1100      00688         IORWF   (_ints + 3), W, B
00EC B4D8      00689         BTFSC   STATUS, 2
00EE D000      00690         BRA     _00284_DS_
00F0 0000      00691         BANKSEL (_ints + 2)
               00692 ;       .line   422; timer.c    ints.button2 = 0;
00F2 6B00      00693         CLRF    (_ints + 2), B
00F4 0000      00694         BANKSEL (_ints + 3)
00F6 6B00      00695         CLRF    (_ints + 3), B
               00696 ;       .line   423; timer.c    HandleButton2Pressure();
00F8 EC00 F000 00697         CALL    _HandleButton2Pressure
00FC D000      00698         BRA     _00284_DS_
00FE 0012      00699         RETURN  
               00700 
               00701 ; ; Starting pCode block
               00702 S_timer__strlcpy        code
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000 00703 _strlcpy:
               00704 ;       .line   529; timer.c    strlcpy(char *dst, const char *src, size_t siz)
0000 CFD9 FFE5 00705         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00706         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00707         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00708         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00709         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00710         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00711         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00712         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00713         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00714         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00715         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00716         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 00717         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 00718         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 00719         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 00720         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 00721         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 00722         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 00723         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 00724         MOVFF   r0x11, POSTDEC1
0050 C000 FFE5 00725         MOVFF   r0x12, POSTDEC1
0054 C000 FFE5 00726         MOVFF   r0x13, POSTDEC1
0058 C000 FFE5 00727         MOVFF   r0x14, POSTDEC1
005C C000 FFE5 00728         MOVFF   r0x15, POSTDEC1
0060 0E02      00729         MOVLW   0x02
0062 CFDB F000 00730         MOVFF   PLUSW2, r0x00
0066 0E03      00731         MOVLW   0x03
0068 CFDB F000 00732         MOVFF   PLUSW2, r0x01
006C 0E04      00733         MOVLW   0x04
006E CFDB F000 00734         MOVFF   PLUSW2, r0x02
0072 0E05      00735         MOVLW   0x05
0074 CFDB F000 00736         MOVFF   PLUSW2, r0x03
0078 0E06      00737         MOVLW   0x06
007A CFDB F000 00738         MOVFF   PLUSW2, r0x04
007E 0E07      00739         MOVLW   0x07
0080 CFDB F000 00740         MOVFF   PLUSW2, r0x05
0084 0E08      00741         MOVLW   0x08
0086 CFDB F000 00742         MOVFF   PLUSW2, r0x06
008A 0E09      00743         MOVLW   0x09
008C CFDB F000 00744         MOVFF   PLUSW2, r0x07
               00745 ;       .line   531; timer.c    char       *d = dst;
0090 C000 F000 00746         MOVFF   r0x00, r0x08
0094 C000 F000 00747         MOVFF   r0x01, r0x09
0098 C000 F000 00748         MOVFF   r0x02, r0x0a
               00749 ;       .line   532; timer.c    const char *s = src;
009C C000 F000 00750         MOVFF   r0x03, r0x0b
00A0 C000 F000 00751         MOVFF   r0x04, r0x0c
00A4 C000 F000 00752         MOVFF   r0x05, r0x0d
               00753 ;       .line   533; timer.c    size_t      n = siz;
00A8 C000 F000 00754         MOVFF   r0x06, r0x0e
00AC C000 F000 00755         MOVFF   r0x07, r0x0f
               00756 ;       .line   536; timer.c    if (n != 0)
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B0 5000      00757         MOVF    r0x06, W
00B2 1000      00758         IORWF   r0x07, W
00B4 B4D8      00759         BTFSC   STATUS, 2
00B6 D000      00760         BRA     _00333_DS_
               00761 ;       .line   538; timer.c    while (--n != 0)
00B8 C000 F000 00762         MOVFF   r0x03, r0x10
00BC C000 F000 00763         MOVFF   r0x04, r0x11
00C0 C000 F000 00764         MOVFF   r0x05, r0x12
00C4 C000 F000 00765         MOVFF   r0x06, r0x13
00C8 C000 F000 00766         MOVFF   r0x07, r0x14
00CC 00767 _00329_DS_:
00CC 0EFF      00768         MOVLW   0xff
00CE 2600      00769         ADDWF   r0x13, F
00D0 A0D8      00770         BTFSS   STATUS, 0
00D2 0600      00771         DECF    r0x14, F
00D4 5000      00772         MOVF    r0x13, W
00D6 1000      00773         IORWF   r0x14, W
00D8 E000      00774         BZ      _00348_DS_
               00775 ;       .line   540; timer.c    if ((*d++ = *s++) == '\0')
00DA C000 FFE9 00776         MOVFF   r0x10, FSR0L
00DE C000 FFF3 00777         MOVFF   r0x11, PRODL
00E2 5000      00778         MOVF    r0x12, W
00E4 EC00 F000 00779         CALL    __gptrget1
00E8 6E00      00780         MOVWF   r0x15
00EA 2A00      00781         INCF    r0x10, F
00EC B0D8      00782         BTFSC   STATUS, 0
00EE 2A00      00783         INCF    r0x11, F
00F0 B0D8      00784         BTFSC   STATUS, 0
00F2 2A00      00785         INCF    r0x12, F
00F4 C000 FFE5 00786         MOVFF   r0x15, POSTDEC1
00F8 C000 FFE9 00787         MOVFF   r0x00, FSR0L
00FC C000 FFF3 00788         MOVFF   r0x01, PRODL
0100 5000      00789         MOVF    r0x02, W
0102 EC00 F000 00790         CALL    __gptrput1
0106 2A00      00791         INCF    r0x00, F
0108 B0D8      00792         BTFSC   STATUS, 0
010A 2A00      00793         INCF    r0x01, F
010C B0D8      00794         BTFSC   STATUS, 0
010E 2A00      00795         INCF    r0x02, F
0110 5000      00796         MOVF    r0x15, W
0112 E100      00797         BNZ     _00329_DS_
0114 00798 _00348_DS_:
               00799 ;       .line   541; timer.c    break;
0114 C000 F000 00800         MOVFF   r0x10, r0x0b
0118 C000 F000 00801         MOVFF   r0x11, r0x0c
011C C000 F000 00802         MOVFF   r0x12, r0x0d
0120 C000 F000 00803         MOVFF   r0x00, r0x08
0124 C000 F000 00804         MOVFF   r0x01, r0x09
0128 C000 F000 00805         MOVFF   r0x02, r0x0a
012C C000 F000 00806         MOVFF   r0x13, r0x0e
0130 C000 F000 00807         MOVFF   r0x14, r0x0f
0134 00808 _00333_DS_:
               00809 ;       .line   546; timer.c    if (n == 0)
0134 5000      00810         MOVF    r0x0e, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0136 1000      00811         IORWF   r0x0f, W
0138 E100      00812         BNZ     _00340_DS_
               00813 ;       .line   548; timer.c    if (siz != 0)
013A 5000      00814         MOVF    r0x06, W
013C 1000      00815         IORWF   r0x07, W
013E E000      00816         BZ      _00347_DS_
               00817 ;       .line   549; timer.c    *d = '\0';          /* NUL-terminate dst */
0140 0E00      00818         MOVLW   0x00
0142 6EE5      00819         MOVWF   POSTDEC1
0144 C000 FFE9 00820         MOVFF   r0x08, FSR0L
0148 C000 FFF3 00821         MOVFF   r0x09, PRODL
014C 5000      00822         MOVF    r0x0a, W
014E EC00 F000 00823         CALL    __gptrput1
0152 00824 _00347_DS_:
               00825 ;       .line   550; timer.c    while (*s++)
0152 C000 F000 00826         MOVFF   r0x0b, r0x00
0156 C000 F000 00827         MOVFF   r0x0c, r0x01
015A C000 F000 00828         MOVFF   r0x0d, r0x02
015E 00829 _00336_DS_:
015E C000 FFE9 00830         MOVFF   r0x00, FSR0L
0162 C000 FFF3 00831         MOVFF   r0x01, PRODL
0166 5000      00832         MOVF    r0x02, W
0168 EC00 F000 00833         CALL    __gptrget1
016C 6E00      00834         MOVWF   r0x06
016E 2A00      00835         INCF    r0x00, F
0170 B0D8      00836         BTFSC   STATUS, 0
0172 2A00      00837         INCF    r0x01, F
0174 B0D8      00838         BTFSC   STATUS, 0
0176 2A00      00839         INCF    r0x02, F
0178 5000      00840         MOVF    r0x06, W
017A E100      00841         BNZ     _00336_DS_
017C C000 F000 00842         MOVFF   r0x00, r0x0b
0180 C000 F000 00843         MOVFF   r0x01, r0x0c
0184 C000 F000 00844         MOVFF   r0x02, r0x0d
0188 00845 _00340_DS_:
               00846 ;       .line   554; timer.c    return (s - src - 1);       /* count does not include NUL */
0188 5000      00847         MOVF    r0x03, W
018A 5C00      00848         SUBWF   r0x0b, W
018C 6E00      00849         MOVWF   r0x03
018E 5000      00850         MOVF    r0x04, W
0190 5800      00851         SUBWFB  r0x0c, W
0192 6E00      00852         MOVWF   r0x04
0194 0EFF      00853         MOVLW   0xff
0196 2600      00854         ADDWF   r0x03, F
0198 A0D8      00855         BTFSS   STATUS, 0
019A 0600      00856         DECF    r0x04, F
019C C000 FFF3 00857         MOVFF   r0x04, PRODL
01A0 5000      00858         MOVF    r0x03, W
01A2 CFE4 F000 00859         MOVFF   PREINC1, r0x15
01A6 CFE4 F000 00860         MOVFF   PREINC1, r0x14
01AA CFE4 F000 00861         MOVFF   PREINC1, r0x13
01AE CFE4 F000 00862         MOVFF   PREINC1, r0x12
01B2 CFE4 F000 00863         MOVFF   PREINC1, r0x11
01B6 CFE4 F000 00864         MOVFF   PREINC1, r0x10
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01BA CFE4 F000 00865         MOVFF   PREINC1, r0x0f
01BE CFE4 F000 00866         MOVFF   PREINC1, r0x0e
01C2 CFE4 F000 00867         MOVFF   PREINC1, r0x0d
01C6 CFE4 F000 00868         MOVFF   PREINC1, r0x0c
01CA CFE4 F000 00869         MOVFF   PREINC1, r0x0b
01CE CFE4 F000 00870         MOVFF   PREINC1, r0x0a
01D2 CFE4 F000 00871         MOVFF   PREINC1, r0x09
01D6 CFE4 F000 00872         MOVFF   PREINC1, r0x08
01DA CFE4 F000 00873         MOVFF   PREINC1, r0x07
01DE CFE4 F000 00874         MOVFF   PREINC1, r0x06
01E2 CFE4 F000 00875         MOVFF   PREINC1, r0x05
01E6 CFE4 F000 00876         MOVFF   PREINC1, r0x04
01EA CFE4 F000 00877         MOVFF   PREINC1, r0x03
01EE CFE4 F000 00878         MOVFF   PREINC1, r0x02
01F2 CFE4 F000 00879         MOVFF   PREINC1, r0x01
01F6 CFE4 F000 00880         MOVFF   PREINC1, r0x00
01FA CFE4 FFD9 00881         MOVFF   PREINC1, FSR2L
01FE 0012      00882         RETURN  
               00883 
               00884 ; ; Starting pCode block
               00885 S_timer__DisplayString  code
0000 00886 _DisplayString:
               00887 ;       .line   477; timer.c    void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00888         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00889         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00890         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00891         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00892         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00893         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00894         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00895         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00896         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00897         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00898         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00899         MOVFF   r0x09, POSTDEC1
0030 0E02      00900         MOVLW   0x02
0032 CFDB F000 00901         MOVFF   PLUSW2, r0x00
0036 0E03      00902         MOVLW   0x03
0038 CFDB F000 00903         MOVFF   PLUSW2, r0x01
003C 0E04      00904         MOVLW   0x04
003E CFDB F000 00905         MOVFF   PLUSW2, r0x02
0042 0E05      00906         MOVLW   0x05
0044 CFDB F000 00907         MOVFF   PLUSW2, r0x03
               00908 ;       .line   479; timer.c    BYTE        l = strlen(text);/*number of actual chars in the string*/
0048 5000      00909         MOVF    r0x03, W
004A 6EE5      00910         MOVWF   POSTDEC1
004C 5000      00911         MOVF    r0x02, W
004E 6EE5      00912         MOVWF   POSTDEC1
0050 5000      00913         MOVF    r0x01, W
0052 6EE5      00914         MOVWF   POSTDEC1
0054 EC00 F000 00915         CALL    _strlen
0058 6E00      00916         MOVWF   r0x04
005A CFF3 F000 00917         MOVFF   PRODL, r0x05
005E 0E03      00918         MOVLW   0x03
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0060 26E1      00919         ADDWF   FSR1L, F
               00920 ;       .line   480; timer.c    BYTE      max = 32-pos;    /*available space on the lcd*/
0062 5000      00921         MOVF    r0x00, W
0064 0820      00922         SUBLW   0x20
0066 6E00      00923         MOVWF   r0x05
               00924 ;       .line   481; timer.c    char       *d = (char*)&LCDText[pos];
0068 6A00      00925         CLRF    r0x06
006A 0E00      00926         MOVLW   LOW(_LCDText)
006C 2600      00927         ADDWF   r0x00, F
006E 0E00      00928         MOVLW   HIGH(_LCDText)
0070 2200      00929         ADDWFC  r0x06, F
0072 5000      00930         MOVF    r0x06, W
0074 6E00      00931         MOVWF   r0x06
0076 5000      00932         MOVF    r0x00, W
0078 6E00      00933         MOVWF   r0x00
007A 0E80      00934         MOVLW   0x80
007C 6E00      00935         MOVWF   r0x07
               00936 ;       .line   483; timer.c    size_t      n = (l<max)?l:max;
007E 5000      00937         MOVF    r0x05, W
0080 5C00      00938         SUBWF   r0x04, W
0082 E300      00939         BNC     _00317_DS_
0084 C000 F000 00940         MOVFF   r0x05, r0x04
0088 00941 _00317_DS_:
0088 6A00      00942         CLRF    r0x05
               00943 ;       .line   485; timer.c    if (n != 0)
008A 5000      00944         MOVF    r0x04, W
008C 1000      00945         IORWF   r0x05, W
008E E000      00946         BZ      _00313_DS_
0090 00947 _00309_DS_:
               00948 ;       .line   486; timer.c    while (n-- != 0)*d++ = *s++;
0090 C000 F000 00949         MOVFF   r0x04, r0x08
0094 C000 F000 00950         MOVFF   r0x05, r0x09
0098 0EFF      00951         MOVLW   0xff
009A 2600      00952         ADDWF   r0x04, F
009C A0D8      00953         BTFSS   STATUS, 0
009E 0600      00954         DECF    r0x05, F
00A0 5000      00955         MOVF    r0x08, W
00A2 1000      00956         IORWF   r0x09, W
00A4 E000      00957         BZ      _00313_DS_
00A6 C000 FFE9 00958         MOVFF   r0x01, FSR0L
00AA C000 FFF3 00959         MOVFF   r0x02, PRODL
00AE 5000      00960         MOVF    r0x03, W
00B0 EC00 F000 00961         CALL    __gptrget1
00B4 6E00      00962         MOVWF   r0x08
00B6 2A00      00963         INCF    r0x01, F
00B8 B0D8      00964         BTFSC   STATUS, 0
00BA 2A00      00965         INCF    r0x02, F
00BC B0D8      00966         BTFSC   STATUS, 0
00BE 2A00      00967         INCF    r0x03, F
00C0 C000 FFE5 00968         MOVFF   r0x08, POSTDEC1
00C4 C000 FFE9 00969         MOVFF   r0x00, FSR0L
00C8 C000 FFF3 00970         MOVFF   r0x06, PRODL
00CC 5000      00971         MOVF    r0x07, W
00CE EC00 F000 00972         CALL    __gptrput1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D2 2A00      00973         INCF    r0x00, F
00D4 B0D8      00974         BTFSC   STATUS, 0
00D6 2A00      00975         INCF    r0x06, F
00D8 B0D8      00976         BTFSC   STATUS, 0
00DA 2A00      00977         INCF    r0x07, F
00DC D000      00978         BRA     _00309_DS_
00DE 00979 _00313_DS_:
               00980 ;       .line   487; timer.c    LCDUpdate();
00DE EC00 F000 00981         CALL    _LCDUpdate
00E2 CFE4 F000 00982         MOVFF   PREINC1, r0x09
00E6 CFE4 F000 00983         MOVFF   PREINC1, r0x08
00EA CFE4 F000 00984         MOVFF   PREINC1, r0x07
00EE CFE4 F000 00985         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 00986         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 00987         MOVFF   PREINC1, r0x04
00FA CFE4 F000 00988         MOVFF   PREINC1, r0x03
00FE CFE4 F000 00989         MOVFF   PREINC1, r0x02
0102 CFE4 F000 00990         MOVFF   PREINC1, r0x01
0106 CFE4 F000 00991         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 00992         MOVFF   PREINC1, FSR2L
010E 0012      00993         RETURN  
               00994 
               00995 ; ; Starting pCode block
               00996 S_timer__DisplayWORD    code
0000 00997 _DisplayWORD:
               00998 ;       .line   438; timer.c    void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0000 CFD9 FFE5 00999         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01000         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01001         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01002         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01003         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01004         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01005         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01006         MOVFF   r0x05, POSTDEC1
0020 0E02      01007         MOVLW   0x02
0022 CFDB F000 01008         MOVFF   PLUSW2, r0x00
0026 0E03      01009         MOVLW   0x03
0028 CFDB F000 01010         MOVFF   PLUSW2, r0x01
002C 0E04      01011         MOVLW   0x04
002E CFDB F000 01012         MOVFF   PLUSW2, r0x02
               01013 ;       .line   446; timer.c    ultoa(w, WDigit, radix);      
0032 6A00      01014         CLRF    r0x03
0034 6A00      01015         CLRF    r0x04
0036 0E0A      01016         MOVLW   0x0a
0038 6EE5      01017         MOVWF   POSTDEC1
003A 0E00      01018         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
003C 6EE5      01019         MOVWF   POSTDEC1
003E 0E00      01020         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0040 6EE5      01021         MOVWF   POSTDEC1
0042 5000      01022         MOVF    r0x04, W
0044 6EE5      01023         MOVWF   POSTDEC1
0046 5000      01024         MOVF    r0x03, W
0048 6EE5      01025         MOVWF   POSTDEC1
004A 5000      01026         MOVF    r0x02, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004C 6EE5      01027         MOVWF   POSTDEC1
004E 5000      01028         MOVF    r0x01, W
0050 6EE5      01029         MOVWF   POSTDEC1
0052 EC00 F000 01030         CALL    _ultoa
0056 0E07      01031         MOVLW   0x07
0058 26E1      01032         ADDWF   FSR1L, F
               01033 ;       .line   447; timer.c    for(j = 0; j < strlen((char*)WDigit); j++)
005A 6A00      01034         CLRF    r0x01
005C 01035 _00293_DS_:
005C 0E00      01036         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
005E 6E00      01037         MOVWF   r0x03
0060 0E00      01038         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0062 6E00      01039         MOVWF   r0x02
0064 0E80      01040         MOVLW   0x80
0066 6E00      01041         MOVWF   r0x04
0068 5000      01042         MOVF    r0x04, W
006A 6EE5      01043         MOVWF   POSTDEC1
006C 5000      01044         MOVF    r0x03, W
006E 6EE5      01045         MOVWF   POSTDEC1
0070 5000      01046         MOVF    r0x02, W
0072 6EE5      01047         MOVWF   POSTDEC1
0074 EC00 F000 01048         CALL    _strlen
0078 6E00      01049         MOVWF   r0x02
007A CFF3 F000 01050         MOVFF   PRODL, r0x03
007E 0E03      01051         MOVLW   0x03
0080 26E1      01052         ADDWF   FSR1L, F
0082 C000 F000 01053         MOVFF   r0x01, r0x04
0086 6A00      01054         CLRF    r0x05
0088 5000      01055         MOVF    r0x05, W
008A 0F80      01056         ADDLW   0x80
008C 6EF3      01057         MOVWF   PRODL
008E 5000      01058         MOVF    r0x03, W
0090 0F80      01059         ADDLW   0x80
0092 5CF3      01060         SUBWF   PRODL, W
0094 E100      01061         BNZ     _00303_DS_
0096 5000      01062         MOVF    r0x02, W
0098 5C00      01063         SUBWF   r0x04, W
009A 01064 _00303_DS_:
009A E200      01065         BC      _00296_DS_
               01066 ;       .line   449; timer.c    LCDText[LCDPos++] = WDigit[j];
009C C000 F000 01067         MOVFF   r0x00, r0x02
00A0 2A00      01068         INCF    r0x00, F
00A2 6A00      01069         CLRF    r0x03
00A4 0E00      01070         MOVLW   LOW(_LCDText)
00A6 2600      01071         ADDWF   r0x02, F
00A8 0E00      01072         MOVLW   HIGH(_LCDText)
00AA 2200      01073         ADDWFC  r0x03, F
00AC 0E00      01074         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
00AE 2400      01075         ADDWF   r0x01, W
00B0 6E00      01076         MOVWF   r0x04
00B2 6A00      01077         CLRF    r0x05
00B4 0E00      01078         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
00B6 2200      01079         ADDWFC  r0x05, F
00B8 C000 FFE9 01080         MOVFF   r0x04, FSR0L
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00BC C000 FFEA 01081         MOVFF   r0x05, FSR0H
00C0 CFEF F000 01082         MOVFF   INDF0, r0x04
00C4 C000 FFE9 01083         MOVFF   r0x02, FSR0L
00C8 C000 FFEA 01084         MOVFF   r0x03, FSR0H
00CC C000 FFEF 01085         MOVFF   r0x04, INDF0
               01086 ;       .line   447; timer.c    for(j = 0; j < strlen((char*)WDigit); j++)
00D0 2A00      01087         INCF    r0x01, F
00D2 D000      01088         BRA     _00293_DS_
00D4 01089 _00296_DS_:
               01090 ;       .line   451; timer.c    if(LCDPos < 32u)
00D4 C000 F000 01091         MOVFF   r0x00, r0x01
00D8 6A00      01092         CLRF    r0x02
00DA 0E00      01093         MOVLW   0x00
00DC 5C00      01094         SUBWF   r0x02, W
00DE E100      01095         BNZ     _00304_DS_
00E0 0E20      01096         MOVLW   0x20
00E2 5C00      01097         SUBWF   r0x01, W
00E4 01098 _00304_DS_:
00E4 E200      01099         BC      _00292_DS_
               01100 ;       .line   452; timer.c    LCDText[LCDPos] = 0;
00E6 6A00      01101         CLRF    r0x01
00E8 0E00      01102         MOVLW   LOW(_LCDText)
00EA 2600      01103         ADDWF   r0x00, F
00EC 0E00      01104         MOVLW   HIGH(_LCDText)
00EE 2200      01105         ADDWFC  r0x01, F
00F0 C000 FFE9 01106         MOVFF   r0x00, FSR0L
00F4 C000 FFEA 01107         MOVFF   r0x01, FSR0H
00F8 0E00      01108         MOVLW   0x00
00FA 6EEF      01109         MOVWF   INDF0
00FC 01110 _00292_DS_:
               01111 ;       .line   453; timer.c    LCDUpdate();
00FC EC00 F000 01112         CALL    _LCDUpdate
0100 CFE4 F000 01113         MOVFF   PREINC1, r0x05
0104 CFE4 F000 01114         MOVFF   PREINC1, r0x04
0108 CFE4 F000 01115         MOVFF   PREINC1, r0x03
010C CFE4 F000 01116         MOVFF   PREINC1, r0x02
0110 CFE4 F000 01117         MOVFF   PREINC1, r0x01
0114 CFE4 F000 01118         MOVFF   PREINC1, r0x00
0118 CFE4 FFD9 01119         MOVFF   PREINC1, FSR2L
011C 0012      01120         RETURN  
               01121 
               01122 ; ; Starting pCode block
               01123 S_timer__HighISR        code
0000 01124 _HighISR:
               01125 ;       .line   372; timer.c    void HighISR(void) __interrupt (1) {
0000 CFE8 FFE5 01126         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01127         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 01128         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01129         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01130         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01131         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01132         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01133         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01134         MOVFF   PCLATU, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0024 CFD9 FFE5 01135         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01136         MOVFF   FSR1L, FSR2L
002C C000 FFE5 01137         MOVFF   r0x00, POSTDEC1
               01138 ;       .line   373; timer.c    if(PIR1bits.TMR1IF == 1) {      // timer1 overflow (every 0.5 seconds)
0030 6A00      01139         CLRF    r0x00
0032 B000      01140         BTFSC   _PIR1bits, 0
0034 2A00      01141         INCF    r0x00, F
0036 5000      01142         MOVF    r0x00, W
0038 0A01      01143         XORLW   0x01
003A E100      01144         BNZ     _00244_DS_
               01145 ;       .line   374; timer.c    TMR1L             =     (0x10000 - EXTCLOCK_FREQ/2) & 0xff;    // timer1 reset
003C 6A00      01146         CLRF    _TMR1L
               01147 ;       .line   375; timer.c    TMR1H             =     (0x10000 - EXTCLOCK_FREQ/2) >> 8;
003E 0EC0      01148         MOVLW   0xc0
0040 6E00      01149         MOVWF   _TMR1H
               01150 ;       .line   376; timer.c    flags.half_sec = 1;         // set a flag every 0.5 seconds
0042 0E01      01151         MOVLW   0x01
0044 0000      01152         BANKSEL (_flags + 6)
0046 6F00      01153         MOVWF   (_flags + 6), B
0048 0000      01154         BANKSEL (_flags + 7)
004A 6B00      01155         CLRF    (_flags + 7), B
               01156 ;       .line   377; timer.c    if(!LATJbits.LATJ0)
004C B000      01157         BTFSC   _LATJbits, 0
004E D000      01158         BRA     _00242_DS_
               01159 ;       .line   378; timer.c    flags.one_sec = 1;      // set a flag every second (i.e. every time led0 becomes high)
0050 0E01      01160         MOVLW   0x01
0052 0000      01161         BANKSEL (_flags + 8)
0054 6F00      01162         MOVWF   (_flags + 8), B
0056 0000      01163         BANKSEL (_flags + 9)
0058 6B00      01164         CLRF    (_flags + 9), B
005A 01165 _00242_DS_:
               01166 ;       .line   379; timer.c    PIR1bits.TMR1IF = 0;
005A 9000      01167         BCF     _PIR1bits, 0
005C 01168 _00244_DS_:
               01169 ;       .line   381; timer.c    if(INTCON3bits.INT1F == 1) {    // button 2 ISR
005C 6A00      01170         CLRF    r0x00
005E B000      01171         BTFSC   _INTCON3bits, 0
0060 2A00      01172         INCF    r0x00, F
0062 5000      01173         MOVF    r0x00, W
0064 0A01      01174         XORLW   0x01
0066 E100      01175         BNZ     _00246_DS_
               01176 ;       .line   382; timer.c    ints.button2 = 1;           // set a flag for successive handling
0068 0E01      01177         MOVLW   0x01
006A 0000      01178         BANKSEL (_ints + 2)
006C 6F00      01179         MOVWF   (_ints + 2), B
006E 0000      01180         BANKSEL (_ints + 3)
0070 6B00      01181         CLRF    (_ints + 3), B
               01182 ;       .line   383; timer.c    INTCON3bits.INT1F = 0;
0072 9000      01183         BCF     _INTCON3bits, 0
0074 01184 _00246_DS_:
               01185 ;       .line   385; timer.c    if (INTCON3bits.INT3F == 1) {   // button 1 ISR
0074 6A00      01186         CLRF    r0x00
0076 B400      01187         BTFSC   _INTCON3bits, 2
0078 2A00      01188         INCF    r0x00, F
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
007A 5000      01189         MOVF    r0x00, W
007C 0A01      01190         XORLW   0x01
007E E100      01191         BNZ     _00249_DS_
               01192 ;       .line   386; timer.c    ints.button1 = 1;           // set a flag for successive handling
0080 0E01      01193         MOVLW   0x01
0082 0000      01194         BANKSEL _ints
0084 6F00      01195         MOVWF   _ints, B
0086 0000      01196         BANKSEL (_ints + 1)
0088 6B00      01197         CLRF    (_ints + 1), B
               01198 ;       .line   387; timer.c    INTCON3bits.INT3F = 0;
008A 9400      01199         BCF     _INTCON3bits, 2
008C 01200 _00249_DS_:
008C CFE4 F000 01201         MOVFF   PREINC1, r0x00
0090 CFE4 FFD9 01202         MOVFF   PREINC1, FSR2L
0094 CFE4 FFFB 01203         MOVFF   PREINC1, PCLATU
0098 CFE4 FFFA 01204         MOVFF   PREINC1, PCLATH
009C CFE4 FFEA 01205         MOVFF   PREINC1, FSR0H
00A0 CFE4 FFE9 01206         MOVFF   PREINC1, FSR0L
00A4 CFE4 FFF4 01207         MOVFF   PREINC1, PRODH
00A8 CFE4 FFF3 01208         MOVFF   PREINC1, PRODL
00AC CFE4 FFE0 01209         MOVFF   PREINC1, BSR
00B0 CFE4 FFD8 01210         MOVFF   PREINC1, STATUS
00B4 CFE4 FFE8 01211         MOVFF   PREINC1, WREG
00B8 0010      01212         RETFIE  
               01213 
               01214 ; ; Starting pCode block
               01215 S_timer__UpdateClock    code
0000 01216 _UpdateClock:
               01217 ;       .line   347; timer.c    void UpdateClock() {
0000 CFD9 FFE5 01218         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01219         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01220         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01221         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01222         MOVFF   r0x02, POSTDEC1
               01223 ;       .line   348; timer.c    UpdateTimeValue(&clock.seconds, MAX_SECONDS, 6);
0014 0E00      01224         MOVLW   HIGH(_clock + 4)
0016 6E00      01225         MOVWF   r0x01
0018 0E00      01226         MOVLW   LOW(_clock + 4)
001A 6E00      01227         MOVWF   r0x00
001C 0E80      01228         MOVLW   0x80
001E 6E00      01229         MOVWF   r0x02
0020 0E00      01230         MOVLW   0x00
0022 6EE5      01231         MOVWF   POSTDEC1
0024 0E06      01232         MOVLW   0x06
0026 6EE5      01233         MOVWF   POSTDEC1
0028 0E00      01234         MOVLW   0x00
002A 6EE5      01235         MOVWF   POSTDEC1
002C 0E3B      01236         MOVLW   0x3b
002E 6EE5      01237         MOVWF   POSTDEC1
0030 5000      01238         MOVF    r0x02, W
0032 6EE5      01239         MOVWF   POSTDEC1
0034 5000      01240         MOVF    r0x01, W
0036 6EE5      01241         MOVWF   POSTDEC1
0038 5000      01242         MOVF    r0x00, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003A 6EE5      01243         MOVWF   POSTDEC1
003C EC00 F000 01244         CALL    _UpdateTimeValue
0040 0E07      01245         MOVLW   0x07
0042 26E1      01246         ADDWF   FSR1L, F
0044 0000      01247         BANKSEL (_clock + 4)
               01248 ;       .line   349; timer.c    if (!clock.seconds) { // new minute
0046 5100      01249         MOVF    (_clock + 4), W, B
0048 0000      01250         BANKSEL (_clock + 5)
004A 1100      01251         IORWF   (_clock + 5), W, B
004C A4D8      01252         BTFSS   STATUS, 2
004E D000      01253         BRA     _00207_DS_
               01254 ;       .line   350; timer.c    UpdateTimeValue(&clock.minutes, MAX_MINUTES, 3);
0050 0E00      01255         MOVLW   HIGH(_clock + 2)
0052 6E00      01256         MOVWF   r0x01
0054 0E00      01257         MOVLW   LOW(_clock + 2)
0056 6E00      01258         MOVWF   r0x00
0058 0E80      01259         MOVLW   0x80
005A 6E00      01260         MOVWF   r0x02
005C 0E00      01261         MOVLW   0x00
005E 6EE5      01262         MOVWF   POSTDEC1
0060 0E03      01263         MOVLW   0x03
0062 6EE5      01264         MOVWF   POSTDEC1
0064 0E00      01265         MOVLW   0x00
0066 6EE5      01266         MOVWF   POSTDEC1
0068 0E3B      01267         MOVLW   0x3b
006A 6EE5      01268         MOVWF   POSTDEC1
006C 5000      01269         MOVF    r0x02, W
006E 6EE5      01270         MOVWF   POSTDEC1
0070 5000      01271         MOVF    r0x01, W
0072 6EE5      01272         MOVWF   POSTDEC1
0074 5000      01273         MOVF    r0x00, W
0076 6EE5      01274         MOVWF   POSTDEC1
0078 EC00 F000 01275         CALL    _UpdateTimeValue
007C 0E07      01276         MOVLW   0x07
007E 26E1      01277         ADDWF   FSR1L, F
               01278 ;       .line   351; timer.c    time_value[5] = ':';
0080 0E3A      01279         MOVLW   0x3a
0082 0000      01280         BANKSEL (_time_value + 5)
0084 6F00      01281         MOVWF   (_time_value + 5), B
0086 0000      01282         BANKSEL (_clock + 2)
               01283 ;       .line   352; timer.c    if (!clock.minutes) { // new hour
0088 5100      01284         MOVF    (_clock + 2), W, B
008A 0000      01285         BANKSEL (_clock + 3)
008C 1100      01286         IORWF   (_clock + 3), W, B
008E E100      01287         BNZ     _00201_DS_
               01288 ;       .line   353; timer.c    UpdateTimeValue(&clock.hours, MAX_HOURS, 0);
0090 0E00      01289         MOVLW   HIGH(_clock)
0092 6E00      01290         MOVWF   r0x01
0094 0E00      01291         MOVLW   LOW(_clock)
0096 6E00      01292         MOVWF   r0x00
0098 0E80      01293         MOVLW   0x80
009A 6E00      01294         MOVWF   r0x02
009C 0E00      01295         MOVLW   0x00
009E 6EE5      01296         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00A0 0E00      01297         MOVLW   0x00
00A2 6EE5      01298         MOVWF   POSTDEC1
00A4 0E00      01299         MOVLW   0x00
00A6 6EE5      01300         MOVWF   POSTDEC1
00A8 0E17      01301         MOVLW   0x17
00AA 6EE5      01302         MOVWF   POSTDEC1
00AC 5000      01303         MOVF    r0x02, W
00AE 6EE5      01304         MOVWF   POSTDEC1
00B0 5000      01305         MOVF    r0x01, W
00B2 6EE5      01306         MOVWF   POSTDEC1
00B4 5000      01307         MOVF    r0x00, W
00B6 6EE5      01308         MOVWF   POSTDEC1
00B8 EC00 F000 01309         CALL    _UpdateTimeValue
00BC 0E07      01310         MOVLW   0x07
00BE 26E1      01311         ADDWF   FSR1L, F
               01312 ;       .line   354; timer.c    time_value[2] = ':';
00C0 0E3A      01313         MOVLW   0x3a
00C2 0000      01314         BANKSEL (_time_value + 2)
00C4 6F00      01315         MOVWF   (_time_value + 2), B
00C6 01316 _00201_DS_:
00C6 0000      01317         BANKSEL (_flags + 10)
               01318 ;       .line   356; timer.c    if(!flags.alarm && (clock.minutes == timer.minutes && clock.hours == timer.hours))
00C8 5100      01319         MOVF    (_flags + 10), W, B
00CA 0000      01320         BANKSEL (_flags + 11)
00CC 1100      01321         IORWF   (_flags + 11), W, B
00CE E100      01322         BNZ     _00207_DS_
00D0 0000      01323         BANKSEL (_clock + 2)
00D2 5100      01324         MOVF    (_clock + 2), W, B
00D4 0000      01325         BANKSEL (_timer + 2)
00D6 1900      01326         XORWF   (_timer + 2), W, B
00D8 E100      01327         BNZ     _00228_DS_
00DA 0000      01328         BANKSEL (_clock + 3)
00DC 5100      01329         MOVF    (_clock + 3), W, B
00DE 0000      01330         BANKSEL (_timer + 3)
00E0 1900      01331         XORWF   (_timer + 3), W, B
00E2 E000      01332         BZ      _00229_DS_
00E4 01333 _00228_DS_:
00E4 D000      01334         BRA     _00207_DS_
00E6 01335 _00229_DS_:
00E6 0000      01336         BANKSEL _clock
00E8 5100      01337         MOVF    _clock, W, B
00EA 0000      01338         BANKSEL _timer
00EC 1900      01339         XORWF   _timer, W, B
00EE E100      01340         BNZ     _00230_DS_
00F0 0000      01341         BANKSEL (_clock + 1)
00F2 5100      01342         MOVF    (_clock + 1), W, B
00F4 0000      01343         BANKSEL (_timer + 1)
00F6 1900      01344         XORWF   (_timer + 1), W, B
00F8 E000      01345         BZ      _00231_DS_
00FA 01346 _00230_DS_:
00FA D000      01347         BRA     _00207_DS_
00FC 01348 _00231_DS_:
               01349 ;       .line   357; timer.c    flags.alarm = 1; // alarm activation
00FC 0E01      01350         MOVLW   0x01
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00FE 0000      01351         BANKSEL (_flags + 10)
0100 6F00      01352         MOVWF   (_flags + 10), B
0102 0000      01353         BANKSEL (_flags + 11)
0104 6B00      01354         CLRF    (_flags + 11), B
0106 01355 _00207_DS_:
0106 0000      01356         BANKSEL (_flags + 10)
               01357 ;       .line   359; timer.c    if(flags.alarm && (clock.seconds > (30 + 1) || clock.minutes != timer.minutes || clock.hours != timer.hours))
0108 5100      01358         MOVF    (_flags + 10), W, B
010A 0000      01359         BANKSEL (_flags + 11)
010C 1100      01360         IORWF   (_flags + 11), W, B
010E E000      01361         BZ      _00209_DS_
0110 0000      01362         BANKSEL (_clock + 5)
0112 5100      01363         MOVF    (_clock + 5), W, B
0114 0F80      01364         ADDLW   0x80
0116 0F80      01365         ADDLW   0x80
0118 E100      01366         BNZ     _00232_DS_
011A 0E20      01367         MOVLW   0x20
011C 0000      01368         BANKSEL (_clock + 4)
011E 5D00      01369         SUBWF   (_clock + 4), W, B
0120 01370 _00232_DS_:
0120 E200      01371         BC      _00208_DS_
0122 0000      01372         BANKSEL (_clock + 2)
0124 5100      01373         MOVF    (_clock + 2), W, B
0126 0000      01374         BANKSEL (_timer + 2)
0128 1900      01375         XORWF   (_timer + 2), W, B
012A E100      01376         BNZ     _00233_DS_
012C 0000      01377         BANKSEL (_clock + 3)
012E 5100      01378         MOVF    (_clock + 3), W, B
0130 0000      01379         BANKSEL (_timer + 3)
0132 1900      01380         XORWF   (_timer + 3), W, B
0134 E000      01381         BZ      _00234_DS_
0136 01382 _00233_DS_:
0136 D000      01383         BRA     _00208_DS_
0138 01384 _00234_DS_:
0138 0000      01385         BANKSEL _clock
013A 5100      01386         MOVF    _clock, W, B
013C 0000      01387         BANKSEL _timer
013E 1900      01388         XORWF   _timer, W, B
0140 E100      01389         BNZ     _00208_DS_
0142 0000      01390         BANKSEL (_clock + 1)
0144 5100      01391         MOVF    (_clock + 1), W, B
0146 0000      01392         BANKSEL (_timer + 1)
0148 1900      01393         XORWF   (_timer + 1), W, B
014A E000      01394         BZ      _00209_DS_
014C 01395 _00208_DS_:
014C 0000      01396         BANKSEL (_flags + 10)
               01397 ;       .line   360; timer.c    flags.alarm = 0;     // alarm deactivation after ~30 seconds or after clock change
014E 6B00      01398         CLRF    (_flags + 10), B
0150 0000      01399         BANKSEL (_flags + 11)
0152 6B00      01400         CLRF    (_flags + 11), B
0154 01401 _00209_DS_:
0154 0000      01402         BANKSEL (_flags + 2)
               01403 ;       .line   361; timer.c    if (!flags.awake_setting_procedure    && !flags.time_setting_procedure)
0156 5100      01404         MOVF    (_flags + 2), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0158 0000      01405         BANKSEL (_flags + 3)
015A 1100      01406         IORWF   (_flags + 3), W, B
015C E100      01407         BNZ     _00216_DS_
015E 0000      01408         BANKSEL _flags
0160 5100      01409         MOVF    _flags, W, B
0162 0000      01410         BANKSEL (_flags + 1)
0164 1100      01411         IORWF   (_flags + 1), W, B
0166 E100      01412         BNZ     _00216_DS_
               01413 ;       .line   362; timer.c    DisplayString(16, &time_value[0]);
0168 0E00      01414         MOVLW   HIGH(_time_value)
016A 6E00      01415         MOVWF   r0x01
016C 0E00      01416         MOVLW   LOW(_time_value)
016E 6E00      01417         MOVWF   r0x00
0170 0E80      01418         MOVLW   0x80
0172 6E00      01419         MOVWF   r0x02
0174 5000      01420         MOVF    r0x02, W
0176 6EE5      01421         MOVWF   POSTDEC1
0178 5000      01422         MOVF    r0x01, W
017A 6EE5      01423         MOVWF   POSTDEC1
017C 5000      01424         MOVF    r0x00, W
017E 6EE5      01425         MOVWF   POSTDEC1
0180 0E10      01426         MOVLW   0x10
0182 6EE5      01427         MOVWF   POSTDEC1
0184 EC00 F000 01428         CALL    _DisplayString
0188 0E04      01429         MOVLW   0x04
018A 26E1      01430         ADDWF   FSR1L, F
018C 01431 _00216_DS_:
018C CFE4 F000 01432         MOVFF   PREINC1, r0x02
0190 CFE4 F000 01433         MOVFF   PREINC1, r0x01
0194 CFE4 F000 01434         MOVFF   PREINC1, r0x00
0198 CFE4 FFD9 01435         MOVFF   PREINC1, FSR2L
019C 0012      01436         RETURN  
               01437 
               01438 ; ; Starting pCode block
               01439 S_timer__UpdateDisplay  code
0000 01440 _UpdateDisplay:
               01441 ;       .line   319; timer.c    void UpdateDisplay(enum display_states state) {
0000 CFD9 FFE5 01442         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01443         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01444         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01445         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01446         MOVFF   r0x02, POSTDEC1
0014 0E02      01447         MOVLW   0x02
0016 CFDB F000 01448         MOVFF   PLUSW2, r0x00
               01449 ;       .line   320; timer.c    switch (state) {
001A 0E03      01450         MOVLW   0x03
001C 5C00      01451         SUBWF   r0x00, W
001E B0D8      01452         BTFSC   STATUS, 0
0020 D000      01453         BRA     _00191_DS_
0022 C000 FFE5 01454         MOVFF   r0x03, POSTDEC1
0026 C000 FFE5 01455         MOVFF   r0x04, POSTDEC1
002A 6A00      01456         CLRF    r0x04
002C 3400      01457         RLCF    r0x00, W
002E 3600      01458         RLCF    r0x04, F
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0030 34E8      01459         RLCF    WREG, W
0032 3600      01460         RLCF    r0x04, F
0034 0BFC      01461         ANDLW   0xfc
0036 6E00      01462         MOVWF   r0x03
0038 0E00      01463         MOVLW   UPPER(_00195_DS_)
003A 6EFB      01464         MOVWF   PCLATU
003C 0E00      01465         MOVLW   HIGH(_00195_DS_)
003E 6EFA      01466         MOVWF   PCLATH
0040 0E00      01467         MOVLW   LOW(_00195_DS_)
0042 2600      01468         ADDWF   r0x03, F
0044 5000      01469         MOVF    r0x04, W
0046 22FA      01470         ADDWFC  PCLATH, F
0048 B0D8      01471         BTFSC   STATUS, 0
004A 2AFB      01472         INCF    PCLATU, F
004C 5000      01473         MOVF    r0x03, W
004E CFE4 F000 01474         MOVFF   PREINC1, r0x04
0052 CFE4 F000 01475         MOVFF   PREINC1, r0x03
0056 6EF9      01476         MOVWF   PCL
0058 01477 _00195_DS_:
0058 EF00 F000 01478         GOTO    _00187_DS_
005C EF00 F000 01479         GOTO    _00188_DS_
0060 EF00 F000 01480         GOTO    _00189_DS_
0064 01481 _00187_DS_:
               01482 ;       .line   322; timer.c    DisplayString(0,"Enter the time:");
0064 0E00      01483         MOVLW   UPPER(__str_0)
0066 6EE5      01484         MOVWF   POSTDEC1
0068 0E00      01485         MOVLW   HIGH(__str_0)
006A 6EE5      01486         MOVWF   POSTDEC1
006C 0E00      01487         MOVLW   LOW(__str_0)
006E 6EE5      01488         MOVWF   POSTDEC1
0070 0E00      01489         MOVLW   0x00
0072 6EE5      01490         MOVWF   POSTDEC1
0074 EC00 F000 01491         CALL    _DisplayString
0078 0E04      01492         MOVLW   0x04
007A 26E1      01493         ADDWF   FSR1L, F
               01494 ;       .line   323; timer.c    DisplayString(16, &time_value[0]);
007C 0E00      01495         MOVLW   HIGH(_time_value)
007E 6E00      01496         MOVWF   r0x01
0080 0E00      01497         MOVLW   LOW(_time_value)
0082 6E00      01498         MOVWF   r0x00
0084 0E80      01499         MOVLW   0x80
0086 6E00      01500         MOVWF   r0x02
0088 5000      01501         MOVF    r0x02, W
008A 6EE5      01502         MOVWF   POSTDEC1
008C 5000      01503         MOVF    r0x01, W
008E 6EE5      01504         MOVWF   POSTDEC1
0090 5000      01505         MOVF    r0x00, W
0092 6EE5      01506         MOVWF   POSTDEC1
0094 0E10      01507         MOVLW   0x10
0096 6EE5      01508         MOVWF   POSTDEC1
0098 EC00 F000 01509         CALL    _DisplayString
009C 0E04      01510         MOVLW   0x04
009E 26E1      01511         ADDWF   FSR1L, F
               01512 ;       .line   324; timer.c    DisplayString(21,"   ");
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00A0 0E00      01513         MOVLW   UPPER(__str_1)
00A2 6EE5      01514         MOVWF   POSTDEC1
00A4 0E00      01515         MOVLW   HIGH(__str_1)
00A6 6EE5      01516         MOVWF   POSTDEC1
00A8 0E00      01517         MOVLW   LOW(__str_1)
00AA 6EE5      01518         MOVWF   POSTDEC1
00AC 0E15      01519         MOVLW   0x15
00AE 6EE5      01520         MOVWF   POSTDEC1
00B0 EC00 F000 01521         CALL    _DisplayString
00B4 0E04      01522         MOVLW   0x04
00B6 26E1      01523         ADDWF   FSR1L, F
               01524 ;       .line   325; timer.c    break;
00B8 D000      01525         BRA     _00191_DS_
00BA 01526 _00188_DS_:
               01527 ;       .line   327; timer.c    DisplayString(0, "Enter the awake ");
00BA 0E00      01528         MOVLW   UPPER(__str_2)
00BC 6EE5      01529         MOVWF   POSTDEC1
00BE 0E00      01530         MOVLW   HIGH(__str_2)
00C0 6EE5      01531         MOVWF   POSTDEC1
00C2 0E00      01532         MOVLW   LOW(__str_2)
00C4 6EE5      01533         MOVWF   POSTDEC1
00C6 0E00      01534         MOVLW   0x00
00C8 6EE5      01535         MOVWF   POSTDEC1
00CA EC00 F000 01536         CALL    _DisplayString
00CE 0E04      01537         MOVLW   0x04
00D0 26E1      01538         ADDWF   FSR1L, F
               01539 ;       .line   328; timer.c    DisplayString(16, "time: ");
00D2 0E00      01540         MOVLW   UPPER(__str_3)
00D4 6EE5      01541         MOVWF   POSTDEC1
00D6 0E00      01542         MOVLW   HIGH(__str_3)
00D8 6EE5      01543         MOVWF   POSTDEC1
00DA 0E00      01544         MOVLW   LOW(__str_3)
00DC 6EE5      01545         MOVWF   POSTDEC1
00DE 0E10      01546         MOVLW   0x10
00E0 6EE5      01547         MOVWF   POSTDEC1
00E2 EC00 F000 01548         CALL    _DisplayString
00E6 0E04      01549         MOVLW   0x04
00E8 26E1      01550         ADDWF   FSR1L, F
               01551 ;       .line   329; timer.c    DisplayString(22, &time_value[0]);
00EA 0E00      01552         MOVLW   HIGH(_time_value)
00EC 6E00      01553         MOVWF   r0x01
00EE 0E00      01554         MOVLW   LOW(_time_value)
00F0 6E00      01555         MOVWF   r0x00
00F2 0E80      01556         MOVLW   0x80
00F4 6E00      01557         MOVWF   r0x02
00F6 5000      01558         MOVF    r0x02, W
00F8 6EE5      01559         MOVWF   POSTDEC1
00FA 5000      01560         MOVF    r0x01, W
00FC 6EE5      01561         MOVWF   POSTDEC1
00FE 5000      01562         MOVF    r0x00, W
0100 6EE5      01563         MOVWF   POSTDEC1
0102 0E16      01564         MOVLW   0x16
0104 6EE5      01565         MOVWF   POSTDEC1
0106 EC00 F000 01566         CALL    _DisplayString
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
010A 0E04      01567         MOVLW   0x04
010C 26E1      01568         ADDWF   FSR1L, F
               01569 ;       .line   330; timer.c    break;
010E D000      01570         BRA     _00191_DS_
0110 01571 _00189_DS_:
               01572 ;       .line   332; timer.c    DisplayString(0, "                ");
0110 0E00      01573         MOVLW   UPPER(__str_4)
0112 6EE5      01574         MOVWF   POSTDEC1
0114 0E00      01575         MOVLW   HIGH(__str_4)
0116 6EE5      01576         MOVWF   POSTDEC1
0118 0E00      01577         MOVLW   LOW(__str_4)
011A 6EE5      01578         MOVWF   POSTDEC1
011C 0E00      01579         MOVLW   0x00
011E 6EE5      01580         MOVWF   POSTDEC1
0120 EC00 F000 01581         CALL    _DisplayString
0124 0E04      01582         MOVLW   0x04
0126 26E1      01583         ADDWF   FSR1L, F
               01584 ;       .line   333; timer.c    DisplayString(16 + 6, "         ");
0128 0E00      01585         MOVLW   UPPER(__str_5)
012A 6EE5      01586         MOVWF   POSTDEC1
012C 0E00      01587         MOVLW   HIGH(__str_5)
012E 6EE5      01588         MOVWF   POSTDEC1
0130 0E00      01589         MOVLW   LOW(__str_5)
0132 6EE5      01590         MOVWF   POSTDEC1
0134 0E16      01591         MOVLW   0x16
0136 6EE5      01592         MOVWF   POSTDEC1
0138 EC00 F000 01593         CALL    _DisplayString
013C 0E04      01594         MOVLW   0x04
013E 26E1      01595         ADDWF   FSR1L, F
               01596 ;       .line   334; timer.c    DisplayString(16, &time_value[0]);
0140 0E00      01597         MOVLW   HIGH(_time_value)
0142 6E00      01598         MOVWF   r0x01
0144 0E00      01599         MOVLW   LOW(_time_value)
0146 6E00      01600         MOVWF   r0x00
0148 0E80      01601         MOVLW   0x80
014A 6E00      01602         MOVWF   r0x02
014C 5000      01603         MOVF    r0x02, W
014E 6EE5      01604         MOVWF   POSTDEC1
0150 5000      01605         MOVF    r0x01, W
0152 6EE5      01606         MOVWF   POSTDEC1
0154 5000      01607         MOVF    r0x00, W
0156 6EE5      01608         MOVWF   POSTDEC1
0158 0E10      01609         MOVLW   0x10
015A 6EE5      01610         MOVWF   POSTDEC1
015C EC00 F000 01611         CALL    _DisplayString
0160 0E04      01612         MOVLW   0x04
0162 26E1      01613         ADDWF   FSR1L, F
0164 01614 _00191_DS_:
               01615 ;       .line   336; timer.c    }
0164 CFE4 F000 01616         MOVFF   PREINC1, r0x02
0168 CFE4 F000 01617         MOVFF   PREINC1, r0x01
016C CFE4 F000 01618         MOVFF   PREINC1, r0x00
0170 CFE4 FFD9 01619         MOVFF   PREINC1, FSR2L
0174 0012      01620         RETURN  
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01621 
               01622 ; ; Starting pCode block
               01623 S_timer__AssignDefaultValues    code
0000 01624 _AssignDefaultValues:
               01625 ;       .line   286; timer.c    void AssignDefaultValues() {
0000 CFD9 FFE5 01626         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01627         MOVFF   FSR1L, FSR2L
0008 0000      01628         BANKSEL _ints
               01629 ;       .line   288; timer.c    ints.button1 = 0;
000A 6B00      01630         CLRF    _ints, B
000C 0000      01631         BANKSEL (_ints + 1)
000E 6B00      01632         CLRF    (_ints + 1), B
0010 0000      01633         BANKSEL (_ints + 2)
               01634 ;       .line   289; timer.c    ints.button2 = 0;
0012 6B00      01635         CLRF    (_ints + 2), B
0014 0000      01636         BANKSEL (_ints + 3)
0016 6B00      01637         CLRF    (_ints + 3), B
               01638 ;       .line   291; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0018 0E30      01639         MOVLW   0x30
001A 0000      01640         BANKSEL (_time_value + 4)
001C 6F00      01641         MOVWF   (_time_value + 4), B
001E 0E30      01642         MOVLW   0x30
0020 0000      01643         BANKSEL (_time_value + 3)
0022 6F00      01644         MOVWF   (_time_value + 3), B
0024 0E30      01645         MOVLW   0x30
0026 0000      01646         BANKSEL (_time_value + 1)
0028 6F00      01647         MOVWF   (_time_value + 1), B
002A 0E30      01648         MOVLW   0x30
002C 0000      01649         BANKSEL _time_value
002E 6F00      01650         MOVWF   _time_value, B
               01651 ;       .line   292; timer.c    time_value[2] = ':';
0030 0E3A      01652         MOVLW   0x3a
0032 0000      01653         BANKSEL (_time_value + 2)
0034 6F00      01654         MOVWF   (_time_value + 2), B
0036 0000      01655         BANKSEL (_time_value + 5)
               01656 ;       .line   293; timer.c    time_value[5] = '\0';
0038 6B00      01657         CLRF    (_time_value + 5), B
003A 0000      01658         BANKSEL _in_setting
               01659 ;       .line   294; timer.c    in_setting = HOURS; // start from setting the hours
003C 6B00      01660         CLRF    _in_setting, B
               01661 ;       .line   296; timer.c    flags.time_setting_procedure = 1;
003E 0E01      01662         MOVLW   0x01
0040 0000      01663         BANKSEL _flags
0042 6F00      01664         MOVWF   _flags, B
0044 0000      01665         BANKSEL (_flags + 1)
0046 6B00      01666         CLRF    (_flags + 1), B
0048 0000      01667         BANKSEL (_flags + 2)
               01668 ;       .line   297; timer.c    flags.awake_setting_procedure = 0;
004A 6B00      01669         CLRF    (_flags + 2), B
004C 0000      01670         BANKSEL (_flags + 3)
004E 6B00      01671         CLRF    (_flags + 3), B
0050 0000      01672         BANKSEL (_flags + 4)
               01673 ;       .line   298; timer.c    flags.set = 0;
0052 6B00      01674         CLRF    (_flags + 4), B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0054 0000      01675         BANKSEL (_flags + 5)
0056 6B00      01676         CLRF    (_flags + 5), B
0058 0000      01677         BANKSEL (_flags + 6)
               01678 ;       .line   299; timer.c    flags.half_sec = 0;
005A 6B00      01679         CLRF    (_flags + 6), B
005C 0000      01680         BANKSEL (_flags + 7)
005E 6B00      01681         CLRF    (_flags + 7), B
0060 0000      01682         BANKSEL (_flags + 8)
               01683 ;       .line   300; timer.c    flags.one_sec = 0;
0062 6B00      01684         CLRF    (_flags + 8), B
0064 0000      01685         BANKSEL (_flags + 9)
0066 6B00      01686         CLRF    (_flags + 9), B
0068 0000      01687         BANKSEL (_flags + 10)
               01688 ;       .line   301; timer.c    flags.alarm = 0;
006A 6B00      01689         CLRF    (_flags + 10), B
006C 0000      01690         BANKSEL (_flags + 11)
006E 6B00      01691         CLRF    (_flags + 11), B
0070 0000      01692         BANKSEL _timer
               01693 ;       .line   303; timer.c    timer.hours = 0;
0072 6B00      01694         CLRF    _timer, B
0074 0000      01695         BANKSEL (_timer + 1)
0076 6B00      01696         CLRF    (_timer + 1), B
0078 0000      01697         BANKSEL (_timer + 2)
               01698 ;       .line   304; timer.c    timer.minutes = 0;
007A 6B00      01699         CLRF    (_timer + 2), B
007C 0000      01700         BANKSEL (_timer + 3)
007E 6B00      01701         CLRF    (_timer + 3), B
0080 0000      01702         BANKSEL _setting
               01703 ;       .line   306; timer.c    setting.hours = 0;
0082 6B00      01704         CLRF    _setting, B
0084 0000      01705         BANKSEL (_setting + 1)
0086 6B00      01706         CLRF    (_setting + 1), B
0088 0000      01707         BANKSEL (_setting + 2)
               01708 ;       .line   307; timer.c    setting.minutes = 0;
008A 6B00      01709         CLRF    (_setting + 2), B
008C 0000      01710         BANKSEL (_setting + 3)
008E 6B00      01711         CLRF    (_setting + 3), B
               01712 ;       .line   309; timer.c    UpdateDisplay(CLOCK_SETTING);
0090 0E00      01713         MOVLW   0x00
0092 6EE5      01714         MOVWF   POSTDEC1
0094 EC00 F000 01715         CALL    _UpdateDisplay
0098 2AE1      01716         INCF    FSR1L, F
009A CFE4 FFD9 01717         MOVFF   PREINC1, FSR2L
009E 0012      01718         RETURN  
               01719 
               01720 ; ; Starting pCode block
               01721 S_timer__ConfigureRegisters     code
0000 01722 _ConfigureRegisters:
               01723 ;       .line   244; timer.c    void ConfigureRegisters() {
0000 CFD9 FFE5 01724         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01725         MOVFF   FSR1L, FSR2L
               01726 ;       .line   246; timer.c    INTCONbits.GIE      =   1;   //enable high priority interrupts
0008 8E00      01727         BSF     _INTCONbits, 7
               01728 ;       .line   247; timer.c    RCONbits.IPEN       =   1;   //enable interrupts priority levels
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
000A 8E00      01729         BSF     _RCONbits, 7
               01730 ;       .line   253; timer.c    T1CONbits.TMR1ON    =   0;    // disable timer1
000C 9000      01731         BCF     _T1CONbits, 0
               01732 ;       .line   254; timer.c    T1CONbits.RD16      =   1;    // use timer1 16-bit counter
000E 8E00      01733         BSF     _T1CONbits, 7
               01734 ;       .line   255; timer.c    T1CONbits.T1CKPS0   =   0;    // prescaler set to 1:1
0010 9800      01735         BCF     _T1CONbits, 4
               01736 ;       .line   256; timer.c    T1CONbits.T1CKPS1   =   0;
0012 9A00      01737         BCF     _T1CONbits, 5
               01738 ;       .line   257; timer.c    T1CONbits.T1OSCEN   =   1;    // timer1 oscillator enable
0014 8600      01739         BSF     _T1CONbits, 3
               01740 ;       .line   258; timer.c    T1CONbits.TMR1CS    =   1;    // external clock selected
0016 8200      01741         BSF     _T1CONbits, 1
               01742 ;       .line   259; timer.c    PIR1bits.TMR1IF     =   0;    // clear timer1 overflow bit
0018 9000      01743         BCF     _PIR1bits, 0
               01744 ;       .line   260; timer.c    PIE1bits.TMR1IE     =   1;    // timer1 interrupt enable
001A 8000      01745         BSF     _PIE1bits, 0
               01746 ;       .line   261; timer.c    IPR1bits.TMR1IP     =   1;    // high priority interrupt
001C 8000      01747         BSF     _IPR1bits, 0
               01748 ;       .line   262; timer.c    TMR1L               =   (0x10000 - EXTCLOCK_FREQ/2) & 0xff;    // timer1 initial value
001E 6A00      01749         CLRF    _TMR1L
               01750 ;       .line   263; timer.c    TMR1H               =   (0x10000 - EXTCLOCK_FREQ/2) >> 8;
0020 0EC0      01751         MOVLW   0xc0
0022 6E00      01752         MOVWF   _TMR1H
               01753 ;       .line   266; timer.c    INTCON3bits.INT1P   =   1;    //connect INT1 interrupt (button 2) to high prio
0024 8C00      01754         BSF     _INTCON3bits, 6
               01755 ;       .line   267; timer.c    INTCON2bits.INT3IP  =   1;    //connect INT3 interrupt (button 1) to high prio
0026 8200      01756         BSF     _INTCON2bits, 1
               01757 ;       .line   268; timer.c    INTCON2bits.INTEDG1 =   0;    //INT1 interrupts on falling edge
0028 9A00      01758         BCF     _INTCON2bits, 5
               01759 ;       .line   269; timer.c    INTCON2bits.INTEDG3 =   0;    //INT3 interrupts on falling edge
002A 9600      01760         BCF     _INTCON2bits, 3
               01761 ;       .line   270; timer.c    INTCON3bits.INT1F   =   0;    //clear INT1 flag
002C 9000      01762         BCF     _INTCON3bits, 0
               01763 ;       .line   271; timer.c    INTCON3bits.INT3F   =   0;    //clear INT3 flag
002E 9400      01764         BCF     _INTCON3bits, 2
               01765 ;       .line   272; timer.c    INTCON3bits.INT1E   =   1;    //enable INT1 interrupt (button 2)
0030 8600      01766         BSF     _INTCON3bits, 3
               01767 ;       .line   273; timer.c    INTCON3bits.INT3E   =   1;    //enable INT1 interrupt (button 1)
0032 8A00      01768         BSF     _INTCON3bits, 5
               01769 ;       .line   276; timer.c    TRISJbits.TRISJ0    =   0;    // configure PORTJ0 for output (led0)
0034 9000      01770         BCF     _TRISJbits, 0
               01771 ;       .line   277; timer.c    TRISJbits.TRISJ1    =   0;    // configure PORTJ1 for output (led1)
0036 9200      01772         BCF     _TRISJbits, 1
               01773 ;       .line   278; timer.c    LATJbits.LATJ0      =   1;    // led0 output high
0038 8000      01774         BSF     _LATJbits, 0
               01775 ;       .line   279; timer.c    LATJbits.LATJ1      =   0;    // led1 output low
003A 9200      01776         BCF     _LATJbits, 1
003C CFE4 FFD9 01777         MOVFF   PREINC1, FSR2L
0040 0012      01778         RETURN  
               01779 
               01780 ; ; Starting pCode block
               01781 S_timer__HandleButton2Pressure  code
0000 01782 _HandleButton2Pressure:
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01783 ;       .line   223; timer.c    void HandleButton2Pressure() {
0000 CFD9 FFE5 01784         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01785         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01786         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01787         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01788         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01789         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01790         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01791         MOVFF   r0x05, POSTDEC1
0020 0000      01792         BANKSEL _flags
               01793 ;       .line   224; timer.c    if (flags.time_setting_procedure) { // setting the clock's time
0022 5100      01794         MOVF    _flags, W, B
0024 0000      01795         BANKSEL (_flags + 1)
0026 1100      01796         IORWF   (_flags + 1), W, B
0028 E000      01797         BZ      _00170_DS_
               01798 ;       .line   226; timer.c    UpdateProperTimeValue(&setting.hours, &setting.minutes); 
002A 0E00      01799         MOVLW   HIGH(_setting)
002C 6E00      01800         MOVWF   r0x01
002E 0E00      01801         MOVLW   LOW(_setting)
0030 6E00      01802         MOVWF   r0x00
0032 0E80      01803         MOVLW   0x80
0034 6E00      01804         MOVWF   r0x02
0036 0E00      01805         MOVLW   HIGH(_setting + 2)
0038 6E00      01806         MOVWF   r0x04
003A 0E00      01807         MOVLW   LOW(_setting + 2)
003C 6E00      01808         MOVWF   r0x03
003E 0E80      01809         MOVLW   0x80
0040 6E00      01810         MOVWF   r0x05
0042 5000      01811         MOVF    r0x05, W
0044 6EE5      01812         MOVWF   POSTDEC1
0046 5000      01813         MOVF    r0x04, W
0048 6EE5      01814         MOVWF   POSTDEC1
004A 5000      01815         MOVF    r0x03, W
004C 6EE5      01816         MOVWF   POSTDEC1
004E 5000      01817         MOVF    r0x02, W
0050 6EE5      01818         MOVWF   POSTDEC1
0052 5000      01819         MOVF    r0x01, W
0054 6EE5      01820         MOVWF   POSTDEC1
0056 5000      01821         MOVF    r0x00, W
0058 6EE5      01822         MOVWF   POSTDEC1
005A EC00 F000 01823         CALL    _UpdateProperTimeValue
005E 0E06      01824         MOVLW   0x06
0060 26E1      01825         ADDWF   FSR1L, F
0062 D000      01826         BRA     _00172_DS_
0064 01827 _00170_DS_:
0064 0000      01828         BANKSEL (_flags + 2)
               01829 ;       .line   227; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0066 5100      01830         MOVF    (_flags + 2), W, B
0068 0000      01831         BANKSEL (_flags + 3)
006A 1100      01832         IORWF   (_flags + 3), W, B
006C E000      01833         BZ      _00167_DS_
               01834 ;       .line   229; timer.c    UpdateProperTimeValue(&timer.hours, &timer.minutes);
006E 0E00      01835         MOVLW   HIGH(_timer)
0070 6E00      01836         MOVWF   r0x01
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0072 0E00      01837         MOVLW   LOW(_timer)
0074 6E00      01838         MOVWF   r0x00
0076 0E80      01839         MOVLW   0x80
0078 6E00      01840         MOVWF   r0x02
007A 0E00      01841         MOVLW   HIGH(_timer + 2)
007C 6E00      01842         MOVWF   r0x04
007E 0E00      01843         MOVLW   LOW(_timer + 2)
0080 6E00      01844         MOVWF   r0x03
0082 0E80      01845         MOVLW   0x80
0084 6E00      01846         MOVWF   r0x05
0086 5000      01847         MOVF    r0x05, W
0088 6EE5      01848         MOVWF   POSTDEC1
008A 5000      01849         MOVF    r0x04, W
008C 6EE5      01850         MOVWF   POSTDEC1
008E 5000      01851         MOVF    r0x03, W
0090 6EE5      01852         MOVWF   POSTDEC1
0092 5000      01853         MOVF    r0x02, W
0094 6EE5      01854         MOVWF   POSTDEC1
0096 5000      01855         MOVF    r0x01, W
0098 6EE5      01856         MOVWF   POSTDEC1
009A 5000      01857         MOVF    r0x00, W
009C 6EE5      01858         MOVWF   POSTDEC1
009E EC00 F000 01859         CALL    _UpdateProperTimeValue
00A2 0E06      01860         MOVLW   0x06
00A4 26E1      01861         ADDWF   FSR1L, F
00A6 D000      01862         BRA     _00172_DS_
00A8 01863 _00167_DS_:
00A8 0000      01864         BANKSEL (_flags + 4)
               01865 ;       .line   230; timer.c    } else if (flags.set) {
00AA 5100      01866         MOVF    (_flags + 4), W, B
00AC 0000      01867         BANKSEL (_flags + 5)
00AE 1100      01868         IORWF   (_flags + 5), W, B
00B0 E000      01869         BZ      _00172_DS_
               01870 ;       .line   231; timer.c    flags.awake_setting_procedure = 1;
00B2 0E01      01871         MOVLW   0x01
00B4 0000      01872         BANKSEL (_flags + 2)
00B6 6F00      01873         MOVWF   (_flags + 2), B
00B8 0000      01874         BANKSEL (_flags + 3)
00BA 6B00      01875         CLRF    (_flags + 3), B
               01876 ;       .line   232; timer.c    Int2String(timer.hours, 0);
00BC 0E00      01877         MOVLW   0x00
00BE 6EE5      01878         MOVWF   POSTDEC1
00C0 0E00      01879         MOVLW   0x00
00C2 6EE5      01880         MOVWF   POSTDEC1
00C4 0000      01881         BANKSEL (_timer + 1)
00C6 5100      01882         MOVF    (_timer + 1), W, B
00C8 6EE5      01883         MOVWF   POSTDEC1
00CA 0000      01884         BANKSEL _timer
00CC 5100      01885         MOVF    _timer, W, B
00CE 6EE5      01886         MOVWF   POSTDEC1
00D0 EC00 F000 01887         CALL    _Int2String
00D4 0E04      01888         MOVLW   0x04
00D6 26E1      01889         ADDWF   FSR1L, F
               01890 ;       .line   233; timer.c    time_value[2] = ':';
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D8 0E3A      01891         MOVLW   0x3a
00DA 0000      01892         BANKSEL (_time_value + 2)
00DC 6F00      01893         MOVWF   (_time_value + 2), B
               01894 ;       .line   234; timer.c    Int2String(timer.minutes, 3);
00DE 0E00      01895         MOVLW   0x00
00E0 6EE5      01896         MOVWF   POSTDEC1
00E2 0E03      01897         MOVLW   0x03
00E4 6EE5      01898         MOVWF   POSTDEC1
00E6 0000      01899         BANKSEL (_timer + 3)
00E8 5100      01900         MOVF    (_timer + 3), W, B
00EA 6EE5      01901         MOVWF   POSTDEC1
00EC 0000      01902         BANKSEL (_timer + 2)
00EE 5100      01903         MOVF    (_timer + 2), W, B
00F0 6EE5      01904         MOVWF   POSTDEC1
00F2 EC00 F000 01905         CALL    _Int2String
00F6 0E04      01906         MOVLW   0x04
00F8 26E1      01907         ADDWF   FSR1L, F
00FA 0000      01908         BANKSEL _in_setting
               01909 ;       .line   235; timer.c    in_setting = HOURS;
00FC 6B00      01910         CLRF    _in_setting, B
               01911 ;       .line   236; timer.c    UpdateDisplay(TIMER_SETTING);
00FE 0E01      01912         MOVLW   0x01
0100 6EE5      01913         MOVWF   POSTDEC1
0102 EC00 F000 01914         CALL    _UpdateDisplay
0106 2AE1      01915         INCF    FSR1L, F
0108 01916 _00172_DS_:
0108 CFE4 F000 01917         MOVFF   PREINC1, r0x05
010C CFE4 F000 01918         MOVFF   PREINC1, r0x04
0110 CFE4 F000 01919         MOVFF   PREINC1, r0x03
0114 CFE4 F000 01920         MOVFF   PREINC1, r0x02
0118 CFE4 F000 01921         MOVFF   PREINC1, r0x01
011C CFE4 F000 01922         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 01923         MOVFF   PREINC1, FSR2L
0124 0012      01924         RETURN  
               01925 
               01926 ; ; Starting pCode block
               01927 S_timer__UpdateProperTimeValue  code
0000 01928 _UpdateProperTimeValue:
               01929 ;       .line   208; timer.c    void UpdateProperTimeValue(int* const hours, int* const minutes) {
0000 CFD9 FFE5 01930         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01931         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01932         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01933         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01934         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01935         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01936         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01937         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01938         MOVFF   r0x06, POSTDEC1
0024 0E02      01939         MOVLW   0x02
0026 CFDB F000 01940         MOVFF   PLUSW2, r0x00
002A 0E03      01941         MOVLW   0x03
002C CFDB F000 01942         MOVFF   PLUSW2, r0x01
0030 0E04      01943         MOVLW   0x04
0032 CFDB F000 01944         MOVFF   PLUSW2, r0x02
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0036 0E05      01945         MOVLW   0x05
0038 CFDB F000 01946         MOVFF   PLUSW2, r0x03
003C 0E06      01947         MOVLW   0x06
003E CFDB F000 01948         MOVFF   PLUSW2, r0x04
0042 0E07      01949         MOVLW   0x07
0044 CFDB F000 01950         MOVFF   PLUSW2, r0x05
0048 0000      01951         BANKSEL _in_setting
               01952 ;       .line   209; timer.c    if (in_setting == HOURS) {
004A 5100      01953         MOVF    _in_setting, W, B
004C E100      01954         BNZ     _00157_DS_
               01955 ;       .line   210; timer.c    UpdateTimeValue(hours, MAX_HOURS, 0);
004E 0E00      01956         MOVLW   0x00
0050 6EE5      01957         MOVWF   POSTDEC1
0052 0E00      01958         MOVLW   0x00
0054 6EE5      01959         MOVWF   POSTDEC1
0056 0E00      01960         MOVLW   0x00
0058 6EE5      01961         MOVWF   POSTDEC1
005A 0E17      01962         MOVLW   0x17
005C 6EE5      01963         MOVWF   POSTDEC1
005E 5000      01964         MOVF    r0x02, W
0060 6EE5      01965         MOVWF   POSTDEC1
0062 5000      01966         MOVF    r0x01, W
0064 6EE5      01967         MOVWF   POSTDEC1
0066 5000      01968         MOVF    r0x00, W
0068 6EE5      01969         MOVWF   POSTDEC1
006A EC00 F000 01970         CALL    _UpdateTimeValue
006E 0E07      01971         MOVLW   0x07
0070 26E1      01972         ADDWF   FSR1L, F
0072 0000      01973         BANKSEL (_flags + 2)
               01974 ;       .line   211; timer.c    DisplayString(16 + 6 * flags.awake_setting_procedure, &time_value[0]);
0074 5100      01975         MOVF    (_flags + 2), W, B
0076 6E00      01976         MOVWF   r0x00
               01977 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               01978 ; ;Unrolled 8 X 8 multiplication
               01979 ; ;FIXME: the function does not support result==WREG
0078 5000      01980         MOVF    r0x00, W
007A 0D06      01981         MULLW   0x06
007C CFF3 F000 01982         MOVFF   PRODL, r0x00
0080 0E10      01983         MOVLW   0x10
0082 2600      01984         ADDWF   r0x00, F
0084 0E00      01985         MOVLW   HIGH(_time_value)
0086 6E00      01986         MOVWF   r0x02
0088 0E00      01987         MOVLW   LOW(_time_value)
008A 6E00      01988         MOVWF   r0x01
008C 0E80      01989         MOVLW   0x80
008E 6E00      01990         MOVWF   r0x06
0090 5000      01991         MOVF    r0x06, W
0092 6EE5      01992         MOVWF   POSTDEC1
0094 5000      01993         MOVF    r0x02, W
0096 6EE5      01994         MOVWF   POSTDEC1
0098 5000      01995         MOVF    r0x01, W
009A 6EE5      01996         MOVWF   POSTDEC1
009C 5000      01997         MOVF    r0x00, W
009E 6EE5      01998         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00A0 EC00 F000 01999         CALL    _DisplayString
00A4 0E04      02000         MOVLW   0x04
00A6 26E1      02001         ADDWF   FSR1L, F
00A8 D000      02002         BRA     _00159_DS_
00AA 02003 _00157_DS_:
               02004 ;       .line   213; timer.c    UpdateTimeValue(minutes, MAX_MINUTES, 3);
00AA 0E00      02005         MOVLW   0x00
00AC 6EE5      02006         MOVWF   POSTDEC1
00AE 0E03      02007         MOVLW   0x03
00B0 6EE5      02008         MOVWF   POSTDEC1
00B2 0E00      02009         MOVLW   0x00
00B4 6EE5      02010         MOVWF   POSTDEC1
00B6 0E3B      02011         MOVLW   0x3b
00B8 6EE5      02012         MOVWF   POSTDEC1
00BA 5000      02013         MOVF    r0x05, W
00BC 6EE5      02014         MOVWF   POSTDEC1
00BE 5000      02015         MOVF    r0x04, W
00C0 6EE5      02016         MOVWF   POSTDEC1
00C2 5000      02017         MOVF    r0x03, W
00C4 6EE5      02018         MOVWF   POSTDEC1
00C6 EC00 F000 02019         CALL    _UpdateTimeValue
00CA 0E07      02020         MOVLW   0x07
00CC 26E1      02021         ADDWF   FSR1L, F
00CE 0000      02022         BANKSEL (_flags + 2)
               02023 ;       .line   214; timer.c    DisplayString(19 + 6 * flags.awake_setting_procedure, &time_value[3]);
00D0 5100      02024         MOVF    (_flags + 2), W, B
00D2 6E00      02025         MOVWF   r0x00
               02026 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               02027 ; ;Unrolled 8 X 8 multiplication
               02028 ; ;FIXME: the function does not support result==WREG
00D4 5000      02029         MOVF    r0x00, W
00D6 0D06      02030         MULLW   0x06
00D8 CFF3 F000 02031         MOVFF   PRODL, r0x00
00DC 0E13      02032         MOVLW   0x13
00DE 2600      02033         ADDWF   r0x00, F
00E0 0E00      02034         MOVLW   HIGH(_time_value + 3)
00E2 6E00      02035         MOVWF   r0x02
00E4 0E00      02036         MOVLW   LOW(_time_value + 3)
00E6 6E00      02037         MOVWF   r0x01
00E8 0E80      02038         MOVLW   0x80
00EA 6E00      02039         MOVWF   r0x03
00EC 5000      02040         MOVF    r0x03, W
00EE 6EE5      02041         MOVWF   POSTDEC1
00F0 5000      02042         MOVF    r0x02, W
00F2 6EE5      02043         MOVWF   POSTDEC1
00F4 5000      02044         MOVF    r0x01, W
00F6 6EE5      02045         MOVWF   POSTDEC1
00F8 5000      02046         MOVF    r0x00, W
00FA 6EE5      02047         MOVWF   POSTDEC1
00FC EC00 F000 02048         CALL    _DisplayString
0100 0E04      02049         MOVLW   0x04
0102 26E1      02050         ADDWF   FSR1L, F
0104 02051 _00159_DS_:
0104 CFE4 F000 02052         MOVFF   PREINC1, r0x06
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0108 CFE4 F000 02053         MOVFF   PREINC1, r0x05
010C CFE4 F000 02054         MOVFF   PREINC1, r0x04
0110 CFE4 F000 02055         MOVFF   PREINC1, r0x03
0114 CFE4 F000 02056         MOVFF   PREINC1, r0x02
0118 CFE4 F000 02057         MOVFF   PREINC1, r0x01
011C CFE4 F000 02058         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 02059         MOVFF   PREINC1, FSR2L
0124 0012      02060         RETURN  
               02061 
               02062 ; ; Starting pCode block
               02063 S_timer__HandleButton1Pressure  code
0000 02064 _HandleButton1Pressure:
               02065 ;       .line   152; timer.c    void HandleButton1Pressure() {
0000 CFD9 FFE5 02066         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02067         MOVFF   FSR1L, FSR2L
0008 0000      02068         BANKSEL _flags
               02069 ;       .line   153; timer.c    if (flags.time_setting_procedure) { // setting clock's time
000A 5100      02070         MOVF    _flags, W, B
000C 0000      02071         BANKSEL (_flags + 1)
000E 1100      02072         IORWF   (_flags + 1), W, B
0010 B4D8      02073         BTFSC   STATUS, 2
0012 D000      02074         BRA     _00149_DS_
0014 0000      02075         BANKSEL _in_setting
               02076 ;       .line   154; timer.c    if (in_setting == HOURS) {
0016 5100      02077         MOVF    _in_setting, W, B
0018 E100      02078         BNZ     _00138_DS_
               02079 ;       .line   155; timer.c    CompleteHoursSetting(); // start minutes setting
001A EC00 F000 02080         CALL    _CompleteHoursSetting
001E D000      02081         BRA     _00151_DS_
0020 02082 _00138_DS_:
0020 0000      02083         BANKSEL _setting
               02084 ;       .line   158; timer.c    clock.hours = setting.hours;
0022 5100      02085         MOVF    _setting, W, B
0024 0000      02086         BANKSEL _clock
0026 6F00      02087         MOVWF   _clock, B
0028 0000      02088         BANKSEL (_setting + 1)
002A 5100      02089         MOVF    (_setting + 1), W, B
002C 0000      02090         BANKSEL (_clock + 1)
002E 6F00      02091         MOVWF   (_clock + 1), B
0030 0000      02092         BANKSEL (_setting + 2)
               02093 ;       .line   159; timer.c    clock.minutes = setting.minutes;
0032 5100      02094         MOVF    (_setting + 2), W, B
0034 0000      02095         BANKSEL (_clock + 2)
0036 6F00      02096         MOVWF   (_clock + 2), B
0038 0000      02097         BANKSEL (_setting + 3)
003A 5100      02098         MOVF    (_setting + 3), W, B
003C 0000      02099         BANKSEL (_clock + 3)
003E 6F00      02100         MOVWF   (_clock + 3), B
0040 0000      02101         BANKSEL (_clock + 4)
               02102 ;       .line   160; timer.c    clock.seconds = 0;
0042 6B00      02103         CLRF    (_clock + 4), B
0044 0000      02104         BANKSEL (_clock + 5)
0046 6B00      02105         CLRF    (_clock + 5), B
0048 0000      02106         BANKSEL _flags
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02107 ;       .line   161; timer.c    flags.time_setting_procedure = 0; // end the time setting
004A 6B00      02108         CLRF    _flags, B
004C 0000      02109         BANKSEL (_flags + 1)
004E 6B00      02110         CLRF    (_flags + 1), B
0050 0000      02111         BANKSEL (_flags + 4)
               02112 ;       .line   163; timer.c    if (!flags.set) {
0052 5100      02113         MOVF    (_flags + 4), W, B
0054 0000      02114         BANKSEL (_flags + 5)
0056 1100      02115         IORWF   (_flags + 5), W, B
0058 E100      02116         BNZ     _00135_DS_
               02117 ;       .line   164; timer.c    flags.awake_setting_procedure = 1; // start the second procedure
005A 0E01      02118         MOVLW   0x01
005C 0000      02119         BANKSEL (_flags + 2)
005E 6F00      02120         MOVWF   (_flags + 2), B
0060 0000      02121         BANKSEL (_flags + 3)
0062 6B00      02122         CLRF    (_flags + 3), B
               02123 ;       .line   166; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0064 0E30      02124         MOVLW   0x30
0066 0000      02125         BANKSEL (_time_value + 4)
0068 6F00      02126         MOVWF   (_time_value + 4), B
006A 0E30      02127         MOVLW   0x30
006C 0000      02128         BANKSEL (_time_value + 3)
006E 6F00      02129         MOVWF   (_time_value + 3), B
0070 0E30      02130         MOVLW   0x30
0072 0000      02131         BANKSEL (_time_value + 1)
0074 6F00      02132         MOVWF   (_time_value + 1), B
0076 0E30      02133         MOVLW   0x30
0078 0000      02134         BANKSEL _time_value
007A 6F00      02135         MOVWF   _time_value, B
               02136 ;       .line   167; timer.c    UpdateDisplay(TIMER_SETTING);
007C 0E01      02137         MOVLW   0x01
007E 6EE5      02138         MOVWF   POSTDEC1
0080 EC00 F000 02139         CALL    _UpdateDisplay
0084 2AE1      02140         INCF    FSR1L, F
0086 0000      02141         BANKSEL _in_setting
               02142 ;       .line   168; timer.c    in_setting = HOURS; // start from setting hours
0088 6B00      02143         CLRF    _in_setting, B
008A D000      02144         BRA     _00151_DS_
008C 02145 _00135_DS_:
               02146 ;       .line   170; timer.c    SetupCompleteTime();
008C EC00 F000 02147         CALL    _SetupCompleteTime
0090 D000      02148         BRA     _00151_DS_
0092 02149 _00149_DS_:
0092 0000      02150         BANKSEL (_flags + 2)
               02151 ;       .line   173; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0094 5100      02152         MOVF    (_flags + 2), W, B
0096 0000      02153         BANKSEL (_flags + 3)
0098 1100      02154         IORWF   (_flags + 3), W, B
009A E000      02155         BZ      _00146_DS_
009C 0000      02156         BANKSEL _in_setting
               02157 ;       .line   174; timer.c    if (in_setting == HOURS) {
009E 5100      02158         MOVF    _in_setting, W, B
00A0 E100      02159         BNZ     _00141_DS_
               02160 ;       .line   175; timer.c    CompleteHoursSetting();
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00A2 EC00 F000 02161         CALL    _CompleteHoursSetting
00A6 D000      02162         BRA     _00151_DS_
00A8 02163 _00141_DS_:
00A8 0000      02164         BANKSEL (_flags + 2)
               02165 ;       .line   178; timer.c    flags.awake_setting_procedure = 0; 
00AA 6B00      02166         CLRF    (_flags + 2), B
00AC 0000      02167         BANKSEL (_flags + 3)
00AE 6B00      02168         CLRF    (_flags + 3), B
               02169 ;       .line   179; timer.c    flags.set = 1; 
00B0 0E01      02170         MOVLW   0x01
00B2 0000      02171         BANKSEL (_flags + 4)
00B4 6F00      02172         MOVWF   (_flags + 4), B
00B6 0000      02173         BANKSEL (_flags + 5)
00B8 6B00      02174         CLRF    (_flags + 5), B
               02175 ;       .line   181; timer.c    SetupCompleteTime();
00BA EC00 F000 02176         CALL    _SetupCompleteTime
               02177 ;       .line   182; timer.c    T1CONbits.TMR1ON    =    1;
00BE 8000      02178         BSF     _T1CONbits, 0
00C0 D000      02179         BRA     _00151_DS_
00C2 02180 _00146_DS_:
00C2 0000      02181         BANKSEL (_flags + 4)
               02182 ;       .line   184; timer.c    } else if (flags.set) {
00C4 5100      02183         MOVF    (_flags + 4), W, B
00C6 0000      02184         BANKSEL (_flags + 5)
00C8 1100      02185         IORWF   (_flags + 5), W, B
00CA B4D8      02186         BTFSC   STATUS, 2
00CC D000      02187         BRA     _00151_DS_
00CE 0000      02188         BANKSEL _clock
               02189 ;       .line   186; timer.c    setting.hours   = clock.hours;
00D0 5100      02190         MOVF    _clock, W, B
00D2 0000      02191         BANKSEL _setting
00D4 6F00      02192         MOVWF   _setting, B
00D6 0000      02193         BANKSEL (_clock + 1)
00D8 5100      02194         MOVF    (_clock + 1), W, B
00DA 0000      02195         BANKSEL (_setting + 1)
00DC 6F00      02196         MOVWF   (_setting + 1), B
00DE 0000      02197         BANKSEL (_clock + 2)
               02198 ;       .line   187; timer.c    setting.minutes = clock.minutes;
00E0 5100      02199         MOVF    (_clock + 2), W, B
00E2 0000      02200         BANKSEL (_setting + 2)
00E4 6F00      02201         MOVWF   (_setting + 2), B
00E6 0000      02202         BANKSEL (_clock + 3)
00E8 5100      02203         MOVF    (_clock + 3), W, B
00EA 0000      02204         BANKSEL (_setting + 3)
00EC 6F00      02205         MOVWF   (_setting + 3), B
               02206 ;       .line   188; timer.c    flags.time_setting_procedure = 1; // start the time setting
00EE 0E01      02207         MOVLW   0x01
00F0 0000      02208         BANKSEL _flags
00F2 6F00      02209         MOVWF   _flags, B
00F4 0000      02210         BANKSEL (_flags + 1)
00F6 6B00      02211         CLRF    (_flags + 1), B
               02212 ;       .line   189; timer.c    Int2String(setting.hours, 0);
00F8 0E00      02213         MOVLW   0x00
00FA 6EE5      02214         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00FC 0E00      02215         MOVLW   0x00
00FE 6EE5      02216         MOVWF   POSTDEC1
0100 0000      02217         BANKSEL (_setting + 1)
0102 5100      02218         MOVF    (_setting + 1), W, B
0104 6EE5      02219         MOVWF   POSTDEC1
0106 0000      02220         BANKSEL _setting
0108 5100      02221         MOVF    _setting, W, B
010A 6EE5      02222         MOVWF   POSTDEC1
010C EC00 F000 02223         CALL    _Int2String
0110 0E04      02224         MOVLW   0x04
0112 26E1      02225         ADDWF   FSR1L, F
               02226 ;       .line   190; timer.c    time_value[2] = ':';
0114 0E3A      02227         MOVLW   0x3a
0116 0000      02228         BANKSEL (_time_value + 2)
0118 6F00      02229         MOVWF   (_time_value + 2), B
               02230 ;       .line   191; timer.c    Int2String(setting.minutes, 3);
011A 0E00      02231         MOVLW   0x00
011C 6EE5      02232         MOVWF   POSTDEC1
011E 0E03      02233         MOVLW   0x03
0120 6EE5      02234         MOVWF   POSTDEC1
0122 0000      02235         BANKSEL (_setting + 3)
0124 5100      02236         MOVF    (_setting + 3), W, B
0126 6EE5      02237         MOVWF   POSTDEC1
0128 0000      02238         BANKSEL (_setting + 2)
012A 5100      02239         MOVF    (_setting + 2), W, B
012C 6EE5      02240         MOVWF   POSTDEC1
012E EC00 F000 02241         CALL    _Int2String
0132 0E04      02242         MOVLW   0x04
0134 26E1      02243         ADDWF   FSR1L, F
               02244 ;       .line   192; timer.c    UpdateDisplay(CLOCK_SETTING);
0136 0E00      02245         MOVLW   0x00
0138 6EE5      02246         MOVWF   POSTDEC1
013A EC00 F000 02247         CALL    _UpdateDisplay
013E 2AE1      02248         INCF    FSR1L, F
0140 0000      02249         BANKSEL _in_setting
               02250 ;       .line   193; timer.c    in_setting = HOURS;
0142 6B00      02251         CLRF    _in_setting, B
0144 02252 _00151_DS_:
0144 CFE4 FFD9 02253         MOVFF   PREINC1, FSR2L
0148 0012      02254         RETURN  
               02255 
               02256 ; ; Starting pCode block
               02257 S_timer__SetupCompleteTime      code
0000 02258 _SetupCompleteTime:
               02259 ;       .line   136; timer.c    void SetupCompleteTime() {
0000 CFD9 FFE5 02260         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02261         MOVFF   FSR1L, FSR2L
               02262 ;       .line   138; timer.c    Int2String(clock.hours, 0);
0008 0E00      02263         MOVLW   0x00
000A 6EE5      02264         MOVWF   POSTDEC1
000C 0E00      02265         MOVLW   0x00
000E 6EE5      02266         MOVWF   POSTDEC1
0010 0000      02267         BANKSEL (_clock + 1)
0012 5100      02268         MOVF    (_clock + 1), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0014 6EE5      02269         MOVWF   POSTDEC1
0016 0000      02270         BANKSEL _clock
0018 5100      02271         MOVF    _clock, W, B
001A 6EE5      02272         MOVWF   POSTDEC1
001C EC00 F000 02273         CALL    _Int2String
0020 0E04      02274         MOVLW   0x04
0022 26E1      02275         ADDWF   FSR1L, F
               02276 ;       .line   139; timer.c    time_value[2] = ':';
0024 0E3A      02277         MOVLW   0x3a
0026 0000      02278         BANKSEL (_time_value + 2)
0028 6F00      02279         MOVWF   (_time_value + 2), B
               02280 ;       .line   140; timer.c    Int2String(clock.minutes, 3);
002A 0E00      02281         MOVLW   0x00
002C 6EE5      02282         MOVWF   POSTDEC1
002E 0E03      02283         MOVLW   0x03
0030 6EE5      02284         MOVWF   POSTDEC1
0032 0000      02285         BANKSEL (_clock + 3)
0034 5100      02286         MOVF    (_clock + 3), W, B
0036 6EE5      02287         MOVWF   POSTDEC1
0038 0000      02288         BANKSEL (_clock + 2)
003A 5100      02289         MOVF    (_clock + 2), W, B
003C 6EE5      02290         MOVWF   POSTDEC1
003E EC00 F000 02291         CALL    _Int2String
0042 0E04      02292         MOVLW   0x04
0044 26E1      02293         ADDWF   FSR1L, F
               02294 ;       .line   141; timer.c    time_value[5] = ':';
0046 0E3A      02295         MOVLW   0x3a
0048 0000      02296         BANKSEL (_time_value + 5)
004A 6F00      02297         MOVWF   (_time_value + 5), B
               02298 ;       .line   142; timer.c    Int2String(clock.seconds, 6);
004C 0E00      02299         MOVLW   0x00
004E 6EE5      02300         MOVWF   POSTDEC1
0050 0E06      02301         MOVLW   0x06
0052 6EE5      02302         MOVWF   POSTDEC1
0054 0000      02303         BANKSEL (_clock + 5)
0056 5100      02304         MOVF    (_clock + 5), W, B
0058 6EE5      02305         MOVWF   POSTDEC1
005A 0000      02306         BANKSEL (_clock + 4)
005C 5100      02307         MOVF    (_clock + 4), W, B
005E 6EE5      02308         MOVWF   POSTDEC1
0060 EC00 F000 02309         CALL    _Int2String
0064 0E04      02310         MOVLW   0x04
0066 26E1      02311         ADDWF   FSR1L, F
               02312 ;       .line   144; timer.c    UpdateDisplay(TIME_FLOWING);
0068 0E02      02313         MOVLW   0x02
006A 6EE5      02314         MOVWF   POSTDEC1
006C EC00 F000 02315         CALL    _UpdateDisplay
0070 2AE1      02316         INCF    FSR1L, F
0072 CFE4 FFD9 02317         MOVFF   PREINC1, FSR2L
0076 0012      02318         RETURN  
               02319 
               02320 ; ; Starting pCode block
               02321 S_timer__Int2String     code
0000 02322 _Int2String:
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02323 ;       .line   122; timer.c    void Int2String(int value, int pos) {
0000 CFD9 FFE5 02324         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02325         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02326         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02327         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02328         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02329         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02330         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02331         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02332         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02333         MOVFF   r0x07, POSTDEC1
0028 0E02      02334         MOVLW   0x02
002A CFDB F000 02335         MOVFF   PLUSW2, r0x00
002E 0E03      02336         MOVLW   0x03
0030 CFDB F000 02337         MOVFF   PLUSW2, r0x01
0034 0E04      02338         MOVLW   0x04
0036 CFDB F000 02339         MOVFF   PLUSW2, r0x02
003A 0E05      02340         MOVLW   0x05
003C CFDB F000 02341         MOVFF   PLUSW2, r0x03
               02342 ;       .line   123; timer.c    ultoa(value, &time_value[pos], BASE);
0040 6AE8      02343         CLRF    WREG
0042 BE00      02344         BTFSC   r0x01, 7
0044 0EFF      02345         MOVLW   0xff
0046 6E00      02346         MOVWF   r0x04
0048 6E00      02347         MOVWF   r0x05
004A 0E00      02348         MOVLW   LOW(_time_value)
004C 2400      02349         ADDWF   r0x02, W
004E 6E00      02350         MOVWF   r0x06
0050 0E00      02351         MOVLW   HIGH(_time_value)
0052 2000      02352         ADDWFC  r0x03, W
0054 6E00      02353         MOVWF   r0x07
0056 0E0A      02354         MOVLW   0x0a
0058 6EE5      02355         MOVWF   POSTDEC1
005A 5000      02356         MOVF    r0x07, W
005C 6EE5      02357         MOVWF   POSTDEC1
005E 5000      02358         MOVF    r0x06, W
0060 6EE5      02359         MOVWF   POSTDEC1
0062 5000      02360         MOVF    r0x05, W
0064 6EE5      02361         MOVWF   POSTDEC1
0066 5000      02362         MOVF    r0x04, W
0068 6EE5      02363         MOVWF   POSTDEC1
006A 5000      02364         MOVF    r0x01, W
006C 6EE5      02365         MOVWF   POSTDEC1
006E 5000      02366         MOVF    r0x00, W
0070 6EE5      02367         MOVWF   POSTDEC1
0072 EC00 F000 02368         CALL    _ultoa
0076 0E07      02369         MOVLW   0x07
0078 26E1      02370         ADDWF   FSR1L, F
               02371 ;       .line   125; timer.c    if (!(time_value[pos + 1])) {
007A 5000      02372         MOVF    r0x02, W
007C 6E00      02373         MOVWF   r0x00
007E 2800      02374         INCF    r0x00, W
0080 6E00      02375         MOVWF   r0x01
0082 6A00      02376         CLRF    r0x04
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0084 BE00      02377         BTFSC   r0x01, 7
0086 6800      02378         SETF    r0x04
0088 0E00      02379         MOVLW   LOW(_time_value)
008A 2600      02380         ADDWF   r0x01, F
008C 0E00      02381         MOVLW   HIGH(_time_value)
008E 2200      02382         ADDWFC  r0x04, F
0090 C000 FFE9 02383         MOVFF   r0x01, FSR0L
0094 C000 FFEA 02384         MOVFF   r0x04, FSR0H
0098 CFEF F000 02385         MOVFF   INDF0, r0x05
009C 5000      02386         MOVF    r0x05, W
009E E100      02387         BNZ     _00124_DS_
               02388 ;       .line   126; timer.c    time_value[pos + 1] = time_value[pos];
00A0 0E00      02389         MOVLW   LOW(_time_value)
00A2 2600      02390         ADDWF   r0x02, F
00A4 0E00      02391         MOVLW   HIGH(_time_value)
00A6 2200      02392         ADDWFC  r0x03, F
00A8 C000 FFE9 02393         MOVFF   r0x02, FSR0L
00AC C000 FFEA 02394         MOVFF   r0x03, FSR0H
00B0 CFEF F000 02395         MOVFF   INDF0, r0x05
00B4 C000 FFE9 02396         MOVFF   r0x01, FSR0L
00B8 C000 FFEA 02397         MOVFF   r0x04, FSR0H
00BC C000 FFEF 02398         MOVFF   r0x05, INDF0
               02399 ;       .line   127; timer.c    time_value[pos] = '0';
00C0 C000 FFE9 02400         MOVFF   r0x02, FSR0L
00C4 C000 FFEA 02401         MOVFF   r0x03, FSR0H
00C8 0E30      02402         MOVLW   0x30
00CA 6EEF      02403         MOVWF   INDF0
               02404 ;       .line   128; timer.c    time_value[pos + 2] = '\0';
00CC 2A00      02405         INCF    r0x00, F
00CE 2A00      02406         INCF    r0x00, F
00D0 6A00      02407         CLRF    r0x01
00D2 BE00      02408         BTFSC   r0x00, 7
00D4 6800      02409         SETF    r0x01
00D6 0E00      02410         MOVLW   LOW(_time_value)
00D8 2600      02411         ADDWF   r0x00, F
00DA 0E00      02412         MOVLW   HIGH(_time_value)
00DC 2200      02413         ADDWFC  r0x01, F
00DE C000 FFE9 02414         MOVFF   r0x00, FSR0L
00E2 C000 FFEA 02415         MOVFF   r0x01, FSR0H
00E6 0E00      02416         MOVLW   0x00
00E8 6EEF      02417         MOVWF   INDF0
00EA 02418 _00124_DS_:
00EA CFE4 F000 02419         MOVFF   PREINC1, r0x07
00EE CFE4 F000 02420         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 02421         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 02422         MOVFF   PREINC1, r0x04
00FA CFE4 F000 02423         MOVFF   PREINC1, r0x03
00FE CFE4 F000 02424         MOVFF   PREINC1, r0x02
0102 CFE4 F000 02425         MOVFF   PREINC1, r0x01
0106 CFE4 F000 02426         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 02427         MOVFF   PREINC1, FSR2L
010E 0012      02428         RETURN  
               02429 
               02430 ; ; Starting pCode block
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02431 S_timer__CompleteHoursSetting   code
0000 02432 _CompleteHoursSetting:
               02433 ;       .line   110; timer.c    void CompleteHoursSetting() {
0000 CFD9 FFE5 02434         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02435         MOVFF   FSR1L, FSR2L
               02436 ;       .line   111; timer.c    in_setting = MINUTES;
0008 0E01      02437         MOVLW   0x01
000A 0000      02438         BANKSEL _in_setting
000C 6F00      02439         MOVWF   _in_setting, B
               02440 ;       .line   112; timer.c    time_value[2] = ':'; // overwite '\0' added by ultoa when setting hours
000E 0E3A      02441         MOVLW   0x3a
0010 0000      02442         BANKSEL (_time_value + 2)
0012 6F00      02443         MOVWF   (_time_value + 2), B
0014 CFE4 FFD9 02444         MOVFF   PREINC1, FSR2L
0018 0012      02445         RETURN  
               02446 
               02447 ; ; Starting pCode block
               02448 S_timer__UpdateTimeValue        code
0000 02449 _UpdateTimeValue:
               02450 ;       .line   97; timer.c     void UpdateTimeValue(int* const value, int limit, int pos) {
0000 CFD9 FFE5 02451         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02452         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02453         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02454         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02455         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02456         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02457         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02458         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02459         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02460         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 02461         MOVFF   r0x08, POSTDEC1
002C 0E02      02462         MOVLW   0x02
002E CFDB F000 02463         MOVFF   PLUSW2, r0x00
0032 0E03      02464         MOVLW   0x03
0034 CFDB F000 02465         MOVFF   PLUSW2, r0x01
0038 0E04      02466         MOVLW   0x04
003A CFDB F000 02467         MOVFF   PLUSW2, r0x02
003E 0E05      02468         MOVLW   0x05
0040 CFDB F000 02469         MOVFF   PLUSW2, r0x03
0044 0E06      02470         MOVLW   0x06
0046 CFDB F000 02471         MOVFF   PLUSW2, r0x04
004A 0E07      02472         MOVLW   0x07
004C CFDB F000 02473         MOVFF   PLUSW2, r0x05
0050 0E08      02474         MOVLW   0x08
0052 CFDB F000 02475         MOVFF   PLUSW2, r0x06
               02476 ;       .line   98; timer.c     if (*value == limit) {
0056 C000 FFE9 02477         MOVFF   r0x00, FSR0L
005A C000 FFF3 02478         MOVFF   r0x01, PRODL
005E 5000      02479         MOVF    r0x02, W
0060 EC00 F000 02480         CALL    __gptrget2
0064 6E00      02481         MOVWF   r0x07
0066 CFF3 F000 02482         MOVFF   PRODL, r0x08
006A 5000      02483         MOVF    r0x07, W
006C 1800      02484         XORWF   r0x03, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
006E E100      02485         BNZ     _00111_DS_
0070 5000      02486         MOVF    r0x08, W
0072 1800      02487         XORWF   r0x04, W
0074 E000      02488         BZ      _00112_DS_
0076 02489 _00111_DS_:
0076 D000      02490         BRA     _00106_DS_
0078 02491 _00112_DS_:
               02492 ;       .line   99; timer.c     *value = 0;
0078 0E00      02493         MOVLW   0x00
007A 6EE5      02494         MOVWF   POSTDEC1
007C 0E00      02495         MOVLW   0x00
007E 6EF4      02496         MOVWF   PRODH
0080 C000 FFE9 02497         MOVFF   r0x00, FSR0L
0084 C000 FFF3 02498         MOVFF   r0x01, PRODL
0088 5000      02499         MOVF    r0x02, W
008A EC00 F000 02500         CALL    __gptrput2
008E D000      02501         BRA     _00107_DS_
0090 02502 _00106_DS_:
               02503 ;       .line   101; timer.c    (*value)++;
0090 2A00      02504         INCF    r0x07, F
0092 B0D8      02505         BTFSC   STATUS, 0
0094 2A00      02506         INCF    r0x08, F
0096 C000 FFE5 02507         MOVFF   r0x07, POSTDEC1
009A C000 FFF4 02508         MOVFF   r0x08, PRODH
009E C000 FFE9 02509         MOVFF   r0x00, FSR0L
00A2 C000 FFF3 02510         MOVFF   r0x01, PRODL
00A6 5000      02511         MOVF    r0x02, W
00A8 EC00 F000 02512         CALL    __gptrput2
00AC 02513 _00107_DS_:
               02514 ;       .line   103; timer.c    Int2String(*value, pos);
00AC C000 FFE9 02515         MOVFF   r0x00, FSR0L
00B0 C000 FFF3 02516         MOVFF   r0x01, PRODL
00B4 5000      02517         MOVF    r0x02, W
00B6 EC00 F000 02518         CALL    __gptrget2
00BA 6E00      02519         MOVWF   r0x00
00BC CFF3 F000 02520         MOVFF   PRODL, r0x01
00C0 5000      02521         MOVF    r0x06, W
00C2 6EE5      02522         MOVWF   POSTDEC1
00C4 5000      02523         MOVF    r0x05, W
00C6 6EE5      02524         MOVWF   POSTDEC1
00C8 5000      02525         MOVF    r0x01, W
00CA 6EE5      02526         MOVWF   POSTDEC1
00CC 5000      02527         MOVF    r0x00, W
00CE 6EE5      02528         MOVWF   POSTDEC1
00D0 EC00 F000 02529         CALL    _Int2String
00D4 0E04      02530         MOVLW   0x04
00D6 26E1      02531         ADDWF   FSR1L, F
00D8 CFE4 F000 02532         MOVFF   PREINC1, r0x08
00DC CFE4 F000 02533         MOVFF   PREINC1, r0x07
00E0 CFE4 F000 02534         MOVFF   PREINC1, r0x06
00E4 CFE4 F000 02535         MOVFF   PREINC1, r0x05
00E8 CFE4 F000 02536         MOVFF   PREINC1, r0x04
00EC CFE4 F000 02537         MOVFF   PREINC1, r0x03
00F0 CFE4 F000 02538         MOVFF   PREINC1, r0x02
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00F4 CFE4 F000 02539         MOVFF   PREINC1, r0x01
00F8 CFE4 F000 02540         MOVFF   PREINC1, r0x00
00FC CFE4 FFD9 02541         MOVFF   PREINC1, FSR2L
0100 0012      02542         RETURN  
               02543 
               02544 ; ; Starting pCode block
0102 02545 __str_0:
0102 6E45 6574 02546         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69
     2072 6874 
     2065 6974 
010E 656D 003A 02547         DB      0x6d, 0x65, 0x3a, 0x00
               02548 ; ; Starting pCode block
0112 02549 __str_1:
0112 2020 0020 02550         DB      0x20, 0x20, 0x20, 0x00
               02551 ; ; Starting pCode block
0116 02552 __str_2:
0116 6E45 6574 02553         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x77
     2072 6874 
     2065 7761 
0122 6B61 2065 02554         DB      0x61, 0x6b, 0x65, 0x20, 0x00
     0000      
               02555 ; ; Starting pCode block
0128 02556 __str_3:
0128 6974 656D 02557         DB      0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x00
     203A 0000 
               02558 ; ; Starting pCode block
0130 02559 __str_4:
0130 2020 2020 02560         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
     2020 2020 
     2020 2020 
013C 2020 2020 02561         DB      0x20, 0x20, 0x20, 0x20, 0x00
     0000      
               02562 ; ; Starting pCode block
0142 02563 __str_5:
0142 2020 2020 02564         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
     2020 2020 
     0020      
               02565 
               02566 
               02567 ; Statistics:
               02568 ; code size:     4140 (0x102c) bytes ( 3.16%)
               02569 ;                2070 (0x0816) words
               02570 ; udata size:      46 (0x002e) bytes ( 1.20%)
               02571 ; access size:     22 (0x0016) bytes
               02572 
               02573 
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000090
_00107_DS_                        000000AC
_00111_DS_                        00000076
_00112_DS_                        00000078
_00124_DS_                        000000EA
_00135_DS_                        0000008C
_00138_DS_                        00000020
_00141_DS_                        000000A8
_00146_DS_                        000000C2
_00149_DS_                        00000092
_00151_DS_                        00000144
_00157_DS_                        000000AA
_00159_DS_                        00000104
_00167_DS_                        000000A8
_00170_DS_                        00000064
_00172_DS_                        00000108
_00187_DS_                        00000064
_00188_DS_                        000000BA
_00189_DS_                        00000110
_00191_DS_                        00000164
_00195_DS_                        00000058
_00201_DS_                        000000C6
_00207_DS_                        00000106
_00208_DS_                        0000014C
_00209_DS_                        00000154
_00216_DS_                        0000018C
_00228_DS_                        000000E4
_00229_DS_                        000000E6
_00230_DS_                        000000FA
_00231_DS_                        000000FC
_00232_DS_                        00000120
_00233_DS_                        00000136
_00234_DS_                        00000138
_00242_DS_                        0000005A
_00244_DS_                        0000005C
_00246_DS_                        00000074
_00249_DS_                        0000008C
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00265_DS_                        00000012
_00272_DS_                        0000005E
_00274_DS_                        000000A6
_00275_DS_                        000000BE
_00278_DS_                        000000CE
_00280_DS_                        000000E4
_00284_DS_                        00000044
_00292_DS_                        000000FC
_00293_DS_                        0000005C
_00296_DS_                        000000D4
_00303_DS_                        0000009A
_00304_DS_                        000000E4
_00309_DS_                        00000090
_00313_DS_                        000000DE
_00317_DS_                        00000088
_00329_DS_                        000000CC
_00333_DS_                        00000134
_00336_DS_                        0000015E
_00340_DS_                        00000188
_00347_DS_                        00000152
_00348_DS_                        00000114
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_AssignDefaultValues              00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_CompleteHoursSetting             00000000
_ConfigureRegisters               00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_DisplayWORD                      00000000
_DisplayWORD_WDigit_1_1           00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_HandleButton1Pressure            00000000
_HandleButton2Pressure            00000000
_HighISR                          00000000
_INDF0                            00000000
_INDF1                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
_IPR3bits                         00000000
_Int2String                       00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
_LATJbits                         00000000
_LCDInit                          00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_MAADR1                           00000000
_MAADR2                           00000000
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_SetupCompleteTime                00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_UpdateClock                      00000000
_UpdateDisplay                    00000000
_UpdateProperTimeValue            00000000
_UpdateTimeValue                  00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrget2                        00000000
__gptrput1                        00000000
__gptrput2                        00000000
__str_0                           00000102
__str_1                           00000112
__str_2                           00000116
__str_3                           00000128
__str_4                           00000130
__str_5                           00000142
_clock                            00000000
_flags                            00000000
_in_setting                       00000000
_ints                             00000000
_main                             00000000
_setting                          00000000
_stdin                            00000000
_stdout                           00000000
_strlcpy                          00000000
_strlen                           00000000
_time_value                       00000000
_timer                            00000000
_ultoa                            00000000
ivec_0x1_HighISR                  00000008
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  18:32:49         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012
r0x13                             00000013
r0x14                             00000014
r0x15                             00000015


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

