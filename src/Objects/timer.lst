gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
               00004 ; This file was generated Mon Nov 27 18:30:57 2017
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _UpdateTimeValue
               00016         global _CompleteHoursSetting
               00017         global _Int2String
               00018         global _SetupCompleteTime
               00019         global _HandleButton1Pressure
               00020         global _UpdateProperTimeValue
               00021         global _HandleButton2Pressure
               00022         global _AssignDefaultValues
               00023         global _UpdateDisplay
               00024         global _UpdateClock
               00025         global _DisplayWORD
               00026         global _DisplayString
               00027         global _strlcpy
               00028         global _in_setting
               00029         global _flags
               00030         global _clock
               00031         global _timer
               00032         global _setting
               00033         global _ints
               00034         global _time_value
               00035         global _HighISR
               00036         global _main
               00037 
               00038 ;--------------------------------------------------------
               00039 ; extern variables in this module
               00040 ;--------------------------------------------------------
               00041         extern __gptrget2
               00042         extern __gptrput2
               00043         extern __gptrget1
               00044         extern __gptrput1
               00045         extern _EBSTCONbits
               00046         extern _MISTATbits
               00047         extern _EFLOCONbits
               00048         extern _MACON1bits
               00049         extern _MACON2bits
               00050         extern _MACON3bits
               00051         extern _MACON4bits
               00052         extern _MACLCON1bits
               00053         extern _MACLCON2bits
               00054         extern _MICONbits
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _MICMDbits
               00056         extern _EWOLIEbits
               00057         extern _EWOLIRbits
               00058         extern _ERXFCONbits
               00059         extern _EIEbits
               00060         extern _ESTATbits
               00061         extern _ECON2bits
               00062         extern _EIRbits
               00063         extern _EDATAbits
               00064         extern _SSP2CON2bits
               00065         extern _SSP2CON1bits
               00066         extern _SSP2STATbits
               00067         extern _ECCP2DELbits
               00068         extern _ECCP2ASbits
               00069         extern _ECCP3DELbits
               00070         extern _ECCP3ASbits
               00071         extern _RCSTA2bits
               00072         extern _TXSTA2bits
               00073         extern _CCP5CONbits
               00074         extern _CCP4CONbits
               00075         extern _T4CONbits
               00076         extern _ECCP1DELbits
               00077         extern _BAUDCON2bits
               00078         extern _BAUDCTL2bits
               00079         extern _BAUDCONbits
               00080         extern _BAUDCON1bits
               00081         extern _BAUDCTLbits
               00082         extern _BAUDCTL1bits
               00083         extern _PORTAbits
               00084         extern _PORTBbits
               00085         extern _PORTCbits
               00086         extern _PORTDbits
               00087         extern _PORTEbits
               00088         extern _PORTFbits
               00089         extern _PORTGbits
               00090         extern _PORTHbits
               00091         extern _PORTJbits
               00092         extern _LATAbits
               00093         extern _LATBbits
               00094         extern _LATCbits
               00095         extern _LATDbits
               00096         extern _LATEbits
               00097         extern _LATFbits
               00098         extern _LATGbits
               00099         extern _LATHbits
               00100         extern _LATJbits
               00101         extern _DDRAbits
               00102         extern _TRISAbits
               00103         extern _DDRBbits
               00104         extern _TRISBbits
               00105         extern _DDRCbits
               00106         extern _TRISCbits
               00107         extern _DDRDbits
               00108         extern _TRISDbits
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _DDREbits
               00110         extern _TRISEbits
               00111         extern _DDRFbits
               00112         extern _TRISFbits
               00113         extern _DDRGbits
               00114         extern _TRISGbits
               00115         extern _DDRHbits
               00116         extern _TRISHbits
               00117         extern _DDRJbits
               00118         extern _TRISJbits
               00119         extern _OSCTUNEbits
               00120         extern _MEMCONbits
               00121         extern _PIE1bits
               00122         extern _PIR1bits
               00123         extern _IPR1bits
               00124         extern _PIE2bits
               00125         extern _PIR2bits
               00126         extern _IPR2bits
               00127         extern _PIE3bits
               00128         extern _PIR3bits
               00129         extern _IPR3bits
               00130         extern _EECON1bits
               00131         extern _RCSTAbits
               00132         extern _RCSTA1bits
               00133         extern _TXSTAbits
               00134         extern _TXSTA1bits
               00135         extern _PSPCONbits
               00136         extern _T3CONbits
               00137         extern _CMCONbits
               00138         extern _CVRCONbits
               00139         extern _ECCP1ASbits
               00140         extern _CCP3CONbits
               00141         extern _ECCP3CONbits
               00142         extern _CCP2CONbits
               00143         extern _ECCP2CONbits
               00144         extern _CCP1CONbits
               00145         extern _ECCP1CONbits
               00146         extern _ADCON2bits
               00147         extern _ADCON1bits
               00148         extern _ADCON0bits
               00149         extern _SSP1CON2bits
               00150         extern _SSPCON2bits
               00151         extern _SSP1CON1bits
               00152         extern _SSPCON1bits
               00153         extern _SSP1STATbits
               00154         extern _SSPSTATbits
               00155         extern _T2CONbits
               00156         extern _T1CONbits
               00157         extern _RCONbits
               00158         extern _WDTCONbits
               00159         extern _ECON1bits
               00160         extern _OSCCONbits
               00161         extern _T0CONbits
               00162         extern _STATUSbits
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _INTCON3bits
               00164         extern _INTCON2bits
               00165         extern _INTCONbits
               00166         extern _STKPTRbits
               00167         extern _stdin
               00168         extern _stdout
               00169         extern _LCDText
               00170         extern _MAADR5
               00171         extern _MAADR6
               00172         extern _MAADR3
               00173         extern _MAADR4
               00174         extern _MAADR1
               00175         extern _MAADR2
               00176         extern _EBSTSD
               00177         extern _EBSTCON
               00178         extern _EBSTCS
               00179         extern _EBSTCSL
               00180         extern _EBSTCSH
               00181         extern _MISTAT
               00182         extern _EFLOCON
               00183         extern _EPAUS
               00184         extern _EPAUSL
               00185         extern _EPAUSH
               00186         extern _MACON1
               00187         extern _MACON2
               00188         extern _MACON3
               00189         extern _MACON4
               00190         extern _MABBIPG
               00191         extern _MAIPG
               00192         extern _MAIPGL
               00193         extern _MAIPGH
               00194         extern _MACLCON1
               00195         extern _MACLCON2
               00196         extern _MAMXFL
               00197         extern _MAMXFLL
               00198         extern _MAMXFLH
               00199         extern _MICON
               00200         extern _MICMD
               00201         extern _MIREGADR
               00202         extern _MIWR
               00203         extern _MIWRL
               00204         extern _MIWRH
               00205         extern _MIRD
               00206         extern _MIRDL
               00207         extern _MIRDH
               00208         extern _EHT0
               00209         extern _EHT1
               00210         extern _EHT2
               00211         extern _EHT3
               00212         extern _EHT4
               00213         extern _EHT5
               00214         extern _EHT6
               00215         extern _EHT7
               00216         extern _EPMM0
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EPMM1
               00218         extern _EPMM2
               00219         extern _EPMM3
               00220         extern _EPMM4
               00221         extern _EPMM5
               00222         extern _EPMM6
               00223         extern _EPMM7
               00224         extern _EPMCS
               00225         extern _EPMCSL
               00226         extern _EPMCSH
               00227         extern _EPMO
               00228         extern _EPMOL
               00229         extern _EPMOH
               00230         extern _EWOLIE
               00231         extern _EWOLIR
               00232         extern _ERXFCON
               00233         extern _EPKTCNT
               00234         extern _EWRPT
               00235         extern _EWRPTL
               00236         extern _EWRPTH
               00237         extern _ETXST
               00238         extern _ETXSTL
               00239         extern _ETXSTH
               00240         extern _ETXND
               00241         extern _ETXNDL
               00242         extern _ETXNDH
               00243         extern _ERXST
               00244         extern _ERXSTL
               00245         extern _ERXSTH
               00246         extern _ERXND
               00247         extern _ERXNDL
               00248         extern _ERXNDH
               00249         extern _ERXRDPT
               00250         extern _ERXRDPTL
               00251         extern _ERXRDPTH
               00252         extern _ERXWRPT
               00253         extern _ERXWRPTL
               00254         extern _ERXWRPTH
               00255         extern _EDMAST
               00256         extern _EDMASTL
               00257         extern _EDMASTH
               00258         extern _EDMAND
               00259         extern _EDMANDL
               00260         extern _EDMANDH
               00261         extern _EDMADST
               00262         extern _EDMADSTL
               00263         extern _EDMADSTH
               00264         extern _EDMACS
               00265         extern _EDMACSL
               00266         extern _EDMACSH
               00267         extern _EIE
               00268         extern _ESTAT
               00269         extern _ECON2
               00270         extern _EIR
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _EDATA
               00272         extern _SSP2CON2
               00273         extern _SSP2CON1
               00274         extern _SSP2STAT
               00275         extern _SSP2ADD
               00276         extern _SSP2BUF
               00277         extern _ECCP2DEL
               00278         extern _ECCP2AS
               00279         extern _ECCP3DEL
               00280         extern _ECCP3AS
               00281         extern _RCSTA2
               00282         extern _TXSTA2
               00283         extern _TXREG2
               00284         extern _RCREG2
               00285         extern _SPBRG2
               00286         extern _CCP5CON
               00287         extern _CCPR5
               00288         extern _CCPR5L
               00289         extern _CCPR5H
               00290         extern _CCP4CON
               00291         extern _CCPR4
               00292         extern _CCPR4L
               00293         extern _CCPR4H
               00294         extern _T4CON
               00295         extern _PR4
               00296         extern _TMR4
               00297         extern _ECCP1DEL
               00298         extern _ERDPT
               00299         extern _ERDPTL
               00300         extern _ERDPTH
               00301         extern _BAUDCON2
               00302         extern _BAUDCTL2
               00303         extern _SPBRGH2
               00304         extern _BAUDCON
               00305         extern _BAUDCON1
               00306         extern _BAUDCTL
               00307         extern _BAUDCTL1
               00308         extern _SPBRGH
               00309         extern _SPBRGH1
               00310         extern _PORTA
               00311         extern _PORTB
               00312         extern _PORTC
               00313         extern _PORTD
               00314         extern _PORTE
               00315         extern _PORTF
               00316         extern _PORTG
               00317         extern _PORTH
               00318         extern _PORTJ
               00319         extern _LATA
               00320         extern _LATB
               00321         extern _LATC
               00322         extern _LATD
               00323         extern _LATE
               00324         extern _LATF
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATG
               00326         extern _LATH
               00327         extern _LATJ
               00328         extern _DDRA
               00329         extern _TRISA
               00330         extern _DDRB
               00331         extern _TRISB
               00332         extern _DDRC
               00333         extern _TRISC
               00334         extern _DDRD
               00335         extern _TRISD
               00336         extern _DDRE
               00337         extern _TRISE
               00338         extern _DDRF
               00339         extern _TRISF
               00340         extern _DDRG
               00341         extern _TRISG
               00342         extern _DDRH
               00343         extern _TRISH
               00344         extern _DDRJ
               00345         extern _TRISJ
               00346         extern _OSCTUNE
               00347         extern _MEMCON
               00348         extern _PIE1
               00349         extern _PIR1
               00350         extern _IPR1
               00351         extern _PIE2
               00352         extern _PIR2
               00353         extern _IPR2
               00354         extern _PIE3
               00355         extern _PIR3
               00356         extern _IPR3
               00357         extern _EECON1
               00358         extern _EECON2
               00359         extern _RCSTA
               00360         extern _RCSTA1
               00361         extern _TXSTA
               00362         extern _TXSTA1
               00363         extern _TXREG
               00364         extern _TXREG1
               00365         extern _RCREG
               00366         extern _RCREG1
               00367         extern _SPBRG
               00368         extern _SPBRG1
               00369         extern _PSPCON
               00370         extern _T3CON
               00371         extern _TMR3L
               00372         extern _TMR3H
               00373         extern _CMCON
               00374         extern _CVRCON
               00375         extern _ECCP1AS
               00376         extern _CCP3CON
               00377         extern _ECCP3CON
               00378         extern _CCPR3
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _CCPR3L
               00380         extern _CCPR3H
               00381         extern _CCP2CON
               00382         extern _ECCP2CON
               00383         extern _CCPR2
               00384         extern _CCPR2L
               00385         extern _CCPR2H
               00386         extern _CCP1CON
               00387         extern _ECCP1CON
               00388         extern _CCPR1
               00389         extern _CCPR1L
               00390         extern _CCPR1H
               00391         extern _ADCON2
               00392         extern _ADCON1
               00393         extern _ADCON0
               00394         extern _ADRES
               00395         extern _ADRESL
               00396         extern _ADRESH
               00397         extern _SSP1CON2
               00398         extern _SSPCON2
               00399         extern _SSP1CON1
               00400         extern _SSPCON1
               00401         extern _SSP1STAT
               00402         extern _SSPSTAT
               00403         extern _SSP1ADD
               00404         extern _SSPADD
               00405         extern _SSP1BUF
               00406         extern _SSPBUF
               00407         extern _T2CON
               00408         extern _PR2
               00409         extern _TMR2
               00410         extern _T1CON
               00411         extern _TMR1L
               00412         extern _TMR1H
               00413         extern _RCON
               00414         extern _WDTCON
               00415         extern _ECON1
               00416         extern _OSCCON
               00417         extern _T0CON
               00418         extern _TMR0L
               00419         extern _TMR0H
               00420         extern _STATUS
               00421         extern _FSR2L
               00422         extern _FSR2H
               00423         extern _PLUSW2
               00424         extern _PREINC2
               00425         extern _POSTDEC2
               00426         extern _POSTINC2
               00427         extern _INDF2
               00428         extern _BSR
               00429         extern _FSR1L
               00430         extern _FSR1H
               00431         extern _PLUSW1
               00432         extern _PREINC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _POSTDEC1
               00434         extern _POSTINC1
               00435         extern _INDF1
               00436         extern _WREG
               00437         extern _FSR0L
               00438         extern _FSR0H
               00439         extern _PLUSW0
               00440         extern _PREINC0
               00441         extern _POSTDEC0
               00442         extern _POSTINC0
               00443         extern _INDF0
               00444         extern _INTCON3
               00445         extern _INTCON2
               00446         extern _INTCON
               00447         extern _PROD
               00448         extern _PRODL
               00449         extern _PRODH
               00450         extern _TABLAT
               00451         extern _TBLPTR
               00452         extern _TBLPTRL
               00453         extern _TBLPTRH
               00454         extern _TBLPTRU
               00455         extern _PC
               00456         extern _PCL
               00457         extern _PCLATH
               00458         extern _PCLATU
               00459         extern _STKPTR
               00460         extern _TOS
               00461         extern _TOSL
               00462         extern _TOSH
               00463         extern _TOSU
               00464         extern _ultoa
               00465         extern _strlen
               00466         extern _LCDInit
               00467         extern _LCDUpdate
               00468 ;--------------------------------------------------------
               00469 ;       Equates to used internal registers
               00470 ;--------------------------------------------------------
  00000FD8     00471 STATUS  equ     0xfd8
  00000FF9     00472 PCL     equ     0xff9
  00000FFA     00473 PCLATH  equ     0xffa
  00000FFB     00474 PCLATU  equ     0xffb
  00000FE8     00475 WREG    equ     0xfe8
  00000FE0     00476 BSR     equ     0xfe0
  00000FE9     00477 FSR0L   equ     0xfe9
  00000FEA     00478 FSR0H   equ     0xfea
  00000FE1     00479 FSR1L   equ     0xfe1
  00000FD9     00480 FSR2L   equ     0xfd9
  00000FEF     00481 INDF0   equ     0xfef
  00000FE5     00482 POSTDEC1        equ     0xfe5
  00000FE4     00483 PREINC1 equ     0xfe4
  00000FDB     00484 PLUSW2  equ     0xfdb
  00000FF3     00485 PRODL   equ     0xff3
  00000FF4     00486 PRODH   equ     0xff4
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00487 
               00488 
               00489 ; Internal registers
               00490 .registers      udata_ovr       0x0000
               00491 r0x00   res     1
               00492 r0x01   res     1
               00493 r0x02   res     1
               00494 r0x03   res     1
               00495 r0x04   res     1
               00496 r0x05   res     1
               00497 r0x06   res     1
               00498 r0x07   res     1
               00499 r0x08   res     1
               00500 r0x09   res     1
               00501 r0x0a   res     1
               00502 r0x0b   res     1
               00503 r0x0c   res     1
               00504 r0x0d   res     1
               00505 r0x0e   res     1
               00506 r0x0f   res     1
               00507 r0x10   res     1
               00508 r0x11   res     1
               00509 r0x12   res     1
               00510 r0x13   res     1
               00511 r0x14   res     1
               00512 r0x15   res     1
               00513 
               00514 udata_timer_0   udata
               00515 _in_setting     res     1
               00516 
               00517 udata_timer_1   udata
               00518 _time_value     res     9
               00519 
               00520 udata_timer_2   udata
               00521 _clock  res     6
               00522 
               00523 udata_timer_3   udata
               00524 _flags  res     12
               00525 
               00526 udata_timer_4   udata
               00527 _setting        res     4
               00528 
               00529 udata_timer_5   udata
               00530 _timer  res     4
               00531 
               00532 udata_timer_6   udata
               00533 _ints   res     4
               00534 
               00535 udata_timer_7   udata
               00536 _DisplayWORD_WDigit_1_1 res     6
               00537 
               00538 ;--------------------------------------------------------
               00539 ; interrupt vector 
               00540 ;--------------------------------------------------------
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 
               00542 ;--------------------------------------------------------
               00543 ; global & static initialisations
               00544 ;--------------------------------------------------------
               00545 ; ; Starting pCode block for absolute section
               00546 ; ;-----------------------------------------
               00547 S_timer_ivec_0x1_HighISR        code    0X000008
0008 00548 ivec_0x1_HighISR:
0008 EF00 F000 00549         GOTO    _HighISR
               00550 
               00551 ; I code from now on!
               00552 ; ; Starting pCode block
               00553 S_timer__main   code
0000 00554 _main:
               00555 ;       .line   343; timer.c    LCDInit();
0000 EC00 F000 00556         CALL    _LCDInit
               00557 ;       .line   344; timer.c    DelayMs(100);
0004 0E10      00558         MOVLW   0x10
0006 6E00      00559         MOVWF   r0x00
0008 0E98      00560         MOVLW   0x98
000A 6E00      00561         MOVWF   r0x01
000C 0E02      00562         MOVLW   0x02
000E 6E00      00563         MOVWF   r0x02
0010 6A00      00564         CLRF    r0x03
0012 00565 _00245_DS_:
0012 C000 F000 00566         MOVFF   r0x00, r0x04
0016 C000 F000 00567         MOVFF   r0x01, r0x05
001A C000 F000 00568         MOVFF   r0x02, r0x06
001E C000 F000 00569         MOVFF   r0x03, r0x07
0022 0EFF      00570         MOVLW   0xff
0024 2600      00571         ADDWF   r0x00, F
0026 0EFF      00572         MOVLW   0xff
0028 2200      00573         ADDWFC  r0x01, F
002A 0EFF      00574         MOVLW   0xff
002C 2200      00575         ADDWFC  r0x02, F
002E 0EFF      00576         MOVLW   0xff
0030 2200      00577         ADDWFC  r0x03, F
0032 5000      00578         MOVF    r0x04, W
0034 1000      00579         IORWF   r0x05, W
0036 1000      00580         IORWF   r0x06, W
0038 1000      00581         IORWF   r0x07, W
003A E100      00582         BNZ     _00245_DS_
               00583 ;       .line   350; timer.c    T1CONbits.TMR1ON        =       0;              // disable timer1
003C 9000      00584         BCF     _T1CONbits, 0
               00585 ;       .line   351; timer.c    T1CONbits.RD16          =       1;              // use timer1 16-bit counter
003E 8E00      00586         BSF     _T1CONbits, 7
               00587 ;       .line   352; timer.c    T1CONbits.T1CKPS0       =       0;              // prescaler set to 1:1
0040 9800      00588         BCF     _T1CONbits, 4
               00589 ;       .line   353; timer.c    T1CONbits.T1CKPS1       =       0;
0042 9A00      00590         BCF     _T1CONbits, 5
               00591 ;       .line   354; timer.c    T1CONbits.T1OSCEN       =       1;              // timer1 oscillator enable
0044 8600      00592         BSF     _T1CONbits, 3
               00593 ;       .line   355; timer.c    T1CONbits.TMR1CS        =       1;              // external clock selected
0046 8200      00594         BSF     _T1CONbits, 1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00595 ;       .line   356; timer.c    PIR1bits.TMR1IF         =       0;              // clear timer1 overflow bit
0048 9000      00596         BCF     _PIR1bits, 0
               00597 ;       .line   357; timer.c    PIE1bits.TMR1IE         =       1;              // timer1 interrupt enable
004A 8000      00598         BSF     _PIE1bits, 0
               00599 ;       .line   358; timer.c    IPR1bits.TMR1IP         =       1;              // high priority interrupt
004C 8000      00600         BSF     _IPR1bits, 0
               00601 ;       .line   359; timer.c    TMR1L                           =       (0x10000 - EXTCLOCK_FREQ/2) & 0xff;     // timer1 initial value
004E 6A00      00602         CLRF    _TMR1L
               00603 ;       .line   360; timer.c    TMR1H                           =       (0x10000 - EXTCLOCK_FREQ/2) >> 8;
0050 0EC0      00604         MOVLW   0xc0
0052 6E00      00605         MOVWF   _TMR1H
               00606 ;       .line   362; timer.c    RCONbits.IPEN      = 1;   //enable interrupts priority levels
0054 8E00      00607         BSF     _RCONbits, 7
               00608 ;       .line   363; timer.c    INTCON3bits.INT1P  = 1;   //connect INT1 interrupt (button 2) to high prio
0056 8C00      00609         BSF     _INTCON3bits, 6
               00610 ;       .line   364; timer.c    INTCON2bits.INT3IP = 1;
0058 8200      00611         BSF     _INTCON2bits, 1
               00612 ;       .line   365; timer.c    INTCON2bits.INTEDG1= 0;   //INT1 interrupts on falling edge
005A 9A00      00613         BCF     _INTCON2bits, 5
               00614 ;       .line   366; timer.c    INTCON2bits.INTEDG3= 0;   //connect INT1 interrupt (button 2) to high prio
005C 9600      00615         BCF     _INTCON2bits, 3
               00616 ;       .line   367; timer.c    INTCONbits.GIE     = 1;   //enable high priority interrupts
005E 8E00      00617         BSF     _INTCONbits, 7
               00618 ;       .line   368; timer.c    INTCON3bits.INT1F  = 0;   //clear INT1 flag
0060 9000      00619         BCF     _INTCON3bits, 0
               00620 ;       .line   369; timer.c    INTCON3bits.INT3F  = 0;
0062 9400      00621         BCF     _INTCON3bits, 2
               00622 ;       .line   370; timer.c    INTCON3bits.INT1E  = 1;   //enable INT1 interrupt (button 2)
0064 8600      00623         BSF     _INTCON3bits, 3
               00624 ;       .line   371; timer.c    INTCON3bits.INT3E  = 1;   
0066 8A00      00625         BSF     _INTCON3bits, 5
               00626 ;       .line   373; timer.c    TRISJbits.TRISJ0        =       0; // configure PORTJ0 for output (LED)
0068 9000      00627         BCF     _TRISJbits, 0
               00628 ;       .line   374; timer.c    TRISJbits.TRISJ1        =       0; // configure PORTJ1 for output (LED)
006A 9200      00629         BCF     _TRISJbits, 1
               00630 ;       .line   375; timer.c    LATJbits.LATJ0          =       1;
006C 8000      00631         BSF     _LATJbits, 0
               00632 ;       .line   376; timer.c    LATJbits.LATJ1          =       0;
006E 9200      00633         BCF     _LATJbits, 1
               00634 ;       .line   378; timer.c    AssignDefaultValues();
0070 EC00 F000 00635         CALL    _AssignDefaultValues
0074 00636 _00264_DS_:
0074 0000      00637         BANKSEL (_flags + 6)
               00638 ;       .line   381; timer.c    if (flags.half_sec) {
0076 5100      00639         MOVF    (_flags + 6), W, B
0078 0000      00640         BANKSEL (_flags + 7)
007A 1100      00641         IORWF   (_flags + 7), W, B
007C B4D8      00642         BTFSC   STATUS, 2
007E D000      00643         BRA     _00258_DS_
               00644 ;       .line   382; timer.c    LATJbits.LATJ0  ^=   1; // toggle LED
0080 6A00      00645         CLRF    r0x00
0082 B000      00646         BTFSC   _LATJbits, 0
0084 2A00      00647         INCF    r0x00, F
0086 0E01      00648         MOVLW   0x01
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0088 1A00      00649         XORWF   r0x00, F
008A 5000      00650         MOVF    r0x00, W
008C 0B01      00651         ANDLW   0x01
008E 6EF4      00652         MOVWF   PRODH
0090 5000      00653         MOVF    _LATJbits, W
0092 0BFE      00654         ANDLW   0xfe
0094 10F4      00655         IORWF   PRODH, W
0096 6E00      00656         MOVWF   _LATJbits
0098 0000      00657         BANKSEL (_flags + 6)
               00658 ;       .line   383; timer.c    flags.half_sec  =    0;
009A 6B00      00659         CLRF    (_flags + 6), B
009C 0000      00660         BANKSEL (_flags + 7)
009E 6B00      00661         CLRF    (_flags + 7), B
00A0 0000      00662         BANKSEL (_flags + 8)
               00663 ;       .line   384; timer.c    if (flags.one_sec) {
00A2 5100      00664         MOVF    (_flags + 8), W, B
00A4 0000      00665         BANKSEL (_flags + 9)
00A6 1100      00666         IORWF   (_flags + 9), W, B
00A8 E000      00667         BZ      _00258_DS_
               00668 ;       .line   385; timer.c    UpdateClock();
00AA EC00 F000 00669         CALL    _UpdateClock
00AE 0000      00670         BANKSEL (_flags + 10)
               00671 ;       .line   386; timer.c    if(flags.alarm) {
00B0 5100      00672         MOVF    (_flags + 10), W, B
00B2 0000      00673         BANKSEL (_flags + 11)
00B4 1100      00674         IORWF   (_flags + 11), W, B
00B6 E000      00675         BZ      _00254_DS_
               00676 ;       .line   387; timer.c    LATJbits.LATJ1  ^=      1;
00B8 6A00      00677         CLRF    r0x00
00BA B200      00678         BTFSC   _LATJbits, 1
00BC 2A00      00679         INCF    r0x00, F
00BE 0E01      00680         MOVLW   0x01
00C0 1A00      00681         XORWF   r0x00, F
00C2 5000      00682         MOVF    r0x00, W
00C4 0B01      00683         ANDLW   0x01
00C6 44E8      00684         RLNCF   WREG, W
00C8 6EF4      00685         MOVWF   PRODH
00CA 5000      00686         MOVF    _LATJbits, W
00CC 0BFD      00687         ANDLW   0xfd
00CE 10F4      00688         IORWF   PRODH, W
00D0 6E00      00689         MOVWF   _LATJbits
00D2 0000      00690         BANKSEL (_clock + 5)
               00691 ;       .line   388; timer.c    if(clock.seconds > 30) {
00D4 5100      00692         MOVF    (_clock + 5), W, B
00D6 0F80      00693         ADDLW   0x80
00D8 0F80      00694         ADDLW   0x80
00DA E100      00695         BNZ     _00280_DS_
00DC 0E1F      00696         MOVLW   0x1f
00DE 0000      00697         BANKSEL (_clock + 4)
00E0 5D00      00698         SUBWF   (_clock + 4), W, B
00E2 00699 _00280_DS_:
00E2 E300      00700         BNC     _00254_DS_
               00701 ;       .line   389; timer.c    LATJbits.LATJ1  =       0;
00E4 9200      00702         BCF     _LATJbits, 1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00E6 0000      00703         BANKSEL (_flags + 10)
               00704 ;       .line   390; timer.c    flags.alarm     =       0;
00E8 6B00      00705         CLRF    (_flags + 10), B
00EA 0000      00706         BANKSEL (_flags + 11)
00EC 6B00      00707         CLRF    (_flags + 11), B
00EE 00708 _00254_DS_:
00EE 0000      00709         BANKSEL (_flags + 8)
               00710 ;       .line   393; timer.c    flags.one_sec = 0;
00F0 6B00      00711         CLRF    (_flags + 8), B
00F2 0000      00712         BANKSEL (_flags + 9)
00F4 6B00      00713         CLRF    (_flags + 9), B
00F6 00714 _00258_DS_:
00F6 0000      00715         BANKSEL _ints
               00716 ;       .line   396; timer.c    if (ints.button1) {
00F8 5100      00717         MOVF    _ints, W, B
00FA 0000      00718         BANKSEL (_ints + 1)
00FC 1100      00719         IORWF   (_ints + 1), W, B
00FE E000      00720         BZ      _00260_DS_
0100 0000      00721         BANKSEL _ints
               00722 ;       .line   397; timer.c    ints.button1 = 0;
0102 6B00      00723         CLRF    _ints, B
0104 0000      00724         BANKSEL (_ints + 1)
0106 6B00      00725         CLRF    (_ints + 1), B
               00726 ;       .line   398; timer.c    HandleButton1Pressure();
0108 EC00 F000 00727         CALL    _HandleButton1Pressure
010C 00728 _00260_DS_:
010C 0000      00729         BANKSEL (_ints + 2)
               00730 ;       .line   400; timer.c    if (ints.button2) {
010E 5100      00731         MOVF    (_ints + 2), W, B
0110 0000      00732         BANKSEL (_ints + 3)
0112 1100      00733         IORWF   (_ints + 3), W, B
0114 B4D8      00734         BTFSC   STATUS, 2
0116 D000      00735         BRA     _00264_DS_
0118 0000      00736         BANKSEL (_ints + 2)
               00737 ;       .line   401; timer.c    ints.button2 = 0;
011A 6B00      00738         CLRF    (_ints + 2), B
011C 0000      00739         BANKSEL (_ints + 3)
011E 6B00      00740         CLRF    (_ints + 3), B
               00741 ;       .line   402; timer.c    HandleButton2Pressure();
0120 EC00 F000 00742         CALL    _HandleButton2Pressure
0124 D000      00743         BRA     _00264_DS_
0126 0012      00744         RETURN  
               00745 
               00746 ; ; Starting pCode block
               00747 S_timer__strlcpy        code
0000 00748 _strlcpy:
               00749 ;       .line   508; timer.c    strlcpy(char *dst, const char *src, size_t siz)
0000 CFD9 FFE5 00750         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00751         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00752         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00753         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00754         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00755         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00756         MOVFF   r0x04, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
001C C000 FFE5 00757         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00758         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00759         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00760         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00761         MOVFF   r0x09, POSTDEC1
0030 C000 FFE5 00762         MOVFF   r0x0a, POSTDEC1
0034 C000 FFE5 00763         MOVFF   r0x0b, POSTDEC1
0038 C000 FFE5 00764         MOVFF   r0x0c, POSTDEC1
003C C000 FFE5 00765         MOVFF   r0x0d, POSTDEC1
0040 C000 FFE5 00766         MOVFF   r0x0e, POSTDEC1
0044 C000 FFE5 00767         MOVFF   r0x0f, POSTDEC1
0048 C000 FFE5 00768         MOVFF   r0x10, POSTDEC1
004C C000 FFE5 00769         MOVFF   r0x11, POSTDEC1
0050 C000 FFE5 00770         MOVFF   r0x12, POSTDEC1
0054 C000 FFE5 00771         MOVFF   r0x13, POSTDEC1
0058 C000 FFE5 00772         MOVFF   r0x14, POSTDEC1
005C C000 FFE5 00773         MOVFF   r0x15, POSTDEC1
0060 0E02      00774         MOVLW   0x02
0062 CFDB F000 00775         MOVFF   PLUSW2, r0x00
0066 0E03      00776         MOVLW   0x03
0068 CFDB F000 00777         MOVFF   PLUSW2, r0x01
006C 0E04      00778         MOVLW   0x04
006E CFDB F000 00779         MOVFF   PLUSW2, r0x02
0072 0E05      00780         MOVLW   0x05
0074 CFDB F000 00781         MOVFF   PLUSW2, r0x03
0078 0E06      00782         MOVLW   0x06
007A CFDB F000 00783         MOVFF   PLUSW2, r0x04
007E 0E07      00784         MOVLW   0x07
0080 CFDB F000 00785         MOVFF   PLUSW2, r0x05
0084 0E08      00786         MOVLW   0x08
0086 CFDB F000 00787         MOVFF   PLUSW2, r0x06
008A 0E09      00788         MOVLW   0x09
008C CFDB F000 00789         MOVFF   PLUSW2, r0x07
               00790 ;       .line   510; timer.c    char       *d = dst;
0090 C000 F000 00791         MOVFF   r0x00, r0x08
0094 C000 F000 00792         MOVFF   r0x01, r0x09
0098 C000 F000 00793         MOVFF   r0x02, r0x0a
               00794 ;       .line   511; timer.c    const char *s = src;
009C C000 F000 00795         MOVFF   r0x03, r0x0b
00A0 C000 F000 00796         MOVFF   r0x04, r0x0c
00A4 C000 F000 00797         MOVFF   r0x05, r0x0d
               00798 ;       .line   512; timer.c    size_t      n = siz;
00A8 C000 F000 00799         MOVFF   r0x06, r0x0e
00AC C000 F000 00800         MOVFF   r0x07, r0x0f
               00801 ;       .line   515; timer.c    if (n != 0)
00B0 5000      00802         MOVF    r0x06, W
00B2 1000      00803         IORWF   r0x07, W
00B4 B4D8      00804         BTFSC   STATUS, 2
00B6 D000      00805         BRA     _00327_DS_
               00806 ;       .line   517; timer.c    while (--n != 0)
00B8 C000 F000 00807         MOVFF   r0x03, r0x10
00BC C000 F000 00808         MOVFF   r0x04, r0x11
00C0 C000 F000 00809         MOVFF   r0x05, r0x12
00C4 C000 F000 00810         MOVFF   r0x06, r0x13
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00C8 C000 F000 00811         MOVFF   r0x07, r0x14
00CC 00812 _00323_DS_:
00CC 0EFF      00813         MOVLW   0xff
00CE 2600      00814         ADDWF   r0x13, F
00D0 A0D8      00815         BTFSS   STATUS, 0
00D2 0600      00816         DECF    r0x14, F
00D4 5000      00817         MOVF    r0x13, W
00D6 1000      00818         IORWF   r0x14, W
00D8 E000      00819         BZ      _00342_DS_
               00820 ;       .line   519; timer.c    if ((*d++ = *s++) == '\0')
00DA C000 FFE9 00821         MOVFF   r0x10, FSR0L
00DE C000 FFF3 00822         MOVFF   r0x11, PRODL
00E2 5000      00823         MOVF    r0x12, W
00E4 EC00 F000 00824         CALL    __gptrget1
00E8 6E00      00825         MOVWF   r0x15
00EA 2A00      00826         INCF    r0x10, F
00EC B0D8      00827         BTFSC   STATUS, 0
00EE 2A00      00828         INCF    r0x11, F
00F0 B0D8      00829         BTFSC   STATUS, 0
00F2 2A00      00830         INCF    r0x12, F
00F4 C000 FFE5 00831         MOVFF   r0x15, POSTDEC1
00F8 C000 FFE9 00832         MOVFF   r0x00, FSR0L
00FC C000 FFF3 00833         MOVFF   r0x01, PRODL
0100 5000      00834         MOVF    r0x02, W
0102 EC00 F000 00835         CALL    __gptrput1
0106 2A00      00836         INCF    r0x00, F
0108 B0D8      00837         BTFSC   STATUS, 0
010A 2A00      00838         INCF    r0x01, F
010C B0D8      00839         BTFSC   STATUS, 0
010E 2A00      00840         INCF    r0x02, F
0110 5000      00841         MOVF    r0x15, W
0112 E100      00842         BNZ     _00323_DS_
0114 00843 _00342_DS_:
               00844 ;       .line   520; timer.c    break;
0114 C000 F000 00845         MOVFF   r0x10, r0x0b
0118 C000 F000 00846         MOVFF   r0x11, r0x0c
011C C000 F000 00847         MOVFF   r0x12, r0x0d
0120 C000 F000 00848         MOVFF   r0x00, r0x08
0124 C000 F000 00849         MOVFF   r0x01, r0x09
0128 C000 F000 00850         MOVFF   r0x02, r0x0a
012C C000 F000 00851         MOVFF   r0x13, r0x0e
0130 C000 F000 00852         MOVFF   r0x14, r0x0f
0134 00853 _00327_DS_:
               00854 ;       .line   525; timer.c    if (n == 0)
0134 5000      00855         MOVF    r0x0e, W
0136 1000      00856         IORWF   r0x0f, W
0138 E100      00857         BNZ     _00334_DS_
               00858 ;       .line   527; timer.c    if (siz != 0)
013A 5000      00859         MOVF    r0x06, W
013C 1000      00860         IORWF   r0x07, W
013E E000      00861         BZ      _00341_DS_
               00862 ;       .line   528; timer.c    *d = '\0';          /* NUL-terminate dst */
0140 0E00      00863         MOVLW   0x00
0142 6EE5      00864         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0144 C000 FFE9 00865         MOVFF   r0x08, FSR0L
0148 C000 FFF3 00866         MOVFF   r0x09, PRODL
014C 5000      00867         MOVF    r0x0a, W
014E EC00 F000 00868         CALL    __gptrput1
0152 00869 _00341_DS_:
               00870 ;       .line   529; timer.c    while (*s++)
0152 C000 F000 00871         MOVFF   r0x0b, r0x00
0156 C000 F000 00872         MOVFF   r0x0c, r0x01
015A C000 F000 00873         MOVFF   r0x0d, r0x02
015E 00874 _00330_DS_:
015E C000 FFE9 00875         MOVFF   r0x00, FSR0L
0162 C000 FFF3 00876         MOVFF   r0x01, PRODL
0166 5000      00877         MOVF    r0x02, W
0168 EC00 F000 00878         CALL    __gptrget1
016C 6E00      00879         MOVWF   r0x06
016E 2A00      00880         INCF    r0x00, F
0170 B0D8      00881         BTFSC   STATUS, 0
0172 2A00      00882         INCF    r0x01, F
0174 B0D8      00883         BTFSC   STATUS, 0
0176 2A00      00884         INCF    r0x02, F
0178 5000      00885         MOVF    r0x06, W
017A E100      00886         BNZ     _00330_DS_
017C C000 F000 00887         MOVFF   r0x00, r0x0b
0180 C000 F000 00888         MOVFF   r0x01, r0x0c
0184 C000 F000 00889         MOVFF   r0x02, r0x0d
0188 00890 _00334_DS_:
               00891 ;       .line   533; timer.c    return (s - src - 1);       /* count does not include NUL */
0188 5000      00892         MOVF    r0x03, W
018A 5C00      00893         SUBWF   r0x0b, W
018C 6E00      00894         MOVWF   r0x03
018E 5000      00895         MOVF    r0x04, W
0190 5800      00896         SUBWFB  r0x0c, W
0192 6E00      00897         MOVWF   r0x04
0194 0EFF      00898         MOVLW   0xff
0196 2600      00899         ADDWF   r0x03, F
0198 A0D8      00900         BTFSS   STATUS, 0
019A 0600      00901         DECF    r0x04, F
019C C000 FFF3 00902         MOVFF   r0x04, PRODL
01A0 5000      00903         MOVF    r0x03, W
01A2 CFE4 F000 00904         MOVFF   PREINC1, r0x15
01A6 CFE4 F000 00905         MOVFF   PREINC1, r0x14
01AA CFE4 F000 00906         MOVFF   PREINC1, r0x13
01AE CFE4 F000 00907         MOVFF   PREINC1, r0x12
01B2 CFE4 F000 00908         MOVFF   PREINC1, r0x11
01B6 CFE4 F000 00909         MOVFF   PREINC1, r0x10
01BA CFE4 F000 00910         MOVFF   PREINC1, r0x0f
01BE CFE4 F000 00911         MOVFF   PREINC1, r0x0e
01C2 CFE4 F000 00912         MOVFF   PREINC1, r0x0d
01C6 CFE4 F000 00913         MOVFF   PREINC1, r0x0c
01CA CFE4 F000 00914         MOVFF   PREINC1, r0x0b
01CE CFE4 F000 00915         MOVFF   PREINC1, r0x0a
01D2 CFE4 F000 00916         MOVFF   PREINC1, r0x09
01D6 CFE4 F000 00917         MOVFF   PREINC1, r0x08
01DA CFE4 F000 00918         MOVFF   PREINC1, r0x07
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
01DE CFE4 F000 00919         MOVFF   PREINC1, r0x06
01E2 CFE4 F000 00920         MOVFF   PREINC1, r0x05
01E6 CFE4 F000 00921         MOVFF   PREINC1, r0x04
01EA CFE4 F000 00922         MOVFF   PREINC1, r0x03
01EE CFE4 F000 00923         MOVFF   PREINC1, r0x02
01F2 CFE4 F000 00924         MOVFF   PREINC1, r0x01
01F6 CFE4 F000 00925         MOVFF   PREINC1, r0x00
01FA CFE4 FFD9 00926         MOVFF   PREINC1, FSR2L
01FE 0012      00927         RETURN  
               00928 
               00929 ; ; Starting pCode block
               00930 S_timer__DisplayString  code
0000 00931 _DisplayString:
               00932 ;       .line   456; timer.c    void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00933         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00934         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00935         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00936         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00937         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00938         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 00939         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00940         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00941         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00942         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00943         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00944         MOVFF   r0x09, POSTDEC1
0030 0E02      00945         MOVLW   0x02
0032 CFDB F000 00946         MOVFF   PLUSW2, r0x00
0036 0E03      00947         MOVLW   0x03
0038 CFDB F000 00948         MOVFF   PLUSW2, r0x01
003C 0E04      00949         MOVLW   0x04
003E CFDB F000 00950         MOVFF   PLUSW2, r0x02
0042 0E05      00951         MOVLW   0x05
0044 CFDB F000 00952         MOVFF   PLUSW2, r0x03
               00953 ;       .line   458; timer.c    BYTE        l = strlen(text);/*number of actual chars in the string*/
0048 5000      00954         MOVF    r0x03, W
004A 6EE5      00955         MOVWF   POSTDEC1
004C 5000      00956         MOVF    r0x02, W
004E 6EE5      00957         MOVWF   POSTDEC1
0050 5000      00958         MOVF    r0x01, W
0052 6EE5      00959         MOVWF   POSTDEC1
0054 EC00 F000 00960         CALL    _strlen
0058 6E00      00961         MOVWF   r0x04
005A CFF3 F000 00962         MOVFF   PRODL, r0x05
005E 0E03      00963         MOVLW   0x03
0060 26E1      00964         ADDWF   FSR1L, F
               00965 ;       .line   459; timer.c    BYTE      max = 32-pos;    /*available space on the lcd*/
0062 5000      00966         MOVF    r0x00, W
0064 0820      00967         SUBLW   0x20
0066 6E00      00968         MOVWF   r0x05
               00969 ;       .line   460; timer.c    char       *d = (char*)&LCDText[pos];
0068 6A00      00970         CLRF    r0x06
006A 0E00      00971         MOVLW   LOW(_LCDText)
006C 2600      00972         ADDWF   r0x00, F
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
006E 0E00      00973         MOVLW   HIGH(_LCDText)
0070 2200      00974         ADDWFC  r0x06, F
0072 5000      00975         MOVF    r0x06, W
0074 6E00      00976         MOVWF   r0x06
0076 5000      00977         MOVF    r0x00, W
0078 6E00      00978         MOVWF   r0x00
007A 0E80      00979         MOVLW   0x80
007C 6E00      00980         MOVWF   r0x07
               00981 ;       .line   462; timer.c    size_t      n = (l<max)?l:max;
007E 5000      00982         MOVF    r0x05, W
0080 5C00      00983         SUBWF   r0x04, W
0082 E300      00984         BNC     _00311_DS_
0084 C000 F000 00985         MOVFF   r0x05, r0x04
0088 00986 _00311_DS_:
0088 6A00      00987         CLRF    r0x05
               00988 ;       .line   464; timer.c    if (n != 0)
008A 5000      00989         MOVF    r0x04, W
008C 1000      00990         IORWF   r0x05, W
008E E000      00991         BZ      _00307_DS_
0090 00992 _00303_DS_:
               00993 ;       .line   465; timer.c    while (n-- != 0)*d++ = *s++;
0090 C000 F000 00994         MOVFF   r0x04, r0x08
0094 C000 F000 00995         MOVFF   r0x05, r0x09
0098 0EFF      00996         MOVLW   0xff
009A 2600      00997         ADDWF   r0x04, F
009C A0D8      00998         BTFSS   STATUS, 0
009E 0600      00999         DECF    r0x05, F
00A0 5000      01000         MOVF    r0x08, W
00A2 1000      01001         IORWF   r0x09, W
00A4 E000      01002         BZ      _00307_DS_
00A6 C000 FFE9 01003         MOVFF   r0x01, FSR0L
00AA C000 FFF3 01004         MOVFF   r0x02, PRODL
00AE 5000      01005         MOVF    r0x03, W
00B0 EC00 F000 01006         CALL    __gptrget1
00B4 6E00      01007         MOVWF   r0x08
00B6 2A00      01008         INCF    r0x01, F
00B8 B0D8      01009         BTFSC   STATUS, 0
00BA 2A00      01010         INCF    r0x02, F
00BC B0D8      01011         BTFSC   STATUS, 0
00BE 2A00      01012         INCF    r0x03, F
00C0 C000 FFE5 01013         MOVFF   r0x08, POSTDEC1
00C4 C000 FFE9 01014         MOVFF   r0x00, FSR0L
00C8 C000 FFF3 01015         MOVFF   r0x06, PRODL
00CC 5000      01016         MOVF    r0x07, W
00CE EC00 F000 01017         CALL    __gptrput1
00D2 2A00      01018         INCF    r0x00, F
00D4 B0D8      01019         BTFSC   STATUS, 0
00D6 2A00      01020         INCF    r0x06, F
00D8 B0D8      01021         BTFSC   STATUS, 0
00DA 2A00      01022         INCF    r0x07, F
00DC D000      01023         BRA     _00303_DS_
00DE 01024 _00307_DS_:
               01025 ;       .line   466; timer.c    LCDUpdate();
00DE EC00 F000 01026         CALL    _LCDUpdate
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00E2 CFE4 F000 01027         MOVFF   PREINC1, r0x09
00E6 CFE4 F000 01028         MOVFF   PREINC1, r0x08
00EA CFE4 F000 01029         MOVFF   PREINC1, r0x07
00EE CFE4 F000 01030         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 01031         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 01032         MOVFF   PREINC1, r0x04
00FA CFE4 F000 01033         MOVFF   PREINC1, r0x03
00FE CFE4 F000 01034         MOVFF   PREINC1, r0x02
0102 CFE4 F000 01035         MOVFF   PREINC1, r0x01
0106 CFE4 F000 01036         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 01037         MOVFF   PREINC1, FSR2L
010E 0012      01038         RETURN  
               01039 
               01040 ; ; Starting pCode block
               01041 S_timer__DisplayWORD    code
0000 01042 _DisplayWORD:
               01043 ;       .line   417; timer.c    void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0000 CFD9 FFE5 01044         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01045         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01046         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01047         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01048         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01049         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01050         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01051         MOVFF   r0x05, POSTDEC1
0020 0E02      01052         MOVLW   0x02
0022 CFDB F000 01053         MOVFF   PLUSW2, r0x00
0026 0E03      01054         MOVLW   0x03
0028 CFDB F000 01055         MOVFF   PLUSW2, r0x01
002C 0E04      01056         MOVLW   0x04
002E CFDB F000 01057         MOVFF   PLUSW2, r0x02
               01058 ;       .line   425; timer.c    ultoa(w, WDigit, radix);      
0032 6A00      01059         CLRF    r0x03
0034 6A00      01060         CLRF    r0x04
0036 0E0A      01061         MOVLW   0x0a
0038 6EE5      01062         MOVWF   POSTDEC1
003A 0E00      01063         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
003C 6EE5      01064         MOVWF   POSTDEC1
003E 0E00      01065         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0040 6EE5      01066         MOVWF   POSTDEC1
0042 5000      01067         MOVF    r0x04, W
0044 6EE5      01068         MOVWF   POSTDEC1
0046 5000      01069         MOVF    r0x03, W
0048 6EE5      01070         MOVWF   POSTDEC1
004A 5000      01071         MOVF    r0x02, W
004C 6EE5      01072         MOVWF   POSTDEC1
004E 5000      01073         MOVF    r0x01, W
0050 6EE5      01074         MOVWF   POSTDEC1
0052 EC00 F000 01075         CALL    _ultoa
0056 0E07      01076         MOVLW   0x07
0058 26E1      01077         ADDWF   FSR1L, F
               01078 ;       .line   426; timer.c    for(j = 0; j < strlen((char*)WDigit); j++)
005A 6A00      01079         CLRF    r0x01
005C 01080 _00287_DS_:
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
005C 0E00      01081         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
005E 6E00      01082         MOVWF   r0x03
0060 0E00      01083         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
0062 6E00      01084         MOVWF   r0x02
0064 0E80      01085         MOVLW   0x80
0066 6E00      01086         MOVWF   r0x04
0068 5000      01087         MOVF    r0x04, W
006A 6EE5      01088         MOVWF   POSTDEC1
006C 5000      01089         MOVF    r0x03, W
006E 6EE5      01090         MOVWF   POSTDEC1
0070 5000      01091         MOVF    r0x02, W
0072 6EE5      01092         MOVWF   POSTDEC1
0074 EC00 F000 01093         CALL    _strlen
0078 6E00      01094         MOVWF   r0x02
007A CFF3 F000 01095         MOVFF   PRODL, r0x03
007E 0E03      01096         MOVLW   0x03
0080 26E1      01097         ADDWF   FSR1L, F
0082 C000 F000 01098         MOVFF   r0x01, r0x04
0086 6A00      01099         CLRF    r0x05
0088 5000      01100         MOVF    r0x05, W
008A 0F80      01101         ADDLW   0x80
008C 6EF3      01102         MOVWF   PRODL
008E 5000      01103         MOVF    r0x03, W
0090 0F80      01104         ADDLW   0x80
0092 5CF3      01105         SUBWF   PRODL, W
0094 E100      01106         BNZ     _00297_DS_
0096 5000      01107         MOVF    r0x02, W
0098 5C00      01108         SUBWF   r0x04, W
009A 01109 _00297_DS_:
009A E200      01110         BC      _00290_DS_
               01111 ;       .line   428; timer.c    LCDText[LCDPos++] = WDigit[j];
009C C000 F000 01112         MOVFF   r0x00, r0x02
00A0 2A00      01113         INCF    r0x00, F
00A2 6A00      01114         CLRF    r0x03
00A4 0E00      01115         MOVLW   LOW(_LCDText)
00A6 2600      01116         ADDWF   r0x02, F
00A8 0E00      01117         MOVLW   HIGH(_LCDText)
00AA 2200      01118         ADDWFC  r0x03, F
00AC 0E00      01119         MOVLW   LOW(_DisplayWORD_WDigit_1_1)
00AE 2400      01120         ADDWF   r0x01, W
00B0 6E00      01121         MOVWF   r0x04
00B2 6A00      01122         CLRF    r0x05
00B4 0E00      01123         MOVLW   HIGH(_DisplayWORD_WDigit_1_1)
00B6 2200      01124         ADDWFC  r0x05, F
00B8 C000 FFE9 01125         MOVFF   r0x04, FSR0L
00BC C000 FFEA 01126         MOVFF   r0x05, FSR0H
00C0 CFEF F000 01127         MOVFF   INDF0, r0x04
00C4 C000 FFE9 01128         MOVFF   r0x02, FSR0L
00C8 C000 FFEA 01129         MOVFF   r0x03, FSR0H
00CC C000 FFEF 01130         MOVFF   r0x04, INDF0
               01131 ;       .line   426; timer.c    for(j = 0; j < strlen((char*)WDigit); j++)
00D0 2A00      01132         INCF    r0x01, F
00D2 D000      01133         BRA     _00287_DS_
00D4 01134 _00290_DS_:
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01135 ;       .line   430; timer.c    if(LCDPos < 32u)
00D4 C000 F000 01136         MOVFF   r0x00, r0x01
00D8 6A00      01137         CLRF    r0x02
00DA 0E00      01138         MOVLW   0x00
00DC 5C00      01139         SUBWF   r0x02, W
00DE E100      01140         BNZ     _00298_DS_
00E0 0E20      01141         MOVLW   0x20
00E2 5C00      01142         SUBWF   r0x01, W
00E4 01143 _00298_DS_:
00E4 E200      01144         BC      _00286_DS_
               01145 ;       .line   431; timer.c    LCDText[LCDPos] = 0;
00E6 6A00      01146         CLRF    r0x01
00E8 0E00      01147         MOVLW   LOW(_LCDText)
00EA 2600      01148         ADDWF   r0x00, F
00EC 0E00      01149         MOVLW   HIGH(_LCDText)
00EE 2200      01150         ADDWFC  r0x01, F
00F0 C000 FFE9 01151         MOVFF   r0x00, FSR0L
00F4 C000 FFEA 01152         MOVFF   r0x01, FSR0H
00F8 0E00      01153         MOVLW   0x00
00FA 6EEF      01154         MOVWF   INDF0
00FC 01155 _00286_DS_:
               01156 ;       .line   432; timer.c    LCDUpdate();
00FC EC00 F000 01157         CALL    _LCDUpdate
0100 CFE4 F000 01158         MOVFF   PREINC1, r0x05
0104 CFE4 F000 01159         MOVFF   PREINC1, r0x04
0108 CFE4 F000 01160         MOVFF   PREINC1, r0x03
010C CFE4 F000 01161         MOVFF   PREINC1, r0x02
0110 CFE4 F000 01162         MOVFF   PREINC1, r0x01
0114 CFE4 F000 01163         MOVFF   PREINC1, r0x00
0118 CFE4 FFD9 01164         MOVFF   PREINC1, FSR2L
011C 0012      01165         RETURN  
               01166 
               01167 ; ; Starting pCode block
               01168 S_timer__HighISR        code
0000 01169 _HighISR:
               01170 ;       .line   322; timer.c    void HighISR(void) __interrupt (1) {
0000 CFE8 FFE5 01171         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 01172         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 01173         MOVFF   BSR, POSTDEC1
000C CFF3 FFE5 01174         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 01175         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 01176         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 01177         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 01178         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 01179         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 01180         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 01181         MOVFF   FSR1L, FSR2L
002C C000 FFE5 01182         MOVFF   r0x00, POSTDEC1
               01183 ;       .line   323; timer.c    if(PIR1bits.TMR1IF == 1) {
0030 6A00      01184         CLRF    r0x00
0032 B000      01185         BTFSC   _PIR1bits, 0
0034 2A00      01186         INCF    r0x00, F
0036 5000      01187         MOVF    r0x00, W
0038 0A01      01188         XORLW   0x01
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003A E100      01189         BNZ     _00224_DS_
               01190 ;       .line   324; timer.c    TMR1L                   =       (0x10000 - EXTCLOCK_FREQ/2) & 0xff;     // timer1 initial value
003C 6A00      01191         CLRF    _TMR1L
               01192 ;       .line   325; timer.c    TMR1H                   =       (0x10000 - EXTCLOCK_FREQ/2) >> 8;
003E 0EC0      01193         MOVLW   0xc0
0040 6E00      01194         MOVWF   _TMR1H
               01195 ;       .line   326; timer.c    flags.half_sec = 1;
0042 0E01      01196         MOVLW   0x01
0044 0000      01197         BANKSEL (_flags + 6)
0046 6F00      01198         MOVWF   (_flags + 6), B
0048 0000      01199         BANKSEL (_flags + 7)
004A 6B00      01200         CLRF    (_flags + 7), B
               01201 ;       .line   327; timer.c    if(LATJbits.LATJ0)
004C A000      01202         BTFSS   _LATJbits, 0
004E D000      01203         BRA     _00222_DS_
               01204 ;       .line   328; timer.c    flags.one_sec = 1;
0050 0E01      01205         MOVLW   0x01
0052 0000      01206         BANKSEL (_flags + 8)
0054 6F00      01207         MOVWF   (_flags + 8), B
0056 0000      01208         BANKSEL (_flags + 9)
0058 6B00      01209         CLRF    (_flags + 9), B
005A 01210 _00222_DS_:
               01211 ;       .line   329; timer.c    PIR1bits.TMR1IF =       0;
005A 9000      01212         BCF     _PIR1bits, 0
005C 01213 _00224_DS_:
               01214 ;       .line   331; timer.c    if(INTCON3bits.INT1F == 1) { // Button 2
005C 6A00      01215         CLRF    r0x00
005E B000      01216         BTFSC   _INTCON3bits, 0
0060 2A00      01217         INCF    r0x00, F
0062 5000      01218         MOVF    r0x00, W
0064 0A01      01219         XORLW   0x01
0066 E100      01220         BNZ     _00226_DS_
               01221 ;       .line   332; timer.c    ints.button2 = 1;
0068 0E01      01222         MOVLW   0x01
006A 0000      01223         BANKSEL (_ints + 2)
006C 6F00      01224         MOVWF   (_ints + 2), B
006E 0000      01225         BANKSEL (_ints + 3)
0070 6B00      01226         CLRF    (_ints + 3), B
               01227 ;       .line   333; timer.c    INTCON3bits.INT1F = 0;
0072 9000      01228         BCF     _INTCON3bits, 0
0074 01229 _00226_DS_:
               01230 ;       .line   335; timer.c    if (INTCON3bits.INT3F == 1) { // Button 1
0074 6A00      01231         CLRF    r0x00
0076 B400      01232         BTFSC   _INTCON3bits, 2
0078 2A00      01233         INCF    r0x00, F
007A 5000      01234         MOVF    r0x00, W
007C 0A01      01235         XORLW   0x01
007E E100      01236         BNZ     _00229_DS_
               01237 ;       .line   336; timer.c    ints.button1 = 1;
0080 0E01      01238         MOVLW   0x01
0082 0000      01239         BANKSEL _ints
0084 6F00      01240         MOVWF   _ints, B
0086 0000      01241         BANKSEL (_ints + 1)
0088 6B00      01242         CLRF    (_ints + 1), B
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01243 ;       .line   337; timer.c    INTCON3bits.INT3F = 0;
008A 9400      01244         BCF     _INTCON3bits, 2
008C 01245 _00229_DS_:
008C CFE4 F000 01246         MOVFF   PREINC1, r0x00
0090 CFE4 FFD9 01247         MOVFF   PREINC1, FSR2L
0094 CFE4 FFFB 01248         MOVFF   PREINC1, PCLATU
0098 CFE4 FFFA 01249         MOVFF   PREINC1, PCLATH
009C CFE4 FFEA 01250         MOVFF   PREINC1, FSR0H
00A0 CFE4 FFE9 01251         MOVFF   PREINC1, FSR0L
00A4 CFE4 FFF4 01252         MOVFF   PREINC1, PRODH
00A8 CFE4 FFF3 01253         MOVFF   PREINC1, PRODL
00AC CFE4 FFE0 01254         MOVFF   PREINC1, BSR
00B0 CFE4 FFD8 01255         MOVFF   PREINC1, STATUS
00B4 CFE4 FFE8 01256         MOVFF   PREINC1, WREG
00B8 0010      01257         RETFIE  
               01258 
               01259 ; ; Starting pCode block
               01260 S_timer__UpdateClock    code
0000 01261 _UpdateClock:
               01262 ;       .line   300; timer.c    void UpdateClock() {
0000 CFD9 FFE5 01263         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01264         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01265         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01266         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01267         MOVFF   r0x02, POSTDEC1
               01268 ;       .line   301; timer.c    UpdateTimeValue(&clock.seconds, MAX_SECONDS, 6);
0014 0E00      01269         MOVLW   HIGH(_clock + 4)
0016 6E00      01270         MOVWF   r0x01
0018 0E00      01271         MOVLW   LOW(_clock + 4)
001A 6E00      01272         MOVWF   r0x00
001C 0E80      01273         MOVLW   0x80
001E 6E00      01274         MOVWF   r0x02
0020 0E00      01275         MOVLW   0x00
0022 6EE5      01276         MOVWF   POSTDEC1
0024 0E06      01277         MOVLW   0x06
0026 6EE5      01278         MOVWF   POSTDEC1
0028 0E00      01279         MOVLW   0x00
002A 6EE5      01280         MOVWF   POSTDEC1
002C 0E3B      01281         MOVLW   0x3b
002E 6EE5      01282         MOVWF   POSTDEC1
0030 5000      01283         MOVF    r0x02, W
0032 6EE5      01284         MOVWF   POSTDEC1
0034 5000      01285         MOVF    r0x01, W
0036 6EE5      01286         MOVWF   POSTDEC1
0038 5000      01287         MOVF    r0x00, W
003A 6EE5      01288         MOVWF   POSTDEC1
003C EC00 F000 01289         CALL    _UpdateTimeValue
0040 0E07      01290         MOVLW   0x07
0042 26E1      01291         ADDWF   FSR1L, F
0044 0000      01292         BANKSEL (_clock + 4)
               01293 ;       .line   302; timer.c    if (!clock.seconds) { // new minute
0046 5100      01294         MOVF    (_clock + 4), W, B
0048 0000      01295         BANKSEL (_clock + 5)
004A 1100      01296         IORWF   (_clock + 5), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004C A4D8      01297         BTFSS   STATUS, 2
004E D000      01298         BRA     _00201_DS_
               01299 ;       .line   303; timer.c    UpdateTimeValue(&clock.minutes, MAX_MINUTES, 3);
0050 0E00      01300         MOVLW   HIGH(_clock + 2)
0052 6E00      01301         MOVWF   r0x01
0054 0E00      01302         MOVLW   LOW(_clock + 2)
0056 6E00      01303         MOVWF   r0x00
0058 0E80      01304         MOVLW   0x80
005A 6E00      01305         MOVWF   r0x02
005C 0E00      01306         MOVLW   0x00
005E 6EE5      01307         MOVWF   POSTDEC1
0060 0E03      01308         MOVLW   0x03
0062 6EE5      01309         MOVWF   POSTDEC1
0064 0E00      01310         MOVLW   0x00
0066 6EE5      01311         MOVWF   POSTDEC1
0068 0E3B      01312         MOVLW   0x3b
006A 6EE5      01313         MOVWF   POSTDEC1
006C 5000      01314         MOVF    r0x02, W
006E 6EE5      01315         MOVWF   POSTDEC1
0070 5000      01316         MOVF    r0x01, W
0072 6EE5      01317         MOVWF   POSTDEC1
0074 5000      01318         MOVF    r0x00, W
0076 6EE5      01319         MOVWF   POSTDEC1
0078 EC00 F000 01320         CALL    _UpdateTimeValue
007C 0E07      01321         MOVLW   0x07
007E 26E1      01322         ADDWF   FSR1L, F
               01323 ;       .line   304; timer.c    time_value[5] = ':';
0080 0E3A      01324         MOVLW   0x3a
0082 0000      01325         BANKSEL (_time_value + 5)
0084 6F00      01326         MOVWF   (_time_value + 5), B
0086 0000      01327         BANKSEL (_clock + 2)
               01328 ;       .line   305; timer.c    if (!clock.minutes) { // new hour
0088 5100      01329         MOVF    (_clock + 2), W, B
008A 0000      01330         BANKSEL (_clock + 3)
008C 1100      01331         IORWF   (_clock + 3), W, B
008E E100      01332         BNZ     _00196_DS_
               01333 ;       .line   306; timer.c    UpdateTimeValue(&clock.hours, MAX_HOURS, 0);
0090 0E00      01334         MOVLW   HIGH(_clock)
0092 6E00      01335         MOVWF   r0x01
0094 0E00      01336         MOVLW   LOW(_clock)
0096 6E00      01337         MOVWF   r0x00
0098 0E80      01338         MOVLW   0x80
009A 6E00      01339         MOVWF   r0x02
009C 0E00      01340         MOVLW   0x00
009E 6EE5      01341         MOVWF   POSTDEC1
00A0 0E00      01342         MOVLW   0x00
00A2 6EE5      01343         MOVWF   POSTDEC1
00A4 0E00      01344         MOVLW   0x00
00A6 6EE5      01345         MOVWF   POSTDEC1
00A8 0E17      01346         MOVLW   0x17
00AA 6EE5      01347         MOVWF   POSTDEC1
00AC 5000      01348         MOVF    r0x02, W
00AE 6EE5      01349         MOVWF   POSTDEC1
00B0 5000      01350         MOVF    r0x01, W
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B2 6EE5      01351         MOVWF   POSTDEC1
00B4 5000      01352         MOVF    r0x00, W
00B6 6EE5      01353         MOVWF   POSTDEC1
00B8 EC00 F000 01354         CALL    _UpdateTimeValue
00BC 0E07      01355         MOVLW   0x07
00BE 26E1      01356         ADDWF   FSR1L, F
               01357 ;       .line   307; timer.c    time_value[2] = ':';
00C0 0E3A      01358         MOVLW   0x3a
00C2 0000      01359         BANKSEL (_time_value + 2)
00C4 6F00      01360         MOVWF   (_time_value + 2), B
00C6 01361 _00196_DS_:
00C6 0000      01362         BANKSEL (_clock + 2)
               01363 ;       .line   309; timer.c    if((clock.minutes == timer.minutes) && (clock.hours == timer.hours))
00C8 5100      01364         MOVF    (_clock + 2), W, B
00CA 0000      01365         BANKSEL (_timer + 2)
00CC 1900      01366         XORWF   (_timer + 2), W, B
00CE E100      01367         BNZ     _00213_DS_
00D0 0000      01368         BANKSEL (_clock + 3)
00D2 5100      01369         MOVF    (_clock + 3), W, B
00D4 0000      01370         BANKSEL (_timer + 3)
00D6 1900      01371         XORWF   (_timer + 3), W, B
00D8 E000      01372         BZ      _00214_DS_
00DA 01373 _00213_DS_:
00DA D000      01374         BRA     _00201_DS_
00DC 01375 _00214_DS_:
00DC 0000      01376         BANKSEL _clock
00DE 5100      01377         MOVF    _clock, W, B
00E0 0000      01378         BANKSEL _timer
00E2 1900      01379         XORWF   _timer, W, B
00E4 E100      01380         BNZ     _00215_DS_
00E6 0000      01381         BANKSEL (_clock + 1)
00E8 5100      01382         MOVF    (_clock + 1), W, B
00EA 0000      01383         BANKSEL (_timer + 1)
00EC 1900      01384         XORWF   (_timer + 1), W, B
00EE E000      01385         BZ      _00216_DS_
00F0 01386 _00215_DS_:
00F0 D000      01387         BRA     _00201_DS_
00F2 01388 _00216_DS_:
               01389 ;       .line   310; timer.c    flags.alarm = 1;
00F2 0E01      01390         MOVLW   0x01
00F4 0000      01391         BANKSEL (_flags + 10)
00F6 6F00      01392         MOVWF   (_flags + 10), B
00F8 0000      01393         BANKSEL (_flags + 11)
00FA 6B00      01394         CLRF    (_flags + 11), B
00FC 01395 _00201_DS_:
00FC 0000      01396         BANKSEL (_flags + 2)
               01397 ;       .line   312; timer.c    if (!flags.awake_setting_procedure      && !flags.time_setting_procedure)
00FE 5100      01398         MOVF    (_flags + 2), W, B
0100 0000      01399         BANKSEL (_flags + 3)
0102 1100      01400         IORWF   (_flags + 3), W, B
0104 E100      01401         BNZ     _00205_DS_
0106 0000      01402         BANKSEL _flags
0108 5100      01403         MOVF    _flags, W, B
010A 0000      01404         BANKSEL (_flags + 1)
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
010C 1100      01405         IORWF   (_flags + 1), W, B
010E E100      01406         BNZ     _00205_DS_
               01407 ;       .line   313; timer.c    DisplayString(16, &time_value[0]);
0110 0E00      01408         MOVLW   HIGH(_time_value)
0112 6E00      01409         MOVWF   r0x01
0114 0E00      01410         MOVLW   LOW(_time_value)
0116 6E00      01411         MOVWF   r0x00
0118 0E80      01412         MOVLW   0x80
011A 6E00      01413         MOVWF   r0x02
011C 5000      01414         MOVF    r0x02, W
011E 6EE5      01415         MOVWF   POSTDEC1
0120 5000      01416         MOVF    r0x01, W
0122 6EE5      01417         MOVWF   POSTDEC1
0124 5000      01418         MOVF    r0x00, W
0126 6EE5      01419         MOVWF   POSTDEC1
0128 0E10      01420         MOVLW   0x10
012A 6EE5      01421         MOVWF   POSTDEC1
012C EC00 F000 01422         CALL    _DisplayString
0130 0E04      01423         MOVLW   0x04
0132 26E1      01424         ADDWF   FSR1L, F
0134 01425 _00205_DS_:
0134 CFE4 F000 01426         MOVFF   PREINC1, r0x02
0138 CFE4 F000 01427         MOVFF   PREINC1, r0x01
013C CFE4 F000 01428         MOVFF   PREINC1, r0x00
0140 CFE4 FFD9 01429         MOVFF   PREINC1, FSR2L
0144 0012      01430         RETURN  
               01431 
               01432 ; ; Starting pCode block
               01433 S_timer__UpdateDisplay  code
0000 01434 _UpdateDisplay:
               01435 ;       .line   272; timer.c    void UpdateDisplay(enum display_states state) {
0000 CFD9 FFE5 01436         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01437         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01438         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01439         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01440         MOVFF   r0x02, POSTDEC1
0014 0E02      01441         MOVLW   0x02
0016 CFDB F000 01442         MOVFF   PLUSW2, r0x00
               01443 ;       .line   273; timer.c    switch (state) {
001A 0E03      01444         MOVLW   0x03
001C 5C00      01445         SUBWF   r0x00, W
001E B0D8      01446         BTFSC   STATUS, 0
0020 D000      01447         BRA     _00186_DS_
0022 C000 FFE5 01448         MOVFF   r0x03, POSTDEC1
0026 C000 FFE5 01449         MOVFF   r0x04, POSTDEC1
002A 6A00      01450         CLRF    r0x04
002C 3400      01451         RLCF    r0x00, W
002E 3600      01452         RLCF    r0x04, F
0030 34E8      01453         RLCF    WREG, W
0032 3600      01454         RLCF    r0x04, F
0034 0BFC      01455         ANDLW   0xfc
0036 6E00      01456         MOVWF   r0x03
0038 0E00      01457         MOVLW   UPPER(_00190_DS_)
003A 6EFB      01458         MOVWF   PCLATU
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003C 0E00      01459         MOVLW   HIGH(_00190_DS_)
003E 6EFA      01460         MOVWF   PCLATH
0040 0E00      01461         MOVLW   LOW(_00190_DS_)
0042 2600      01462         ADDWF   r0x03, F
0044 5000      01463         MOVF    r0x04, W
0046 22FA      01464         ADDWFC  PCLATH, F
0048 B0D8      01465         BTFSC   STATUS, 0
004A 2AFB      01466         INCF    PCLATU, F
004C 5000      01467         MOVF    r0x03, W
004E CFE4 F000 01468         MOVFF   PREINC1, r0x04
0052 CFE4 F000 01469         MOVFF   PREINC1, r0x03
0056 6EF9      01470         MOVWF   PCL
0058 01471 _00190_DS_:
0058 EF00 F000 01472         GOTO    _00182_DS_
005C EF00 F000 01473         GOTO    _00183_DS_
0060 EF00 F000 01474         GOTO    _00184_DS_
0064 01475 _00182_DS_:
               01476 ;       .line   275; timer.c    DisplayString(0,"Enter the time:");
0064 0E00      01477         MOVLW   UPPER(__str_0)
0066 6EE5      01478         MOVWF   POSTDEC1
0068 0E00      01479         MOVLW   HIGH(__str_0)
006A 6EE5      01480         MOVWF   POSTDEC1
006C 0E00      01481         MOVLW   LOW(__str_0)
006E 6EE5      01482         MOVWF   POSTDEC1
0070 0E00      01483         MOVLW   0x00
0072 6EE5      01484         MOVWF   POSTDEC1
0074 EC00 F000 01485         CALL    _DisplayString
0078 0E04      01486         MOVLW   0x04
007A 26E1      01487         ADDWF   FSR1L, F
               01488 ;       .line   276; timer.c    DisplayString(16, &time_value[0]);
007C 0E00      01489         MOVLW   HIGH(_time_value)
007E 6E00      01490         MOVWF   r0x01
0080 0E00      01491         MOVLW   LOW(_time_value)
0082 6E00      01492         MOVWF   r0x00
0084 0E80      01493         MOVLW   0x80
0086 6E00      01494         MOVWF   r0x02
0088 5000      01495         MOVF    r0x02, W
008A 6EE5      01496         MOVWF   POSTDEC1
008C 5000      01497         MOVF    r0x01, W
008E 6EE5      01498         MOVWF   POSTDEC1
0090 5000      01499         MOVF    r0x00, W
0092 6EE5      01500         MOVWF   POSTDEC1
0094 0E10      01501         MOVLW   0x10
0096 6EE5      01502         MOVWF   POSTDEC1
0098 EC00 F000 01503         CALL    _DisplayString
009C 0E04      01504         MOVLW   0x04
009E 26E1      01505         ADDWF   FSR1L, F
               01506 ;       .line   277; timer.c    DisplayString(21,"   ");
00A0 0E00      01507         MOVLW   UPPER(__str_1)
00A2 6EE5      01508         MOVWF   POSTDEC1
00A4 0E00      01509         MOVLW   HIGH(__str_1)
00A6 6EE5      01510         MOVWF   POSTDEC1
00A8 0E00      01511         MOVLW   LOW(__str_1)
00AA 6EE5      01512         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00AC 0E15      01513         MOVLW   0x15
00AE 6EE5      01514         MOVWF   POSTDEC1
00B0 EC00 F000 01515         CALL    _DisplayString
00B4 0E04      01516         MOVLW   0x04
00B6 26E1      01517         ADDWF   FSR1L, F
               01518 ;       .line   278; timer.c    break;
00B8 D000      01519         BRA     _00186_DS_
00BA 01520 _00183_DS_:
               01521 ;       .line   280; timer.c    DisplayString(0, "Enter the awake ");
00BA 0E00      01522         MOVLW   UPPER(__str_2)
00BC 6EE5      01523         MOVWF   POSTDEC1
00BE 0E00      01524         MOVLW   HIGH(__str_2)
00C0 6EE5      01525         MOVWF   POSTDEC1
00C2 0E00      01526         MOVLW   LOW(__str_2)
00C4 6EE5      01527         MOVWF   POSTDEC1
00C6 0E00      01528         MOVLW   0x00
00C8 6EE5      01529         MOVWF   POSTDEC1
00CA EC00 F000 01530         CALL    _DisplayString
00CE 0E04      01531         MOVLW   0x04
00D0 26E1      01532         ADDWF   FSR1L, F
               01533 ;       .line   281; timer.c    DisplayString(16, "time: ");
00D2 0E00      01534         MOVLW   UPPER(__str_3)
00D4 6EE5      01535         MOVWF   POSTDEC1
00D6 0E00      01536         MOVLW   HIGH(__str_3)
00D8 6EE5      01537         MOVWF   POSTDEC1
00DA 0E00      01538         MOVLW   LOW(__str_3)
00DC 6EE5      01539         MOVWF   POSTDEC1
00DE 0E10      01540         MOVLW   0x10
00E0 6EE5      01541         MOVWF   POSTDEC1
00E2 EC00 F000 01542         CALL    _DisplayString
00E6 0E04      01543         MOVLW   0x04
00E8 26E1      01544         ADDWF   FSR1L, F
               01545 ;       .line   282; timer.c    DisplayString(22, &time_value[0]);
00EA 0E00      01546         MOVLW   HIGH(_time_value)
00EC 6E00      01547         MOVWF   r0x01
00EE 0E00      01548         MOVLW   LOW(_time_value)
00F0 6E00      01549         MOVWF   r0x00
00F2 0E80      01550         MOVLW   0x80
00F4 6E00      01551         MOVWF   r0x02
00F6 5000      01552         MOVF    r0x02, W
00F8 6EE5      01553         MOVWF   POSTDEC1
00FA 5000      01554         MOVF    r0x01, W
00FC 6EE5      01555         MOVWF   POSTDEC1
00FE 5000      01556         MOVF    r0x00, W
0100 6EE5      01557         MOVWF   POSTDEC1
0102 0E16      01558         MOVLW   0x16
0104 6EE5      01559         MOVWF   POSTDEC1
0106 EC00 F000 01560         CALL    _DisplayString
010A 0E04      01561         MOVLW   0x04
010C 26E1      01562         ADDWF   FSR1L, F
               01563 ;       .line   283; timer.c    break;
010E D000      01564         BRA     _00186_DS_
0110 01565 _00184_DS_:
               01566 ;       .line   285; timer.c    DisplayString(0, "                ");
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0110 0E00      01567         MOVLW   UPPER(__str_4)
0112 6EE5      01568         MOVWF   POSTDEC1
0114 0E00      01569         MOVLW   HIGH(__str_4)
0116 6EE5      01570         MOVWF   POSTDEC1
0118 0E00      01571         MOVLW   LOW(__str_4)
011A 6EE5      01572         MOVWF   POSTDEC1
011C 0E00      01573         MOVLW   0x00
011E 6EE5      01574         MOVWF   POSTDEC1
0120 EC00 F000 01575         CALL    _DisplayString
0124 0E04      01576         MOVLW   0x04
0126 26E1      01577         ADDWF   FSR1L, F
               01578 ;       .line   286; timer.c    DisplayString(16 + 6, "         ");
0128 0E00      01579         MOVLW   UPPER(__str_5)
012A 6EE5      01580         MOVWF   POSTDEC1
012C 0E00      01581         MOVLW   HIGH(__str_5)
012E 6EE5      01582         MOVWF   POSTDEC1
0130 0E00      01583         MOVLW   LOW(__str_5)
0132 6EE5      01584         MOVWF   POSTDEC1
0134 0E16      01585         MOVLW   0x16
0136 6EE5      01586         MOVWF   POSTDEC1
0138 EC00 F000 01587         CALL    _DisplayString
013C 0E04      01588         MOVLW   0x04
013E 26E1      01589         ADDWF   FSR1L, F
               01590 ;       .line   287; timer.c    DisplayString(16, &time_value[0]);
0140 0E00      01591         MOVLW   HIGH(_time_value)
0142 6E00      01592         MOVWF   r0x01
0144 0E00      01593         MOVLW   LOW(_time_value)
0146 6E00      01594         MOVWF   r0x00
0148 0E80      01595         MOVLW   0x80
014A 6E00      01596         MOVWF   r0x02
014C 5000      01597         MOVF    r0x02, W
014E 6EE5      01598         MOVWF   POSTDEC1
0150 5000      01599         MOVF    r0x01, W
0152 6EE5      01600         MOVWF   POSTDEC1
0154 5000      01601         MOVF    r0x00, W
0156 6EE5      01602         MOVWF   POSTDEC1
0158 0E10      01603         MOVLW   0x10
015A 6EE5      01604         MOVWF   POSTDEC1
015C EC00 F000 01605         CALL    _DisplayString
0160 0E04      01606         MOVLW   0x04
0162 26E1      01607         ADDWF   FSR1L, F
0164 01608 _00186_DS_:
               01609 ;       .line   289; timer.c    }
0164 CFE4 F000 01610         MOVFF   PREINC1, r0x02
0168 CFE4 F000 01611         MOVFF   PREINC1, r0x01
016C CFE4 F000 01612         MOVFF   PREINC1, r0x00
0170 CFE4 FFD9 01613         MOVFF   PREINC1, FSR2L
0174 0012      01614         RETURN  
               01615 
               01616 ; ; Starting pCode block
               01617 S_timer__AssignDefaultValues    code
0000 01618 _AssignDefaultValues:
               01619 ;       .line   239; timer.c    void AssignDefaultValues() {
0000 CFD9 FFE5 01620         MOVFF   FSR2L, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0004 CFE1 FFD9 01621         MOVFF   FSR1L, FSR2L
0008 0000      01622         BANKSEL _ints
               01623 ;       .line   241; timer.c    ints.button1 = 0;
000A 6B00      01624         CLRF    _ints, B
000C 0000      01625         BANKSEL (_ints + 1)
000E 6B00      01626         CLRF    (_ints + 1), B
0010 0000      01627         BANKSEL (_ints + 2)
               01628 ;       .line   242; timer.c    ints.button2 = 0;
0012 6B00      01629         CLRF    (_ints + 2), B
0014 0000      01630         BANKSEL (_ints + 3)
0016 6B00      01631         CLRF    (_ints + 3), B
               01632 ;       .line   244; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0018 0E30      01633         MOVLW   0x30
001A 0000      01634         BANKSEL (_time_value + 4)
001C 6F00      01635         MOVWF   (_time_value + 4), B
001E 0E30      01636         MOVLW   0x30
0020 0000      01637         BANKSEL (_time_value + 3)
0022 6F00      01638         MOVWF   (_time_value + 3), B
0024 0E30      01639         MOVLW   0x30
0026 0000      01640         BANKSEL (_time_value + 1)
0028 6F00      01641         MOVWF   (_time_value + 1), B
002A 0E30      01642         MOVLW   0x30
002C 0000      01643         BANKSEL _time_value
002E 6F00      01644         MOVWF   _time_value, B
               01645 ;       .line   245; timer.c    time_value[2] = ':';
0030 0E3A      01646         MOVLW   0x3a
0032 0000      01647         BANKSEL (_time_value + 2)
0034 6F00      01648         MOVWF   (_time_value + 2), B
0036 0000      01649         BANKSEL (_time_value + 5)
               01650 ;       .line   246; timer.c    time_value[5] = '\0';
0038 6B00      01651         CLRF    (_time_value + 5), B
003A 0000      01652         BANKSEL _in_setting
               01653 ;       .line   247; timer.c    in_setting = HOURS; // start from setting the hours
003C 6B00      01654         CLRF    _in_setting, B
               01655 ;       .line   249; timer.c    flags.time_setting_procedure = 1;
003E 0E01      01656         MOVLW   0x01
0040 0000      01657         BANKSEL _flags
0042 6F00      01658         MOVWF   _flags, B
0044 0000      01659         BANKSEL (_flags + 1)
0046 6B00      01660         CLRF    (_flags + 1), B
0048 0000      01661         BANKSEL (_flags + 2)
               01662 ;       .line   250; timer.c    flags.awake_setting_procedure = 0;
004A 6B00      01663         CLRF    (_flags + 2), B
004C 0000      01664         BANKSEL (_flags + 3)
004E 6B00      01665         CLRF    (_flags + 3), B
0050 0000      01666         BANKSEL (_flags + 4)
               01667 ;       .line   251; timer.c    flags.set = 0;
0052 6B00      01668         CLRF    (_flags + 4), B
0054 0000      01669         BANKSEL (_flags + 5)
0056 6B00      01670         CLRF    (_flags + 5), B
               01671 ;       .line   252; timer.c    flags.half_sec = 1;
0058 0E01      01672         MOVLW   0x01
005A 0000      01673         BANKSEL (_flags + 6)
005C 6F00      01674         MOVWF   (_flags + 6), B
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
005E 0000      01675         BANKSEL (_flags + 7)
0060 6B00      01676         CLRF    (_flags + 7), B
0062 0000      01677         BANKSEL (_flags + 8)
               01678 ;       .line   253; timer.c    flags.one_sec = 0;
0064 6B00      01679         CLRF    (_flags + 8), B
0066 0000      01680         BANKSEL (_flags + 9)
0068 6B00      01681         CLRF    (_flags + 9), B
006A 0000      01682         BANKSEL (_flags + 10)
               01683 ;       .line   254; timer.c    flags.alarm = 0;
006C 6B00      01684         CLRF    (_flags + 10), B
006E 0000      01685         BANKSEL (_flags + 11)
0070 6B00      01686         CLRF    (_flags + 11), B
0072 0000      01687         BANKSEL _timer
               01688 ;       .line   256; timer.c    timer.hours = 0;
0074 6B00      01689         CLRF    _timer, B
0076 0000      01690         BANKSEL (_timer + 1)
0078 6B00      01691         CLRF    (_timer + 1), B
007A 0000      01692         BANKSEL (_timer + 2)
               01693 ;       .line   257; timer.c    timer.minutes = 0;
007C 6B00      01694         CLRF    (_timer + 2), B
007E 0000      01695         BANKSEL (_timer + 3)
0080 6B00      01696         CLRF    (_timer + 3), B
0082 0000      01697         BANKSEL _setting
               01698 ;       .line   259; timer.c    setting.hours = 0;
0084 6B00      01699         CLRF    _setting, B
0086 0000      01700         BANKSEL (_setting + 1)
0088 6B00      01701         CLRF    (_setting + 1), B
008A 0000      01702         BANKSEL (_setting + 2)
               01703 ;       .line   260; timer.c    setting.minutes = 0;
008C 6B00      01704         CLRF    (_setting + 2), B
008E 0000      01705         BANKSEL (_setting + 3)
0090 6B00      01706         CLRF    (_setting + 3), B
               01707 ;       .line   262; timer.c    UpdateDisplay(CLOCK_SETTING);
0092 0E00      01708         MOVLW   0x00
0094 6EE5      01709         MOVWF   POSTDEC1
0096 EC00 F000 01710         CALL    _UpdateDisplay
009A 2AE1      01711         INCF    FSR1L, F
009C CFE4 FFD9 01712         MOVFF   PREINC1, FSR2L
00A0 0012      01713         RETURN  
               01714 
               01715 ; ; Starting pCode block
               01716 S_timer__HandleButton2Pressure  code
0000 01717 _HandleButton2Pressure:
               01718 ;       .line   218; timer.c    void HandleButton2Pressure() {
0000 CFD9 FFE5 01719         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01720         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01721         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01722         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01723         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01724         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01725         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01726         MOVFF   r0x05, POSTDEC1
0020 0000      01727         BANKSEL _flags
               01728 ;       .line   219; timer.c    if (flags.time_setting_procedure) { // setting the clock's time
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0022 5100      01729         MOVF    _flags, W, B
0024 0000      01730         BANKSEL (_flags + 1)
0026 1100      01731         IORWF   (_flags + 1), W, B
0028 E000      01732         BZ      _00170_DS_
               01733 ;       .line   221; timer.c    UpdateProperTimeValue(&setting.hours, &setting.minutes); 
002A 0E00      01734         MOVLW   HIGH(_setting)
002C 6E00      01735         MOVWF   r0x01
002E 0E00      01736         MOVLW   LOW(_setting)
0030 6E00      01737         MOVWF   r0x00
0032 0E80      01738         MOVLW   0x80
0034 6E00      01739         MOVWF   r0x02
0036 0E00      01740         MOVLW   HIGH(_setting + 2)
0038 6E00      01741         MOVWF   r0x04
003A 0E00      01742         MOVLW   LOW(_setting + 2)
003C 6E00      01743         MOVWF   r0x03
003E 0E80      01744         MOVLW   0x80
0040 6E00      01745         MOVWF   r0x05
0042 5000      01746         MOVF    r0x05, W
0044 6EE5      01747         MOVWF   POSTDEC1
0046 5000      01748         MOVF    r0x04, W
0048 6EE5      01749         MOVWF   POSTDEC1
004A 5000      01750         MOVF    r0x03, W
004C 6EE5      01751         MOVWF   POSTDEC1
004E 5000      01752         MOVF    r0x02, W
0050 6EE5      01753         MOVWF   POSTDEC1
0052 5000      01754         MOVF    r0x01, W
0054 6EE5      01755         MOVWF   POSTDEC1
0056 5000      01756         MOVF    r0x00, W
0058 6EE5      01757         MOVWF   POSTDEC1
005A EC00 F000 01758         CALL    _UpdateProperTimeValue
005E 0E06      01759         MOVLW   0x06
0060 26E1      01760         ADDWF   FSR1L, F
0062 D000      01761         BRA     _00172_DS_
0064 01762 _00170_DS_:
0064 0000      01763         BANKSEL (_flags + 2)
               01764 ;       .line   222; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0066 5100      01765         MOVF    (_flags + 2), W, B
0068 0000      01766         BANKSEL (_flags + 3)
006A 1100      01767         IORWF   (_flags + 3), W, B
006C E000      01768         BZ      _00167_DS_
               01769 ;       .line   224; timer.c    UpdateProperTimeValue(&timer.hours, &timer.minutes);
006E 0E00      01770         MOVLW   HIGH(_timer)
0070 6E00      01771         MOVWF   r0x01
0072 0E00      01772         MOVLW   LOW(_timer)
0074 6E00      01773         MOVWF   r0x00
0076 0E80      01774         MOVLW   0x80
0078 6E00      01775         MOVWF   r0x02
007A 0E00      01776         MOVLW   HIGH(_timer + 2)
007C 6E00      01777         MOVWF   r0x04
007E 0E00      01778         MOVLW   LOW(_timer + 2)
0080 6E00      01779         MOVWF   r0x03
0082 0E80      01780         MOVLW   0x80
0084 6E00      01781         MOVWF   r0x05
0086 5000      01782         MOVF    r0x05, W
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0088 6EE5      01783         MOVWF   POSTDEC1
008A 5000      01784         MOVF    r0x04, W
008C 6EE5      01785         MOVWF   POSTDEC1
008E 5000      01786         MOVF    r0x03, W
0090 6EE5      01787         MOVWF   POSTDEC1
0092 5000      01788         MOVF    r0x02, W
0094 6EE5      01789         MOVWF   POSTDEC1
0096 5000      01790         MOVF    r0x01, W
0098 6EE5      01791         MOVWF   POSTDEC1
009A 5000      01792         MOVF    r0x00, W
009C 6EE5      01793         MOVWF   POSTDEC1
009E EC00 F000 01794         CALL    _UpdateProperTimeValue
00A2 0E06      01795         MOVLW   0x06
00A4 26E1      01796         ADDWF   FSR1L, F
00A6 D000      01797         BRA     _00172_DS_
00A8 01798 _00167_DS_:
00A8 0000      01799         BANKSEL (_flags + 4)
               01800 ;       .line   225; timer.c    } else if (flags.set) {
00AA 5100      01801         MOVF    (_flags + 4), W, B
00AC 0000      01802         BANKSEL (_flags + 5)
00AE 1100      01803         IORWF   (_flags + 5), W, B
00B0 E000      01804         BZ      _00172_DS_
               01805 ;       .line   226; timer.c    flags.awake_setting_procedure = 1;
00B2 0E01      01806         MOVLW   0x01
00B4 0000      01807         BANKSEL (_flags + 2)
00B6 6F00      01808         MOVWF   (_flags + 2), B
00B8 0000      01809         BANKSEL (_flags + 3)
00BA 6B00      01810         CLRF    (_flags + 3), B
               01811 ;       .line   227; timer.c    Int2String(timer.hours, 0);
00BC 0E00      01812         MOVLW   0x00
00BE 6EE5      01813         MOVWF   POSTDEC1
00C0 0E00      01814         MOVLW   0x00
00C2 6EE5      01815         MOVWF   POSTDEC1
00C4 0000      01816         BANKSEL (_timer + 1)
00C6 5100      01817         MOVF    (_timer + 1), W, B
00C8 6EE5      01818         MOVWF   POSTDEC1
00CA 0000      01819         BANKSEL _timer
00CC 5100      01820         MOVF    _timer, W, B
00CE 6EE5      01821         MOVWF   POSTDEC1
00D0 EC00 F000 01822         CALL    _Int2String
00D4 0E04      01823         MOVLW   0x04
00D6 26E1      01824         ADDWF   FSR1L, F
               01825 ;       .line   228; timer.c    time_value[2] = ':';
00D8 0E3A      01826         MOVLW   0x3a
00DA 0000      01827         BANKSEL (_time_value + 2)
00DC 6F00      01828         MOVWF   (_time_value + 2), B
               01829 ;       .line   229; timer.c    Int2String(timer.minutes, 3);
00DE 0E00      01830         MOVLW   0x00
00E0 6EE5      01831         MOVWF   POSTDEC1
00E2 0E03      01832         MOVLW   0x03
00E4 6EE5      01833         MOVWF   POSTDEC1
00E6 0000      01834         BANKSEL (_timer + 3)
00E8 5100      01835         MOVF    (_timer + 3), W, B
00EA 6EE5      01836         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00EC 0000      01837         BANKSEL (_timer + 2)
00EE 5100      01838         MOVF    (_timer + 2), W, B
00F0 6EE5      01839         MOVWF   POSTDEC1
00F2 EC00 F000 01840         CALL    _Int2String
00F6 0E04      01841         MOVLW   0x04
00F8 26E1      01842         ADDWF   FSR1L, F
00FA 0000      01843         BANKSEL _in_setting
               01844 ;       .line   230; timer.c    in_setting = HOURS;
00FC 6B00      01845         CLRF    _in_setting, B
               01846 ;       .line   231; timer.c    UpdateDisplay(TIMER_SETTING);
00FE 0E01      01847         MOVLW   0x01
0100 6EE5      01848         MOVWF   POSTDEC1
0102 EC00 F000 01849         CALL    _UpdateDisplay
0106 2AE1      01850         INCF    FSR1L, F
0108 01851 _00172_DS_:
0108 CFE4 F000 01852         MOVFF   PREINC1, r0x05
010C CFE4 F000 01853         MOVFF   PREINC1, r0x04
0110 CFE4 F000 01854         MOVFF   PREINC1, r0x03
0114 CFE4 F000 01855         MOVFF   PREINC1, r0x02
0118 CFE4 F000 01856         MOVFF   PREINC1, r0x01
011C CFE4 F000 01857         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 01858         MOVFF   PREINC1, FSR2L
0124 0012      01859         RETURN  
               01860 
               01861 ; ; Starting pCode block
               01862 S_timer__UpdateProperTimeValue  code
0000 01863 _UpdateProperTimeValue:
               01864 ;       .line   203; timer.c    void UpdateProperTimeValue(int* const hours, int* const minutes) {
0000 CFD9 FFE5 01865         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01866         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01867         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01868         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01869         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01870         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01871         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01872         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01873         MOVFF   r0x06, POSTDEC1
0024 0E02      01874         MOVLW   0x02
0026 CFDB F000 01875         MOVFF   PLUSW2, r0x00
002A 0E03      01876         MOVLW   0x03
002C CFDB F000 01877         MOVFF   PLUSW2, r0x01
0030 0E04      01878         MOVLW   0x04
0032 CFDB F000 01879         MOVFF   PLUSW2, r0x02
0036 0E05      01880         MOVLW   0x05
0038 CFDB F000 01881         MOVFF   PLUSW2, r0x03
003C 0E06      01882         MOVLW   0x06
003E CFDB F000 01883         MOVFF   PLUSW2, r0x04
0042 0E07      01884         MOVLW   0x07
0044 CFDB F000 01885         MOVFF   PLUSW2, r0x05
0048 0000      01886         BANKSEL _in_setting
               01887 ;       .line   204; timer.c    if (in_setting == HOURS) {
004A 5100      01888         MOVF    _in_setting, W, B
004C E100      01889         BNZ     _00157_DS_
               01890 ;       .line   205; timer.c    UpdateTimeValue(hours, MAX_HOURS, 0);
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004E 0E00      01891         MOVLW   0x00
0050 6EE5      01892         MOVWF   POSTDEC1
0052 0E00      01893         MOVLW   0x00
0054 6EE5      01894         MOVWF   POSTDEC1
0056 0E00      01895         MOVLW   0x00
0058 6EE5      01896         MOVWF   POSTDEC1
005A 0E17      01897         MOVLW   0x17
005C 6EE5      01898         MOVWF   POSTDEC1
005E 5000      01899         MOVF    r0x02, W
0060 6EE5      01900         MOVWF   POSTDEC1
0062 5000      01901         MOVF    r0x01, W
0064 6EE5      01902         MOVWF   POSTDEC1
0066 5000      01903         MOVF    r0x00, W
0068 6EE5      01904         MOVWF   POSTDEC1
006A EC00 F000 01905         CALL    _UpdateTimeValue
006E 0E07      01906         MOVLW   0x07
0070 26E1      01907         ADDWF   FSR1L, F
0072 0000      01908         BANKSEL (_flags + 2)
               01909 ;       .line   206; timer.c    DisplayString(16 + 6 * flags.awake_setting_procedure, &time_value[0]);
0074 5100      01910         MOVF    (_flags + 2), W, B
0076 6E00      01911         MOVWF   r0x00
               01912 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               01913 ; ;Unrolled 8 X 8 multiplication
               01914 ; ;FIXME: the function does not support result==WREG
0078 5000      01915         MOVF    r0x00, W
007A 0D06      01916         MULLW   0x06
007C CFF3 F000 01917         MOVFF   PRODL, r0x00
0080 0E10      01918         MOVLW   0x10
0082 2600      01919         ADDWF   r0x00, F
0084 0E00      01920         MOVLW   HIGH(_time_value)
0086 6E00      01921         MOVWF   r0x02
0088 0E00      01922         MOVLW   LOW(_time_value)
008A 6E00      01923         MOVWF   r0x01
008C 0E80      01924         MOVLW   0x80
008E 6E00      01925         MOVWF   r0x06
0090 5000      01926         MOVF    r0x06, W
0092 6EE5      01927         MOVWF   POSTDEC1
0094 5000      01928         MOVF    r0x02, W
0096 6EE5      01929         MOVWF   POSTDEC1
0098 5000      01930         MOVF    r0x01, W
009A 6EE5      01931         MOVWF   POSTDEC1
009C 5000      01932         MOVF    r0x00, W
009E 6EE5      01933         MOVWF   POSTDEC1
00A0 EC00 F000 01934         CALL    _DisplayString
00A4 0E04      01935         MOVLW   0x04
00A6 26E1      01936         ADDWF   FSR1L, F
00A8 D000      01937         BRA     _00159_DS_
00AA 01938 _00157_DS_:
               01939 ;       .line   208; timer.c    UpdateTimeValue(minutes, MAX_MINUTES, 3);
00AA 0E00      01940         MOVLW   0x00
00AC 6EE5      01941         MOVWF   POSTDEC1
00AE 0E03      01942         MOVLW   0x03
00B0 6EE5      01943         MOVWF   POSTDEC1
00B2 0E00      01944         MOVLW   0x00
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B4 6EE5      01945         MOVWF   POSTDEC1
00B6 0E3B      01946         MOVLW   0x3b
00B8 6EE5      01947         MOVWF   POSTDEC1
00BA 5000      01948         MOVF    r0x05, W
00BC 6EE5      01949         MOVWF   POSTDEC1
00BE 5000      01950         MOVF    r0x04, W
00C0 6EE5      01951         MOVWF   POSTDEC1
00C2 5000      01952         MOVF    r0x03, W
00C4 6EE5      01953         MOVWF   POSTDEC1
00C6 EC00 F000 01954         CALL    _UpdateTimeValue
00CA 0E07      01955         MOVLW   0x07
00CC 26E1      01956         ADDWF   FSR1L, F
00CE 0000      01957         BANKSEL (_flags + 2)
               01958 ;       .line   209; timer.c    DisplayString(19 + 6 * flags.awake_setting_procedure, &time_value[3]);
00D0 5100      01959         MOVF    (_flags + 2), W, B
00D2 6E00      01960         MOVWF   r0x00
               01961 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               01962 ; ;Unrolled 8 X 8 multiplication
               01963 ; ;FIXME: the function does not support result==WREG
00D4 5000      01964         MOVF    r0x00, W
00D6 0D06      01965         MULLW   0x06
00D8 CFF3 F000 01966         MOVFF   PRODL, r0x00
00DC 0E13      01967         MOVLW   0x13
00DE 2600      01968         ADDWF   r0x00, F
00E0 0E00      01969         MOVLW   HIGH(_time_value + 3)
00E2 6E00      01970         MOVWF   r0x02
00E4 0E00      01971         MOVLW   LOW(_time_value + 3)
00E6 6E00      01972         MOVWF   r0x01
00E8 0E80      01973         MOVLW   0x80
00EA 6E00      01974         MOVWF   r0x03
00EC 5000      01975         MOVF    r0x03, W
00EE 6EE5      01976         MOVWF   POSTDEC1
00F0 5000      01977         MOVF    r0x02, W
00F2 6EE5      01978         MOVWF   POSTDEC1
00F4 5000      01979         MOVF    r0x01, W
00F6 6EE5      01980         MOVWF   POSTDEC1
00F8 5000      01981         MOVF    r0x00, W
00FA 6EE5      01982         MOVWF   POSTDEC1
00FC EC00 F000 01983         CALL    _DisplayString
0100 0E04      01984         MOVLW   0x04
0102 26E1      01985         ADDWF   FSR1L, F
0104 01986 _00159_DS_:
0104 CFE4 F000 01987         MOVFF   PREINC1, r0x06
0108 CFE4 F000 01988         MOVFF   PREINC1, r0x05
010C CFE4 F000 01989         MOVFF   PREINC1, r0x04
0110 CFE4 F000 01990         MOVFF   PREINC1, r0x03
0114 CFE4 F000 01991         MOVFF   PREINC1, r0x02
0118 CFE4 F000 01992         MOVFF   PREINC1, r0x01
011C CFE4 F000 01993         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 01994         MOVFF   PREINC1, FSR2L
0124 0012      01995         RETURN  
               01996 
               01997 ; ; Starting pCode block
               01998 S_timer__HandleButton1Pressure  code
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0000 01999 _HandleButton1Pressure:
               02000 ;       .line   150; timer.c    void HandleButton1Pressure() {
0000 CFD9 FFE5 02001         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02002         MOVFF   FSR1L, FSR2L
0008 0000      02003         BANKSEL _flags
               02004 ;       .line   151; timer.c    if (flags.time_setting_procedure) { // setting clock's time
000A 5100      02005         MOVF    _flags, W, B
000C 0000      02006         BANKSEL (_flags + 1)
000E 1100      02007         IORWF   (_flags + 1), W, B
0010 B4D8      02008         BTFSC   STATUS, 2
0012 D000      02009         BRA     _00149_DS_
0014 0000      02010         BANKSEL _in_setting
               02011 ;       .line   152; timer.c    if (in_setting == HOURS) {
0016 5100      02012         MOVF    _in_setting, W, B
0018 E100      02013         BNZ     _00138_DS_
               02014 ;       .line   153; timer.c    CompleteHoursSetting(); // start minutes setting
001A EC00 F000 02015         CALL    _CompleteHoursSetting
001E D000      02016         BRA     _00151_DS_
0020 02017 _00138_DS_:
0020 0000      02018         BANKSEL _setting
               02019 ;       .line   156; timer.c    clock.hours = setting.hours;
0022 5100      02020         MOVF    _setting, W, B
0024 0000      02021         BANKSEL _clock
0026 6F00      02022         MOVWF   _clock, B
0028 0000      02023         BANKSEL (_setting + 1)
002A 5100      02024         MOVF    (_setting + 1), W, B
002C 0000      02025         BANKSEL (_clock + 1)
002E 6F00      02026         MOVWF   (_clock + 1), B
0030 0000      02027         BANKSEL (_setting + 2)
               02028 ;       .line   157; timer.c    clock.minutes = setting.minutes;
0032 5100      02029         MOVF    (_setting + 2), W, B
0034 0000      02030         BANKSEL (_clock + 2)
0036 6F00      02031         MOVWF   (_clock + 2), B
0038 0000      02032         BANKSEL (_setting + 3)
003A 5100      02033         MOVF    (_setting + 3), W, B
003C 0000      02034         BANKSEL (_clock + 3)
003E 6F00      02035         MOVWF   (_clock + 3), B
0040 0000      02036         BANKSEL (_clock + 4)
               02037 ;       .line   158; timer.c    clock.seconds = 0;
0042 6B00      02038         CLRF    (_clock + 4), B
0044 0000      02039         BANKSEL (_clock + 5)
0046 6B00      02040         CLRF    (_clock + 5), B
0048 0000      02041         BANKSEL _flags
               02042 ;       .line   159; timer.c    flags.time_setting_procedure = 0; // end the time setting
004A 6B00      02043         CLRF    _flags, B
004C 0000      02044         BANKSEL (_flags + 1)
004E 6B00      02045         CLRF    (_flags + 1), B
0050 0000      02046         BANKSEL (_flags + 4)
               02047 ;       .line   161; timer.c    if (!flags.set) {
0052 5100      02048         MOVF    (_flags + 4), W, B
0054 0000      02049         BANKSEL (_flags + 5)
0056 1100      02050         IORWF   (_flags + 5), W, B
0058 E100      02051         BNZ     _00135_DS_
               02052 ;       .line   162; timer.c    flags.awake_setting_procedure = 1; // start the second procedure
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
005A 0E01      02053         MOVLW   0x01
005C 0000      02054         BANKSEL (_flags + 2)
005E 6F00      02055         MOVWF   (_flags + 2), B
0060 0000      02056         BANKSEL (_flags + 3)
0062 6B00      02057         CLRF    (_flags + 3), B
               02058 ;       .line   164; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0064 0E30      02059         MOVLW   0x30
0066 0000      02060         BANKSEL (_time_value + 4)
0068 6F00      02061         MOVWF   (_time_value + 4), B
006A 0E30      02062         MOVLW   0x30
006C 0000      02063         BANKSEL (_time_value + 3)
006E 6F00      02064         MOVWF   (_time_value + 3), B
0070 0E30      02065         MOVLW   0x30
0072 0000      02066         BANKSEL (_time_value + 1)
0074 6F00      02067         MOVWF   (_time_value + 1), B
0076 0E30      02068         MOVLW   0x30
0078 0000      02069         BANKSEL _time_value
007A 6F00      02070         MOVWF   _time_value, B
               02071 ;       .line   165; timer.c    UpdateDisplay(TIMER_SETTING);
007C 0E01      02072         MOVLW   0x01
007E 6EE5      02073         MOVWF   POSTDEC1
0080 EC00 F000 02074         CALL    _UpdateDisplay
0084 2AE1      02075         INCF    FSR1L, F
0086 0000      02076         BANKSEL _in_setting
               02077 ;       .line   166; timer.c    in_setting = HOURS; // start from setting hours
0088 6B00      02078         CLRF    _in_setting, B
008A D000      02079         BRA     _00151_DS_
008C 02080 _00135_DS_:
               02081 ;       .line   168; timer.c    SetupCompleteTime();
008C EC00 F000 02082         CALL    _SetupCompleteTime
0090 D000      02083         BRA     _00151_DS_
0092 02084 _00149_DS_:
0092 0000      02085         BANKSEL (_flags + 2)
               02086 ;       .line   171; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0094 5100      02087         MOVF    (_flags + 2), W, B
0096 0000      02088         BANKSEL (_flags + 3)
0098 1100      02089         IORWF   (_flags + 3), W, B
009A E000      02090         BZ      _00146_DS_
009C 0000      02091         BANKSEL _in_setting
               02092 ;       .line   172; timer.c    if (in_setting == HOURS) {
009E 5100      02093         MOVF    _in_setting, W, B
00A0 E100      02094         BNZ     _00141_DS_
               02095 ;       .line   173; timer.c    CompleteHoursSetting();
00A2 EC00 F000 02096         CALL    _CompleteHoursSetting
00A6 D000      02097         BRA     _00151_DS_
00A8 02098 _00141_DS_:
00A8 0000      02099         BANKSEL (_flags + 2)
               02100 ;       .line   176; timer.c    flags.awake_setting_procedure = 0; 
00AA 6B00      02101         CLRF    (_flags + 2), B
00AC 0000      02102         BANKSEL (_flags + 3)
00AE 6B00      02103         CLRF    (_flags + 3), B
               02104 ;       .line   177; timer.c    flags.set = 1; 
00B0 0E01      02105         MOVLW   0x01
00B2 0000      02106         BANKSEL (_flags + 4)
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00B4 6F00      02107         MOVWF   (_flags + 4), B
00B6 0000      02108         BANKSEL (_flags + 5)
00B8 6B00      02109         CLRF    (_flags + 5), B
               02110 ;       .line   179; timer.c    SetupCompleteTime();
00BA EC00 F000 02111         CALL    _SetupCompleteTime
               02112 ;       .line   180; timer.c    T1CONbits.TMR1ON        =       1;
00BE 8000      02113         BSF     _T1CONbits, 0
00C0 D000      02114         BRA     _00151_DS_
00C2 02115 _00146_DS_:
00C2 0000      02116         BANKSEL (_flags + 4)
               02117 ;       .line   182; timer.c    } else if (flags.set) {
00C4 5100      02118         MOVF    (_flags + 4), W, B
00C6 0000      02119         BANKSEL (_flags + 5)
00C8 1100      02120         IORWF   (_flags + 5), W, B
00CA E000      02121         BZ      _00151_DS_
               02122 ;       .line   183; timer.c    flags.time_setting_procedure = 1;
00CC 0E01      02123         MOVLW   0x01
00CE 0000      02124         BANKSEL _flags
00D0 6F00      02125         MOVWF   _flags, B
00D2 0000      02126         BANKSEL (_flags + 1)
00D4 6B00      02127         CLRF    (_flags + 1), B
               02128 ;       .line   184; timer.c    Int2String(clock.hours, 0);
00D6 0E00      02129         MOVLW   0x00
00D8 6EE5      02130         MOVWF   POSTDEC1
00DA 0E00      02131         MOVLW   0x00
00DC 6EE5      02132         MOVWF   POSTDEC1
00DE 0000      02133         BANKSEL (_clock + 1)
00E0 5100      02134         MOVF    (_clock + 1), W, B
00E2 6EE5      02135         MOVWF   POSTDEC1
00E4 0000      02136         BANKSEL _clock
00E6 5100      02137         MOVF    _clock, W, B
00E8 6EE5      02138         MOVWF   POSTDEC1
00EA EC00 F000 02139         CALL    _Int2String
00EE 0E04      02140         MOVLW   0x04
00F0 26E1      02141         ADDWF   FSR1L, F
               02142 ;       .line   185; timer.c    time_value[2] = ':';
00F2 0E3A      02143         MOVLW   0x3a
00F4 0000      02144         BANKSEL (_time_value + 2)
00F6 6F00      02145         MOVWF   (_time_value + 2), B
               02146 ;       .line   186; timer.c    Int2String(clock.minutes, 3);
00F8 0E00      02147         MOVLW   0x00
00FA 6EE5      02148         MOVWF   POSTDEC1
00FC 0E03      02149         MOVLW   0x03
00FE 6EE5      02150         MOVWF   POSTDEC1
0100 0000      02151         BANKSEL (_clock + 3)
0102 5100      02152         MOVF    (_clock + 3), W, B
0104 6EE5      02153         MOVWF   POSTDEC1
0106 0000      02154         BANKSEL (_clock + 2)
0108 5100      02155         MOVF    (_clock + 2), W, B
010A 6EE5      02156         MOVWF   POSTDEC1
010C EC00 F000 02157         CALL    _Int2String
0110 0E04      02158         MOVLW   0x04
0112 26E1      02159         ADDWF   FSR1L, F
               02160 ;       .line   187; timer.c    UpdateDisplay(CLOCK_SETTING);
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0114 0E00      02161         MOVLW   0x00
0116 6EE5      02162         MOVWF   POSTDEC1
0118 EC00 F000 02163         CALL    _UpdateDisplay
011C 2AE1      02164         INCF    FSR1L, F
011E 0000      02165         BANKSEL _in_setting
               02166 ;       .line   188; timer.c    in_setting = HOURS;
0120 6B00      02167         CLRF    _in_setting, B
0122 02168 _00151_DS_:
0122 CFE4 FFD9 02169         MOVFF   PREINC1, FSR2L
0126 0012      02170         RETURN  
               02171 
               02172 ; ; Starting pCode block
               02173 S_timer__SetupCompleteTime      code
0000 02174 _SetupCompleteTime:
               02175 ;       .line   134; timer.c    void SetupCompleteTime() {
0000 CFD9 FFE5 02176         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02177         MOVFF   FSR1L, FSR2L
               02178 ;       .line   136; timer.c    Int2String(clock.hours, 0);
0008 0E00      02179         MOVLW   0x00
000A 6EE5      02180         MOVWF   POSTDEC1
000C 0E00      02181         MOVLW   0x00
000E 6EE5      02182         MOVWF   POSTDEC1
0010 0000      02183         BANKSEL (_clock + 1)
0012 5100      02184         MOVF    (_clock + 1), W, B
0014 6EE5      02185         MOVWF   POSTDEC1
0016 0000      02186         BANKSEL _clock
0018 5100      02187         MOVF    _clock, W, B
001A 6EE5      02188         MOVWF   POSTDEC1
001C EC00 F000 02189         CALL    _Int2String
0020 0E04      02190         MOVLW   0x04
0022 26E1      02191         ADDWF   FSR1L, F
               02192 ;       .line   137; timer.c    time_value[2] = ':';
0024 0E3A      02193         MOVLW   0x3a
0026 0000      02194         BANKSEL (_time_value + 2)
0028 6F00      02195         MOVWF   (_time_value + 2), B
               02196 ;       .line   138; timer.c    Int2String(clock.minutes, 3);
002A 0E00      02197         MOVLW   0x00
002C 6EE5      02198         MOVWF   POSTDEC1
002E 0E03      02199         MOVLW   0x03
0030 6EE5      02200         MOVWF   POSTDEC1
0032 0000      02201         BANKSEL (_clock + 3)
0034 5100      02202         MOVF    (_clock + 3), W, B
0036 6EE5      02203         MOVWF   POSTDEC1
0038 0000      02204         BANKSEL (_clock + 2)
003A 5100      02205         MOVF    (_clock + 2), W, B
003C 6EE5      02206         MOVWF   POSTDEC1
003E EC00 F000 02207         CALL    _Int2String
0042 0E04      02208         MOVLW   0x04
0044 26E1      02209         ADDWF   FSR1L, F
               02210 ;       .line   139; timer.c    time_value[5] = ':';
0046 0E3A      02211         MOVLW   0x3a
0048 0000      02212         BANKSEL (_time_value + 5)
004A 6F00      02213         MOVWF   (_time_value + 5), B
               02214 ;       .line   140; timer.c    Int2String(clock.seconds, 6);
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004C 0E00      02215         MOVLW   0x00
004E 6EE5      02216         MOVWF   POSTDEC1
0050 0E06      02217         MOVLW   0x06
0052 6EE5      02218         MOVWF   POSTDEC1
0054 0000      02219         BANKSEL (_clock + 5)
0056 5100      02220         MOVF    (_clock + 5), W, B
0058 6EE5      02221         MOVWF   POSTDEC1
005A 0000      02222         BANKSEL (_clock + 4)
005C 5100      02223         MOVF    (_clock + 4), W, B
005E 6EE5      02224         MOVWF   POSTDEC1
0060 EC00 F000 02225         CALL    _Int2String
0064 0E04      02226         MOVLW   0x04
0066 26E1      02227         ADDWF   FSR1L, F
               02228 ;       .line   142; timer.c    UpdateDisplay(TIME_FLOWING);
0068 0E02      02229         MOVLW   0x02
006A 6EE5      02230         MOVWF   POSTDEC1
006C EC00 F000 02231         CALL    _UpdateDisplay
0070 2AE1      02232         INCF    FSR1L, F
0072 CFE4 FFD9 02233         MOVFF   PREINC1, FSR2L
0076 0012      02234         RETURN  
               02235 
               02236 ; ; Starting pCode block
               02237 S_timer__Int2String     code
0000 02238 _Int2String:
               02239 ;       .line   120; timer.c    void Int2String(int value, int pos) {
0000 CFD9 FFE5 02240         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02241         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02242         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02243         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02244         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02245         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02246         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02247         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02248         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02249         MOVFF   r0x07, POSTDEC1
0028 0E02      02250         MOVLW   0x02
002A CFDB F000 02251         MOVFF   PLUSW2, r0x00
002E 0E03      02252         MOVLW   0x03
0030 CFDB F000 02253         MOVFF   PLUSW2, r0x01
0034 0E04      02254         MOVLW   0x04
0036 CFDB F000 02255         MOVFF   PLUSW2, r0x02
003A 0E05      02256         MOVLW   0x05
003C CFDB F000 02257         MOVFF   PLUSW2, r0x03
               02258 ;       .line   121; timer.c    ultoa(value, &time_value[pos], BASE);
0040 6AE8      02259         CLRF    WREG
0042 BE00      02260         BTFSC   r0x01, 7
0044 0EFF      02261         MOVLW   0xff
0046 6E00      02262         MOVWF   r0x04
0048 6E00      02263         MOVWF   r0x05
004A 0E00      02264         MOVLW   LOW(_time_value)
004C 2400      02265         ADDWF   r0x02, W
004E 6E00      02266         MOVWF   r0x06
0050 0E00      02267         MOVLW   HIGH(_time_value)
0052 2000      02268         ADDWFC  r0x03, W
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0054 6E00      02269         MOVWF   r0x07
0056 0E0A      02270         MOVLW   0x0a
0058 6EE5      02271         MOVWF   POSTDEC1
005A 5000      02272         MOVF    r0x07, W
005C 6EE5      02273         MOVWF   POSTDEC1
005E 5000      02274         MOVF    r0x06, W
0060 6EE5      02275         MOVWF   POSTDEC1
0062 5000      02276         MOVF    r0x05, W
0064 6EE5      02277         MOVWF   POSTDEC1
0066 5000      02278         MOVF    r0x04, W
0068 6EE5      02279         MOVWF   POSTDEC1
006A 5000      02280         MOVF    r0x01, W
006C 6EE5      02281         MOVWF   POSTDEC1
006E 5000      02282         MOVF    r0x00, W
0070 6EE5      02283         MOVWF   POSTDEC1
0072 EC00 F000 02284         CALL    _ultoa
0076 0E07      02285         MOVLW   0x07
0078 26E1      02286         ADDWF   FSR1L, F
               02287 ;       .line   123; timer.c    if (!(time_value[pos + 1])) {
007A 5000      02288         MOVF    r0x02, W
007C 6E00      02289         MOVWF   r0x00
007E 2800      02290         INCF    r0x00, W
0080 6E00      02291         MOVWF   r0x01
0082 6A00      02292         CLRF    r0x04
0084 BE00      02293         BTFSC   r0x01, 7
0086 6800      02294         SETF    r0x04
0088 0E00      02295         MOVLW   LOW(_time_value)
008A 2600      02296         ADDWF   r0x01, F
008C 0E00      02297         MOVLW   HIGH(_time_value)
008E 2200      02298         ADDWFC  r0x04, F
0090 C000 FFE9 02299         MOVFF   r0x01, FSR0L
0094 C000 FFEA 02300         MOVFF   r0x04, FSR0H
0098 CFEF F000 02301         MOVFF   INDF0, r0x05
009C 5000      02302         MOVF    r0x05, W
009E E100      02303         BNZ     _00124_DS_
               02304 ;       .line   124; timer.c    time_value[pos + 1] = time_value[pos];
00A0 0E00      02305         MOVLW   LOW(_time_value)
00A2 2600      02306         ADDWF   r0x02, F
00A4 0E00      02307         MOVLW   HIGH(_time_value)
00A6 2200      02308         ADDWFC  r0x03, F
00A8 C000 FFE9 02309         MOVFF   r0x02, FSR0L
00AC C000 FFEA 02310         MOVFF   r0x03, FSR0H
00B0 CFEF F000 02311         MOVFF   INDF0, r0x05
00B4 C000 FFE9 02312         MOVFF   r0x01, FSR0L
00B8 C000 FFEA 02313         MOVFF   r0x04, FSR0H
00BC C000 FFEF 02314         MOVFF   r0x05, INDF0
               02315 ;       .line   125; timer.c    time_value[pos] = '0';
00C0 C000 FFE9 02316         MOVFF   r0x02, FSR0L
00C4 C000 FFEA 02317         MOVFF   r0x03, FSR0H
00C8 0E30      02318         MOVLW   0x30
00CA 6EEF      02319         MOVWF   INDF0
               02320 ;       .line   126; timer.c    time_value[pos + 2] = '\0';
00CC 2A00      02321         INCF    r0x00, F
00CE 2A00      02322         INCF    r0x00, F
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00D0 6A00      02323         CLRF    r0x01
00D2 BE00      02324         BTFSC   r0x00, 7
00D4 6800      02325         SETF    r0x01
00D6 0E00      02326         MOVLW   LOW(_time_value)
00D8 2600      02327         ADDWF   r0x00, F
00DA 0E00      02328         MOVLW   HIGH(_time_value)
00DC 2200      02329         ADDWFC  r0x01, F
00DE C000 FFE9 02330         MOVFF   r0x00, FSR0L
00E2 C000 FFEA 02331         MOVFF   r0x01, FSR0H
00E6 0E00      02332         MOVLW   0x00
00E8 6EEF      02333         MOVWF   INDF0
00EA 02334 _00124_DS_:
00EA CFE4 F000 02335         MOVFF   PREINC1, r0x07
00EE CFE4 F000 02336         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 02337         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 02338         MOVFF   PREINC1, r0x04
00FA CFE4 F000 02339         MOVFF   PREINC1, r0x03
00FE CFE4 F000 02340         MOVFF   PREINC1, r0x02
0102 CFE4 F000 02341         MOVFF   PREINC1, r0x01
0106 CFE4 F000 02342         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 02343         MOVFF   PREINC1, FSR2L
010E 0012      02344         RETURN  
               02345 
               02346 ; ; Starting pCode block
               02347 S_timer__CompleteHoursSetting   code
0000 02348 _CompleteHoursSetting:
               02349 ;       .line   108; timer.c    void CompleteHoursSetting() {
0000 CFD9 FFE5 02350         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02351         MOVFF   FSR1L, FSR2L
               02352 ;       .line   109; timer.c    in_setting = MINUTES;
0008 0E01      02353         MOVLW   0x01
000A 0000      02354         BANKSEL _in_setting
000C 6F00      02355         MOVWF   _in_setting, B
               02356 ;       .line   110; timer.c    time_value[2] = ':'; // overwite '\0' added by ultoa when setting hours
000E 0E3A      02357         MOVLW   0x3a
0010 0000      02358         BANKSEL (_time_value + 2)
0012 6F00      02359         MOVWF   (_time_value + 2), B
0014 CFE4 FFD9 02360         MOVFF   PREINC1, FSR2L
0018 0012      02361         RETURN  
               02362 
               02363 ; ; Starting pCode block
               02364 S_timer__UpdateTimeValue        code
0000 02365 _UpdateTimeValue:
               02366 ;       .line   95; timer.c     void UpdateTimeValue(int* const value, int limit, int pos) {
0000 CFD9 FFE5 02367         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02368         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02369         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02370         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02371         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02372         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02373         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02374         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02375         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02376         MOVFF   r0x07, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0028 C000 FFE5 02377         MOVFF   r0x08, POSTDEC1
002C 0E02      02378         MOVLW   0x02
002E CFDB F000 02379         MOVFF   PLUSW2, r0x00
0032 0E03      02380         MOVLW   0x03
0034 CFDB F000 02381         MOVFF   PLUSW2, r0x01
0038 0E04      02382         MOVLW   0x04
003A CFDB F000 02383         MOVFF   PLUSW2, r0x02
003E 0E05      02384         MOVLW   0x05
0040 CFDB F000 02385         MOVFF   PLUSW2, r0x03
0044 0E06      02386         MOVLW   0x06
0046 CFDB F000 02387         MOVFF   PLUSW2, r0x04
004A 0E07      02388         MOVLW   0x07
004C CFDB F000 02389         MOVFF   PLUSW2, r0x05
0050 0E08      02390         MOVLW   0x08
0052 CFDB F000 02391         MOVFF   PLUSW2, r0x06
               02392 ;       .line   96; timer.c     if (*value == limit) {
0056 C000 FFE9 02393         MOVFF   r0x00, FSR0L
005A C000 FFF3 02394         MOVFF   r0x01, PRODL
005E 5000      02395         MOVF    r0x02, W
0060 EC00 F000 02396         CALL    __gptrget2
0064 6E00      02397         MOVWF   r0x07
0066 CFF3 F000 02398         MOVFF   PRODL, r0x08
006A 5000      02399         MOVF    r0x07, W
006C 1800      02400         XORWF   r0x03, W
006E E100      02401         BNZ     _00111_DS_
0070 5000      02402         MOVF    r0x08, W
0072 1800      02403         XORWF   r0x04, W
0074 E000      02404         BZ      _00112_DS_
0076 02405 _00111_DS_:
0076 D000      02406         BRA     _00106_DS_
0078 02407 _00112_DS_:
               02408 ;       .line   97; timer.c     *value = 0;
0078 0E00      02409         MOVLW   0x00
007A 6EE5      02410         MOVWF   POSTDEC1
007C 0E00      02411         MOVLW   0x00
007E 6EF4      02412         MOVWF   PRODH
0080 C000 FFE9 02413         MOVFF   r0x00, FSR0L
0084 C000 FFF3 02414         MOVFF   r0x01, PRODL
0088 5000      02415         MOVF    r0x02, W
008A EC00 F000 02416         CALL    __gptrput2
008E D000      02417         BRA     _00107_DS_
0090 02418 _00106_DS_:
               02419 ;       .line   99; timer.c     (*value)++;
0090 2A00      02420         INCF    r0x07, F
0092 B0D8      02421         BTFSC   STATUS, 0
0094 2A00      02422         INCF    r0x08, F
0096 C000 FFE5 02423         MOVFF   r0x07, POSTDEC1
009A C000 FFF4 02424         MOVFF   r0x08, PRODH
009E C000 FFE9 02425         MOVFF   r0x00, FSR0L
00A2 C000 FFF3 02426         MOVFF   r0x01, PRODL
00A6 5000      02427         MOVF    r0x02, W
00A8 EC00 F000 02428         CALL    __gptrput2
00AC 02429 _00107_DS_:
               02430 ;       .line   101; timer.c    Int2String(*value, pos);
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00AC C000 FFE9 02431         MOVFF   r0x00, FSR0L
00B0 C000 FFF3 02432         MOVFF   r0x01, PRODL
00B4 5000      02433         MOVF    r0x02, W
00B6 EC00 F000 02434         CALL    __gptrget2
00BA 6E00      02435         MOVWF   r0x00
00BC CFF3 F000 02436         MOVFF   PRODL, r0x01
00C0 5000      02437         MOVF    r0x06, W
00C2 6EE5      02438         MOVWF   POSTDEC1
00C4 5000      02439         MOVF    r0x05, W
00C6 6EE5      02440         MOVWF   POSTDEC1
00C8 5000      02441         MOVF    r0x01, W
00CA 6EE5      02442         MOVWF   POSTDEC1
00CC 5000      02443         MOVF    r0x00, W
00CE 6EE5      02444         MOVWF   POSTDEC1
00D0 EC00 F000 02445         CALL    _Int2String
00D4 0E04      02446         MOVLW   0x04
00D6 26E1      02447         ADDWF   FSR1L, F
00D8 CFE4 F000 02448         MOVFF   PREINC1, r0x08
00DC CFE4 F000 02449         MOVFF   PREINC1, r0x07
00E0 CFE4 F000 02450         MOVFF   PREINC1, r0x06
00E4 CFE4 F000 02451         MOVFF   PREINC1, r0x05
00E8 CFE4 F000 02452         MOVFF   PREINC1, r0x04
00EC CFE4 F000 02453         MOVFF   PREINC1, r0x03
00F0 CFE4 F000 02454         MOVFF   PREINC1, r0x02
00F4 CFE4 F000 02455         MOVFF   PREINC1, r0x01
00F8 CFE4 F000 02456         MOVFF   PREINC1, r0x00
00FC CFE4 FFD9 02457         MOVFF   PREINC1, FSR2L
0100 0012      02458         RETURN  
               02459 
               02460 ; ; Starting pCode block
0102 02461 __str_0:
0102 6E45 6574 02462         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69
     2072 6874 
     2065 6974 
010E 656D 003A 02463         DB      0x6d, 0x65, 0x3a, 0x00
               02464 ; ; Starting pCode block
0112 02465 __str_1:
0112 2020 0020 02466         DB      0x20, 0x20, 0x20, 0x00
               02467 ; ; Starting pCode block
0116 02468 __str_2:
0116 6E45 6574 02469         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x77
     2072 6874 
     2065 7761 
0122 6B61 2065 02470         DB      0x61, 0x6b, 0x65, 0x20, 0x00
     0000      
               02471 ; ; Starting pCode block
0128 02472 __str_3:
0128 6974 656D 02473         DB      0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x00
     203A 0000 
               02474 ; ; Starting pCode block
0130 02475 __str_4:
0130 2020 2020 02476         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
     2020 2020 
     2020 2020 
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
013C 2020 2020 02477         DB      0x20, 0x20, 0x20, 0x20, 0x00
     0000      
               02478 ; ; Starting pCode block
0142 02479 __str_5:
0142 2020 2020 02480         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
     2020 2020 
     0020      
               02481 
               02482 
               02483 ; Statistics:
               02484 ; code size:     3994 (0x0f9a) bytes ( 3.05%)
               02485 ;                1997 (0x07cd) words
               02486 ; udata size:      46 (0x002e) bytes ( 1.20%)
               02487 ; access size:     22 (0x0016) bytes
               02488 
               02489 
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000090
_00107_DS_                        000000AC
_00111_DS_                        00000076
_00112_DS_                        00000078
_00124_DS_                        000000EA
_00135_DS_                        0000008C
_00138_DS_                        00000020
_00141_DS_                        000000A8
_00146_DS_                        000000C2
_00149_DS_                        00000092
_00151_DS_                        00000122
_00157_DS_                        000000AA
_00159_DS_                        00000104
_00167_DS_                        000000A8
_00170_DS_                        00000064
_00172_DS_                        00000108
_00182_DS_                        00000064
_00183_DS_                        000000BA
_00184_DS_                        00000110
_00186_DS_                        00000164
_00190_DS_                        00000058
_00196_DS_                        000000C6
_00201_DS_                        000000FC
_00205_DS_                        00000134
_00213_DS_                        000000DA
_00214_DS_                        000000DC
_00215_DS_                        000000F0
_00216_DS_                        000000F2
_00222_DS_                        0000005A
_00224_DS_                        0000005C
_00226_DS_                        00000074
_00229_DS_                        0000008C
_00245_DS_                        00000012
_00254_DS_                        000000EE
_00258_DS_                        000000F6
_00260_DS_                        0000010C
_00264_DS_                        00000074
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00280_DS_                        000000E2
_00286_DS_                        000000FC
_00287_DS_                        0000005C
_00290_DS_                        000000D4
_00297_DS_                        0000009A
_00298_DS_                        000000E4
_00303_DS_                        00000090
_00307_DS_                        000000DE
_00311_DS_                        00000088
_00323_DS_                        000000CC
_00327_DS_                        00000134
_00330_DS_                        0000015E
_00334_DS_                        00000188
_00341_DS_                        00000152
_00342_DS_                        00000114
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_AssignDefaultValues              00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_CompleteHoursSetting             00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_DisplayWORD                      00000000
_DisplayWORD_WDigit_1_1           00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_HandleButton1Pressure            00000000
_HandleButton2Pressure            00000000
_HighISR                          00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
_IPR3bits                         00000000
_Int2String                       00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
_LATJbits                         00000000
_LCDInit                          00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_MAADR1                           00000000
_MAADR2                           00000000
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_SetupCompleteTime                00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_UpdateClock                      00000000
_UpdateDisplay                    00000000
_UpdateProperTimeValue            00000000
_UpdateTimeValue                  00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrget2                        00000000
__gptrput1                        00000000
__gptrput2                        00000000
__str_0                           00000102
__str_1                           00000112
__str_2                           00000116
__str_3                           00000128
__str_4                           00000130
__str_5                           00000142
_clock                            00000000
_flags                            00000000
_in_setting                       00000000
_ints                             00000000
_main                             00000000
_setting                          00000000
_stdin                            00000000
_stdout                           00000000
_strlcpy                          00000000
_strlen                           00000000
_time_value                       00000000
_timer                            00000000
_ultoa                            00000000
ivec_0x1_HighISR                  00000008
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009
r0x0a                             0000000A
r0x0b                             0000000B
r0x0c                             0000000C
gpasm-0.13.7 beta               Objects/timer.asm11-27-2017  18:30:57         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
r0x0d                             0000000D
r0x0e                             0000000E
r0x0f                             0000000F
r0x10                             00000010
r0x11                             00000011
r0x12                             00000012
r0x13                             00000013
r0x14                             00000014
r0x15                             00000015


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

