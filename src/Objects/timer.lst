gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00001 ;--------------------------------------------------------
               00002 ; File Created by SDCC : free open source ANSI-C Compiler
               00003 ; Version 2.9.4 #5595 (Nov 14 2017) (UNIX)
               00004 ; This file was generated Tue Nov 28 23:15:15 2017
               00005 ;--------------------------------------------------------
               00006 ; PIC16 port for the Microchip 16-bit core micros
               00007 ;--------------------------------------------------------
               00008         list    p=18f97j60
               00009 
               00010         radix dec
               00011 
               00012 ;--------------------------------------------------------
               00013 ; public variables in this module
               00014 ;--------------------------------------------------------
               00015         global _UpdateTimeValue
               00016         global _CompleteHoursSetting
               00017         global _Int2String
               00018         global _SetupCompleteTime
               00019         global _HandleButton1Pressure
               00020         global _UpdateProperTimeValue
               00021         global _HandleButton2Pressure
               00022         global _ConfigureRegisters
               00023         global _AssignDefaultValues
               00024         global _UpdateDisplay
               00025         global _UpdateClock
               00026         global _DisplayString
               00027         global _in_setting
               00028         global _flags
               00029         global _clock
               00030         global _timer
               00031         global _setting
               00032         global _ints
               00033         global _time_value
               00034         global _HighISR
               00035         global _main
               00036 
               00037 ;--------------------------------------------------------
               00038 ; extern variables in this module
               00039 ;--------------------------------------------------------
               00040         extern __gptrget2
               00041         extern __gptrput2
               00042         extern __gptrget1
               00043         extern __gptrput1
               00044         extern _EBSTCONbits
               00045         extern _MISTATbits
               00046         extern _EFLOCONbits
               00047         extern _MACON1bits
               00048         extern _MACON2bits
               00049         extern _MACON3bits
               00050         extern _MACON4bits
               00051         extern _MACLCON1bits
               00052         extern _MACLCON2bits
               00053         extern _MICONbits
               00054         extern _MICMDbits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00055         extern _EWOLIEbits
               00056         extern _EWOLIRbits
               00057         extern _ERXFCONbits
               00058         extern _EIEbits
               00059         extern _ESTATbits
               00060         extern _ECON2bits
               00061         extern _EIRbits
               00062         extern _EDATAbits
               00063         extern _SSP2CON2bits
               00064         extern _SSP2CON1bits
               00065         extern _SSP2STATbits
               00066         extern _ECCP2DELbits
               00067         extern _ECCP2ASbits
               00068         extern _ECCP3DELbits
               00069         extern _ECCP3ASbits
               00070         extern _RCSTA2bits
               00071         extern _TXSTA2bits
               00072         extern _CCP5CONbits
               00073         extern _CCP4CONbits
               00074         extern _T4CONbits
               00075         extern _ECCP1DELbits
               00076         extern _BAUDCON2bits
               00077         extern _BAUDCTL2bits
               00078         extern _BAUDCONbits
               00079         extern _BAUDCON1bits
               00080         extern _BAUDCTLbits
               00081         extern _BAUDCTL1bits
               00082         extern _PORTAbits
               00083         extern _PORTBbits
               00084         extern _PORTCbits
               00085         extern _PORTDbits
               00086         extern _PORTEbits
               00087         extern _PORTFbits
               00088         extern _PORTGbits
               00089         extern _PORTHbits
               00090         extern _PORTJbits
               00091         extern _LATAbits
               00092         extern _LATBbits
               00093         extern _LATCbits
               00094         extern _LATDbits
               00095         extern _LATEbits
               00096         extern _LATFbits
               00097         extern _LATGbits
               00098         extern _LATHbits
               00099         extern _LATJbits
               00100         extern _DDRAbits
               00101         extern _TRISAbits
               00102         extern _DDRBbits
               00103         extern _TRISBbits
               00104         extern _DDRCbits
               00105         extern _TRISCbits
               00106         extern _DDRDbits
               00107         extern _TRISDbits
               00108         extern _DDREbits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00109         extern _TRISEbits
               00110         extern _DDRFbits
               00111         extern _TRISFbits
               00112         extern _DDRGbits
               00113         extern _TRISGbits
               00114         extern _DDRHbits
               00115         extern _TRISHbits
               00116         extern _DDRJbits
               00117         extern _TRISJbits
               00118         extern _OSCTUNEbits
               00119         extern _MEMCONbits
               00120         extern _PIE1bits
               00121         extern _PIR1bits
               00122         extern _IPR1bits
               00123         extern _PIE2bits
               00124         extern _PIR2bits
               00125         extern _IPR2bits
               00126         extern _PIE3bits
               00127         extern _PIR3bits
               00128         extern _IPR3bits
               00129         extern _EECON1bits
               00130         extern _RCSTAbits
               00131         extern _RCSTA1bits
               00132         extern _TXSTAbits
               00133         extern _TXSTA1bits
               00134         extern _PSPCONbits
               00135         extern _T3CONbits
               00136         extern _CMCONbits
               00137         extern _CVRCONbits
               00138         extern _ECCP1ASbits
               00139         extern _CCP3CONbits
               00140         extern _ECCP3CONbits
               00141         extern _CCP2CONbits
               00142         extern _ECCP2CONbits
               00143         extern _CCP1CONbits
               00144         extern _ECCP1CONbits
               00145         extern _ADCON2bits
               00146         extern _ADCON1bits
               00147         extern _ADCON0bits
               00148         extern _SSP1CON2bits
               00149         extern _SSPCON2bits
               00150         extern _SSP1CON1bits
               00151         extern _SSPCON1bits
               00152         extern _SSP1STATbits
               00153         extern _SSPSTATbits
               00154         extern _T2CONbits
               00155         extern _T1CONbits
               00156         extern _RCONbits
               00157         extern _WDTCONbits
               00158         extern _ECON1bits
               00159         extern _OSCCONbits
               00160         extern _T0CONbits
               00161         extern _STATUSbits
               00162         extern _INTCON3bits
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00163         extern _INTCON2bits
               00164         extern _INTCONbits
               00165         extern _STKPTRbits
               00166         extern _stdin
               00167         extern _stdout
               00168         extern _LCDText
               00169         extern _MAADR5
               00170         extern _MAADR6
               00171         extern _MAADR3
               00172         extern _MAADR4
               00173         extern _MAADR1
               00174         extern _MAADR2
               00175         extern _EBSTSD
               00176         extern _EBSTCON
               00177         extern _EBSTCS
               00178         extern _EBSTCSL
               00179         extern _EBSTCSH
               00180         extern _MISTAT
               00181         extern _EFLOCON
               00182         extern _EPAUS
               00183         extern _EPAUSL
               00184         extern _EPAUSH
               00185         extern _MACON1
               00186         extern _MACON2
               00187         extern _MACON3
               00188         extern _MACON4
               00189         extern _MABBIPG
               00190         extern _MAIPG
               00191         extern _MAIPGL
               00192         extern _MAIPGH
               00193         extern _MACLCON1
               00194         extern _MACLCON2
               00195         extern _MAMXFL
               00196         extern _MAMXFLL
               00197         extern _MAMXFLH
               00198         extern _MICON
               00199         extern _MICMD
               00200         extern _MIREGADR
               00201         extern _MIWR
               00202         extern _MIWRL
               00203         extern _MIWRH
               00204         extern _MIRD
               00205         extern _MIRDL
               00206         extern _MIRDH
               00207         extern _EHT0
               00208         extern _EHT1
               00209         extern _EHT2
               00210         extern _EHT3
               00211         extern _EHT4
               00212         extern _EHT5
               00213         extern _EHT6
               00214         extern _EHT7
               00215         extern _EPMM0
               00216         extern _EPMM1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00217         extern _EPMM2
               00218         extern _EPMM3
               00219         extern _EPMM4
               00220         extern _EPMM5
               00221         extern _EPMM6
               00222         extern _EPMM7
               00223         extern _EPMCS
               00224         extern _EPMCSL
               00225         extern _EPMCSH
               00226         extern _EPMO
               00227         extern _EPMOL
               00228         extern _EPMOH
               00229         extern _EWOLIE
               00230         extern _EWOLIR
               00231         extern _ERXFCON
               00232         extern _EPKTCNT
               00233         extern _EWRPT
               00234         extern _EWRPTL
               00235         extern _EWRPTH
               00236         extern _ETXST
               00237         extern _ETXSTL
               00238         extern _ETXSTH
               00239         extern _ETXND
               00240         extern _ETXNDL
               00241         extern _ETXNDH
               00242         extern _ERXST
               00243         extern _ERXSTL
               00244         extern _ERXSTH
               00245         extern _ERXND
               00246         extern _ERXNDL
               00247         extern _ERXNDH
               00248         extern _ERXRDPT
               00249         extern _ERXRDPTL
               00250         extern _ERXRDPTH
               00251         extern _ERXWRPT
               00252         extern _ERXWRPTL
               00253         extern _ERXWRPTH
               00254         extern _EDMAST
               00255         extern _EDMASTL
               00256         extern _EDMASTH
               00257         extern _EDMAND
               00258         extern _EDMANDL
               00259         extern _EDMANDH
               00260         extern _EDMADST
               00261         extern _EDMADSTL
               00262         extern _EDMADSTH
               00263         extern _EDMACS
               00264         extern _EDMACSL
               00265         extern _EDMACSH
               00266         extern _EIE
               00267         extern _ESTAT
               00268         extern _ECON2
               00269         extern _EIR
               00270         extern _EDATA
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00271         extern _SSP2CON2
               00272         extern _SSP2CON1
               00273         extern _SSP2STAT
               00274         extern _SSP2ADD
               00275         extern _SSP2BUF
               00276         extern _ECCP2DEL
               00277         extern _ECCP2AS
               00278         extern _ECCP3DEL
               00279         extern _ECCP3AS
               00280         extern _RCSTA2
               00281         extern _TXSTA2
               00282         extern _TXREG2
               00283         extern _RCREG2
               00284         extern _SPBRG2
               00285         extern _CCP5CON
               00286         extern _CCPR5
               00287         extern _CCPR5L
               00288         extern _CCPR5H
               00289         extern _CCP4CON
               00290         extern _CCPR4
               00291         extern _CCPR4L
               00292         extern _CCPR4H
               00293         extern _T4CON
               00294         extern _PR4
               00295         extern _TMR4
               00296         extern _ECCP1DEL
               00297         extern _ERDPT
               00298         extern _ERDPTL
               00299         extern _ERDPTH
               00300         extern _BAUDCON2
               00301         extern _BAUDCTL2
               00302         extern _SPBRGH2
               00303         extern _BAUDCON
               00304         extern _BAUDCON1
               00305         extern _BAUDCTL
               00306         extern _BAUDCTL1
               00307         extern _SPBRGH
               00308         extern _SPBRGH1
               00309         extern _PORTA
               00310         extern _PORTB
               00311         extern _PORTC
               00312         extern _PORTD
               00313         extern _PORTE
               00314         extern _PORTF
               00315         extern _PORTG
               00316         extern _PORTH
               00317         extern _PORTJ
               00318         extern _LATA
               00319         extern _LATB
               00320         extern _LATC
               00321         extern _LATD
               00322         extern _LATE
               00323         extern _LATF
               00324         extern _LATG
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00325         extern _LATH
               00326         extern _LATJ
               00327         extern _DDRA
               00328         extern _TRISA
               00329         extern _DDRB
               00330         extern _TRISB
               00331         extern _DDRC
               00332         extern _TRISC
               00333         extern _DDRD
               00334         extern _TRISD
               00335         extern _DDRE
               00336         extern _TRISE
               00337         extern _DDRF
               00338         extern _TRISF
               00339         extern _DDRG
               00340         extern _TRISG
               00341         extern _DDRH
               00342         extern _TRISH
               00343         extern _DDRJ
               00344         extern _TRISJ
               00345         extern _OSCTUNE
               00346         extern _MEMCON
               00347         extern _PIE1
               00348         extern _PIR1
               00349         extern _IPR1
               00350         extern _PIE2
               00351         extern _PIR2
               00352         extern _IPR2
               00353         extern _PIE3
               00354         extern _PIR3
               00355         extern _IPR3
               00356         extern _EECON1
               00357         extern _EECON2
               00358         extern _RCSTA
               00359         extern _RCSTA1
               00360         extern _TXSTA
               00361         extern _TXSTA1
               00362         extern _TXREG
               00363         extern _TXREG1
               00364         extern _RCREG
               00365         extern _RCREG1
               00366         extern _SPBRG
               00367         extern _SPBRG1
               00368         extern _PSPCON
               00369         extern _T3CON
               00370         extern _TMR3L
               00371         extern _TMR3H
               00372         extern _CMCON
               00373         extern _CVRCON
               00374         extern _ECCP1AS
               00375         extern _CCP3CON
               00376         extern _ECCP3CON
               00377         extern _CCPR3
               00378         extern _CCPR3L
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00379         extern _CCPR3H
               00380         extern _CCP2CON
               00381         extern _ECCP2CON
               00382         extern _CCPR2
               00383         extern _CCPR2L
               00384         extern _CCPR2H
               00385         extern _CCP1CON
               00386         extern _ECCP1CON
               00387         extern _CCPR1
               00388         extern _CCPR1L
               00389         extern _CCPR1H
               00390         extern _ADCON2
               00391         extern _ADCON1
               00392         extern _ADCON0
               00393         extern _ADRES
               00394         extern _ADRESL
               00395         extern _ADRESH
               00396         extern _SSP1CON2
               00397         extern _SSPCON2
               00398         extern _SSP1CON1
               00399         extern _SSPCON1
               00400         extern _SSP1STAT
               00401         extern _SSPSTAT
               00402         extern _SSP1ADD
               00403         extern _SSPADD
               00404         extern _SSP1BUF
               00405         extern _SSPBUF
               00406         extern _T2CON
               00407         extern _PR2
               00408         extern _TMR2
               00409         extern _T1CON
               00410         extern _TMR1L
               00411         extern _TMR1H
               00412         extern _RCON
               00413         extern _WDTCON
               00414         extern _ECON1
               00415         extern _OSCCON
               00416         extern _T0CON
               00417         extern _TMR0L
               00418         extern _TMR0H
               00419         extern _STATUS
               00420         extern _FSR2L
               00421         extern _FSR2H
               00422         extern _PLUSW2
               00423         extern _PREINC2
               00424         extern _POSTDEC2
               00425         extern _POSTINC2
               00426         extern _INDF2
               00427         extern _BSR
               00428         extern _FSR1L
               00429         extern _FSR1H
               00430         extern _PLUSW1
               00431         extern _PREINC1
               00432         extern _POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00433         extern _POSTINC1
               00434         extern _INDF1
               00435         extern _WREG
               00436         extern _FSR0L
               00437         extern _FSR0H
               00438         extern _PLUSW0
               00439         extern _PREINC0
               00440         extern _POSTDEC0
               00441         extern _POSTINC0
               00442         extern _INDF0
               00443         extern _INTCON3
               00444         extern _INTCON2
               00445         extern _INTCON
               00446         extern _PROD
               00447         extern _PRODL
               00448         extern _PRODH
               00449         extern _TABLAT
               00450         extern _TBLPTR
               00451         extern _TBLPTRL
               00452         extern _TBLPTRH
               00453         extern _TBLPTRU
               00454         extern _PC
               00455         extern _PCL
               00456         extern _PCLATH
               00457         extern _PCLATU
               00458         extern _STKPTR
               00459         extern _TOS
               00460         extern _TOSL
               00461         extern _TOSH
               00462         extern _TOSU
               00463         extern _ultoa
               00464         extern _strlen
               00465         extern _LCDInit
               00466         extern _LCDUpdate
               00467 ;--------------------------------------------------------
               00468 ;       Equates to used internal registers
               00469 ;--------------------------------------------------------
  00000FD8     00470 STATUS  equ     0xfd8
  00000FF9     00471 PCL     equ     0xff9
  00000FFA     00472 PCLATH  equ     0xffa
  00000FFB     00473 PCLATU  equ     0xffb
  00000FE8     00474 WREG    equ     0xfe8
  00000FE0     00475 BSR     equ     0xfe0
  00000FE9     00476 FSR0L   equ     0xfe9
  00000FEA     00477 FSR0H   equ     0xfea
  00000FE1     00478 FSR1L   equ     0xfe1
  00000FD9     00479 FSR2L   equ     0xfd9
  00000FEF     00480 INDF0   equ     0xfef
  00000FE5     00481 POSTDEC1        equ     0xfe5
  00000FE4     00482 PREINC1 equ     0xfe4
  00000FDB     00483 PLUSW2  equ     0xfdb
  00000FF3     00484 PRODL   equ     0xff3
  00000FF4     00485 PRODH   equ     0xff4
               00486 
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00487 
               00488 ; Internal registers
               00489 .registers      udata_ovr       0x0000
               00490 r0x00   res     1
               00491 r0x01   res     1
               00492 r0x02   res     1
               00493 r0x03   res     1
               00494 r0x04   res     1
               00495 r0x05   res     1
               00496 r0x06   res     1
               00497 r0x07   res     1
               00498 r0x08   res     1
               00499 r0x09   res     1
               00500 
               00501 udata_timer_0   udata
               00502 _in_setting     res     1
               00503 
               00504 udata_timer_1   udata
               00505 _time_value     res     9
               00506 
               00507 udata_timer_2   udata
               00508 _clock  res     6
               00509 
               00510 udata_timer_3   udata
               00511 _flags  res     12
               00512 
               00513 udata_timer_4   udata
               00514 _setting        res     4
               00515 
               00516 udata_timer_5   udata
               00517 _timer  res     4
               00518 
               00519 udata_timer_6   udata
               00520 _ints   res     4
               00521 
               00522 ;--------------------------------------------------------
               00523 ; interrupt vector 
               00524 ;--------------------------------------------------------
               00525 
               00526 ;--------------------------------------------------------
               00527 ; global & static initialisations
               00528 ;--------------------------------------------------------
               00529 ; ; Starting pCode block for absolute section
               00530 ; ;-----------------------------------------
               00531 S_timer_ivec_0x1_HighISR        code    0X000008
0008 00532 ivec_0x1_HighISR:
0008 EF00 F000 00533         GOTO    _HighISR
               00534 
               00535 ; I code from now on!
               00536 ; ; Starting pCode block
               00537 S_timer__main   code
0000 00538 _main:
               00539 ;       .line   394; timer.c    LCDInit();
0000 EC00 F000 00540         CALL    _LCDInit
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00541 ;       .line   395; timer.c    DelayMs(200);
0004 0E20      00542         MOVLW   0x20
0006 6E00      00543         MOVWF   r0x00
0008 0E30      00544         MOVLW   0x30
000A 6E00      00545         MOVWF   r0x01
000C 0E05      00546         MOVLW   0x05
000E 6E00      00547         MOVWF   r0x02
0010 6A00      00548         CLRF    r0x03
0012 00549 _00265_DS_:
0012 C000 F000 00550         MOVFF   r0x00, r0x04
0016 C000 F000 00551         MOVFF   r0x01, r0x05
001A C000 F000 00552         MOVFF   r0x02, r0x06
001E C000 F000 00553         MOVFF   r0x03, r0x07
0022 0EFF      00554         MOVLW   0xff
0024 2600      00555         ADDWF   r0x00, F
0026 0EFF      00556         MOVLW   0xff
0028 2200      00557         ADDWFC  r0x01, F
002A 0EFF      00558         MOVLW   0xff
002C 2200      00559         ADDWFC  r0x02, F
002E 0EFF      00560         MOVLW   0xff
0030 2200      00561         ADDWFC  r0x03, F
0032 5000      00562         MOVF    r0x04, W
0034 1000      00563         IORWF   r0x05, W
0036 1000      00564         IORWF   r0x06, W
0038 1000      00565         IORWF   r0x07, W
003A E100      00566         BNZ     _00265_DS_
               00567 ;       .line   398; timer.c    ConfigureRegisters();
003C EC00 F000 00568         CALL    _ConfigureRegisters
               00569 ;       .line   399; timer.c    AssignDefaultValues();
0040 EC00 F000 00570         CALL    _AssignDefaultValues
0044 00571 _00287_DS_:
0044 0000      00572         BANKSEL (_flags + 6)
               00573 ;       .line   402; timer.c    if (flags.half_sec) {               // routine executed every half second
0046 5100      00574         MOVF    (_flags + 6), W, B
0048 0000      00575         BANKSEL (_flags + 7)
004A 1100      00576         IORWF   (_flags + 7), W, B
004C B4D8      00577         BTFSC   STATUS, 2
004E D000      00578         BRA     _00281_DS_
0050 0000      00579         BANKSEL (_flags + 8)
               00580 ;       .line   404; timer.c    if (flags.one_sec) {
0052 5100      00581         MOVF    (_flags + 8), W, B
0054 0000      00582         BANKSEL (_flags + 9)
0056 1100      00583         IORWF   (_flags + 9), W, B
0058 E000      00584         BZ      _00272_DS_
               00585 ;       .line   405; timer.c    UpdateClock();
005A EC00 F000 00586         CALL    _UpdateClock
005E 00587 _00272_DS_:
               00588 ;       .line   408; timer.c    if (!flags.alarm && LATJbits.LATJ1)
005E C000 F000 00589         MOVFF   (_flags + 10), r0x00
0062 C000 F000 00590         MOVFF   (_flags + 11), r0x01
0066 5000      00591         MOVF    r0x00, W
0068 1000      00592         IORWF   r0x01, W
006A E100      00593         BNZ     _00274_DS_
006C A200      00594         BTFSS   _LATJbits, 1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
006E D000      00595         BRA     _00274_DS_
               00596 ;       .line   409; timer.c    LATJbits.LATJ1  = 0;
0070 9200      00597         BCF     _LATJbits, 1
0072 00598 _00274_DS_:
               00599 ;       .line   411; timer.c    if (flags.alarm && flags.one_sec) {
0072 5000      00600         MOVF    r0x00, W
0074 1000      00601         IORWF   r0x01, W
0076 E000      00602         BZ      _00277_DS_
0078 0000      00603         BANKSEL (_flags + 8)
007A 5100      00604         MOVF    (_flags + 8), W, B
007C 0000      00605         BANKSEL (_flags + 9)
007E 1100      00606         IORWF   (_flags + 9), W, B
0080 E000      00607         BZ      _00277_DS_
               00608 ;       .line   412; timer.c    LATJbits.LATJ0 ^= 1;        // led0 blink
0082 6A00      00609         CLRF    r0x00
0084 B000      00610         BTFSC   _LATJbits, 0
0086 2A00      00611         INCF    r0x00, F
0088 0E01      00612         MOVLW   0x01
008A 1A00      00613         XORWF   r0x00, F
008C 5000      00614         MOVF    r0x00, W
008E 0B01      00615         ANDLW   0x01
0090 6EF4      00616         MOVWF   PRODH
0092 5000      00617         MOVF    _LATJbits, W
0094 0BFE      00618         ANDLW   0xfe
0096 10F4      00619         IORWF   PRODH, W
0098 6E00      00620         MOVWF   _LATJbits
               00621 ;       .line   413; timer.c    LATJbits.LATJ1 ^= 1;        // led1 blink
009A 6A00      00622         CLRF    r0x00
009C B200      00623         BTFSC   _LATJbits, 1
009E 2A00      00624         INCF    r0x00, F
00A0 0E01      00625         MOVLW   0x01
00A2 1A00      00626         XORWF   r0x00, F
00A4 5000      00627         MOVF    r0x00, W
00A6 0B01      00628         ANDLW   0x01
00A8 44E8      00629         RLNCF   WREG, W
00AA 6EF4      00630         MOVWF   PRODH
00AC 5000      00631         MOVF    _LATJbits, W
00AE 0BFD      00632         ANDLW   0xfd
00B0 10F4      00633         IORWF   PRODH, W
00B2 6E00      00634         MOVWF   _LATJbits
00B4 D000      00635         BRA     _00278_DS_
00B6 00636 _00277_DS_:
               00637 ;       .line   415; timer.c    LATJbits.LATJ0 ^= 1;        // led0 blink
00B6 6A00      00638         CLRF    r0x00
00B8 B000      00639         BTFSC   _LATJbits, 0
00BA 2A00      00640         INCF    r0x00, F
00BC 0E01      00641         MOVLW   0x01
00BE 1A00      00642         XORWF   r0x00, F
00C0 5000      00643         MOVF    r0x00, W
00C2 0B01      00644         ANDLW   0x01
00C4 6EF4      00645         MOVWF   PRODH
00C6 5000      00646         MOVF    _LATJbits, W
00C8 0BFE      00647         ANDLW   0xfe
00CA 10F4      00648         IORWF   PRODH, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00CC 6E00      00649         MOVWF   _LATJbits
00CE 00650 _00278_DS_:
00CE 0000      00651         BANKSEL (_flags + 8)
               00652 ;       .line   418; timer.c    flags.one_sec = 0;
00D0 6B00      00653         CLRF    (_flags + 8), B
00D2 0000      00654         BANKSEL (_flags + 9)
00D4 6B00      00655         CLRF    (_flags + 9), B
00D6 0000      00656         BANKSEL (_flags + 6)
               00657 ;       .line   419; timer.c    flags.half_sec = 0;
00D8 6B00      00658         CLRF    (_flags + 6), B
00DA 0000      00659         BANKSEL (_flags + 7)
00DC 6B00      00660         CLRF    (_flags + 7), B
00DE 00661 _00281_DS_:
00DE 0000      00662         BANKSEL _ints
               00663 ;       .line   421; timer.c    if (ints.button1) {         // button 1 pressed
00E0 5100      00664         MOVF    _ints, W, B
00E2 0000      00665         BANKSEL (_ints + 1)
00E4 1100      00666         IORWF   (_ints + 1), W, B
00E6 E000      00667         BZ      _00283_DS_
00E8 0000      00668         BANKSEL _ints
               00669 ;       .line   422; timer.c    ints.button1 = 0;
00EA 6B00      00670         CLRF    _ints, B
00EC 0000      00671         BANKSEL (_ints + 1)
00EE 6B00      00672         CLRF    (_ints + 1), B
               00673 ;       .line   423; timer.c    HandleButton1Pressure();
00F0 EC00 F000 00674         CALL    _HandleButton1Pressure
00F4 00675 _00283_DS_:
00F4 0000      00676         BANKSEL (_ints + 2)
               00677 ;       .line   425; timer.c    if (ints.button2) {         // button 2 pressed
00F6 5100      00678         MOVF    (_ints + 2), W, B
00F8 0000      00679         BANKSEL (_ints + 3)
00FA 1100      00680         IORWF   (_ints + 3), W, B
00FC B4D8      00681         BTFSC   STATUS, 2
00FE D000      00682         BRA     _00287_DS_
0100 0000      00683         BANKSEL (_ints + 2)
               00684 ;       .line   426; timer.c    ints.button2 = 0;
0102 6B00      00685         CLRF    (_ints + 2), B
0104 0000      00686         BANKSEL (_ints + 3)
0106 6B00      00687         CLRF    (_ints + 3), B
               00688 ;       .line   427; timer.c    HandleButton2Pressure();
0108 EC00 F000 00689         CALL    _HandleButton2Pressure
010C D000      00690         BRA     _00287_DS_
010E 0012      00691         RETURN  
               00692 
               00693 ; ; Starting pCode block
               00694 S_timer__DisplayString  code
0000 00695 _DisplayString:
               00696 ;       .line   439; timer.c    void DisplayString(BYTE pos, char* text)
0000 CFD9 FFE5 00697         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00698         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00699         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00700         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00701         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 00702         MOVFF   r0x03, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0018 C000 FFE5 00703         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 00704         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 00705         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 00706         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 00707         MOVFF   r0x08, POSTDEC1
002C C000 FFE5 00708         MOVFF   r0x09, POSTDEC1
0030 0E02      00709         MOVLW   0x02
0032 CFDB F000 00710         MOVFF   PLUSW2, r0x00
0036 0E03      00711         MOVLW   0x03
0038 CFDB F000 00712         MOVFF   PLUSW2, r0x01
003C 0E04      00713         MOVLW   0x04
003E CFDB F000 00714         MOVFF   PLUSW2, r0x02
0042 0E05      00715         MOVLW   0x05
0044 CFDB F000 00716         MOVFF   PLUSW2, r0x03
               00717 ;       .line   441; timer.c    BYTE        l = strlen(text);/*number of actual chars in the string*/
0048 5000      00718         MOVF    r0x03, W
004A 6EE5      00719         MOVWF   POSTDEC1
004C 5000      00720         MOVF    r0x02, W
004E 6EE5      00721         MOVWF   POSTDEC1
0050 5000      00722         MOVF    r0x01, W
0052 6EE5      00723         MOVWF   POSTDEC1
0054 EC00 F000 00724         CALL    _strlen
0058 6E00      00725         MOVWF   r0x04
005A CFF3 F000 00726         MOVFF   PRODL, r0x05
005E 0E03      00727         MOVLW   0x03
0060 26E1      00728         ADDWF   FSR1L, F
               00729 ;       .line   442; timer.c    BYTE      max = 32-pos;    /*available space on the lcd*/
0062 5000      00730         MOVF    r0x00, W
0064 0820      00731         SUBLW   0x20
0066 6E00      00732         MOVWF   r0x05
               00733 ;       .line   443; timer.c    char       *d = (char*)&LCDText[pos];
0068 6A00      00734         CLRF    r0x06
006A 0E00      00735         MOVLW   LOW(_LCDText)
006C 2600      00736         ADDWF   r0x00, F
006E 0E00      00737         MOVLW   HIGH(_LCDText)
0070 2200      00738         ADDWFC  r0x06, F
0072 5000      00739         MOVF    r0x06, W
0074 6E00      00740         MOVWF   r0x06
0076 5000      00741         MOVF    r0x00, W
0078 6E00      00742         MOVWF   r0x00
007A 0E80      00743         MOVLW   0x80
007C 6E00      00744         MOVWF   r0x07
               00745 ;       .line   445; timer.c    size_t      n = (l<max)?l:max;
007E 5000      00746         MOVF    r0x05, W
0080 5C00      00747         SUBWF   r0x04, W
0082 E300      00748         BNC     _00302_DS_
0084 C000 F000 00749         MOVFF   r0x05, r0x04
0088 00750 _00302_DS_:
0088 6A00      00751         CLRF    r0x05
               00752 ;       .line   447; timer.c    if (n != 0)
008A 5000      00753         MOVF    r0x04, W
008C 1000      00754         IORWF   r0x05, W
008E E000      00755         BZ      _00298_DS_
0090 00756 _00294_DS_:
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               00757 ;       .line   448; timer.c    while (n-- != 0)*d++ = *s++;
0090 C000 F000 00758         MOVFF   r0x04, r0x08
0094 C000 F000 00759         MOVFF   r0x05, r0x09
0098 0EFF      00760         MOVLW   0xff
009A 2600      00761         ADDWF   r0x04, F
009C A0D8      00762         BTFSS   STATUS, 0
009E 0600      00763         DECF    r0x05, F
00A0 5000      00764         MOVF    r0x08, W
00A2 1000      00765         IORWF   r0x09, W
00A4 E000      00766         BZ      _00298_DS_
00A6 C000 FFE9 00767         MOVFF   r0x01, FSR0L
00AA C000 FFF3 00768         MOVFF   r0x02, PRODL
00AE 5000      00769         MOVF    r0x03, W
00B0 EC00 F000 00770         CALL    __gptrget1
00B4 6E00      00771         MOVWF   r0x08
00B6 2A00      00772         INCF    r0x01, F
00B8 B0D8      00773         BTFSC   STATUS, 0
00BA 2A00      00774         INCF    r0x02, F
00BC B0D8      00775         BTFSC   STATUS, 0
00BE 2A00      00776         INCF    r0x03, F
00C0 C000 FFE5 00777         MOVFF   r0x08, POSTDEC1
00C4 C000 FFE9 00778         MOVFF   r0x00, FSR0L
00C8 C000 FFF3 00779         MOVFF   r0x06, PRODL
00CC 5000      00780         MOVF    r0x07, W
00CE EC00 F000 00781         CALL    __gptrput1
00D2 2A00      00782         INCF    r0x00, F
00D4 B0D8      00783         BTFSC   STATUS, 0
00D6 2A00      00784         INCF    r0x06, F
00D8 B0D8      00785         BTFSC   STATUS, 0
00DA 2A00      00786         INCF    r0x07, F
00DC D000      00787         BRA     _00294_DS_
00DE 00788 _00298_DS_:
               00789 ;       .line   449; timer.c    LCDUpdate();
00DE EC00 F000 00790         CALL    _LCDUpdate
00E2 CFE4 F000 00791         MOVFF   PREINC1, r0x09
00E6 CFE4 F000 00792         MOVFF   PREINC1, r0x08
00EA CFE4 F000 00793         MOVFF   PREINC1, r0x07
00EE CFE4 F000 00794         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 00795         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 00796         MOVFF   PREINC1, r0x04
00FA CFE4 F000 00797         MOVFF   PREINC1, r0x03
00FE CFE4 F000 00798         MOVFF   PREINC1, r0x02
0102 CFE4 F000 00799         MOVFF   PREINC1, r0x01
0106 CFE4 F000 00800         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 00801         MOVFF   PREINC1, FSR2L
010E 0012      00802         RETURN  
               00803 
               00804 ; ; Starting pCode block
               00805 S_timer__HighISR        code
0000 00806 _HighISR:
               00807 ;       .line   373; timer.c    void HighISR(void) __interrupt (1) {
0000 CFE8 FFE5 00808         MOVFF   WREG, POSTDEC1
0004 CFD8 FFE5 00809         MOVFF   STATUS, POSTDEC1
0008 CFE0 FFE5 00810         MOVFF   BSR, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
000C CFF3 FFE5 00811         MOVFF   PRODL, POSTDEC1
0010 CFF4 FFE5 00812         MOVFF   PRODH, POSTDEC1
0014 CFE9 FFE5 00813         MOVFF   FSR0L, POSTDEC1
0018 CFEA FFE5 00814         MOVFF   FSR0H, POSTDEC1
001C CFFA FFE5 00815         MOVFF   PCLATH, POSTDEC1
0020 CFFB FFE5 00816         MOVFF   PCLATU, POSTDEC1
0024 CFD9 FFE5 00817         MOVFF   FSR2L, POSTDEC1
0028 CFE1 FFD9 00818         MOVFF   FSR1L, FSR2L
002C C000 FFE5 00819         MOVFF   r0x00, POSTDEC1
               00820 ;       .line   374; timer.c    if(PIR1bits.TMR1IF == 1) {      // timer1 overflow (every 0.5 seconds)
0030 6A00      00821         CLRF    r0x00
0032 B000      00822         BTFSC   _PIR1bits, 0
0034 2A00      00823         INCF    r0x00, F
0036 5000      00824         MOVF    r0x00, W
0038 0A01      00825         XORLW   0x01
003A E100      00826         BNZ     _00244_DS_
               00827 ;       .line   375; timer.c    TMR1L             =     (0x10000 - EXTCLOCK_FREQ/2) & 0xff;    // timer1 reset
003C 6A00      00828         CLRF    _TMR1L
               00829 ;       .line   376; timer.c    TMR1H             =     (0x10000 - EXTCLOCK_FREQ/2) >> 8;
003E 0EC0      00830         MOVLW   0xc0
0040 6E00      00831         MOVWF   _TMR1H
               00832 ;       .line   377; timer.c    flags.half_sec = 1;         // set a flag every 0.5 seconds
0042 0E01      00833         MOVLW   0x01
0044 0000      00834         BANKSEL (_flags + 6)
0046 6F00      00835         MOVWF   (_flags + 6), B
0048 0000      00836         BANKSEL (_flags + 7)
004A 6B00      00837         CLRF    (_flags + 7), B
               00838 ;       .line   378; timer.c    if(!LATJbits.LATJ0)
004C B000      00839         BTFSC   _LATJbits, 0
004E D000      00840         BRA     _00242_DS_
               00841 ;       .line   379; timer.c    flags.one_sec = 1;      // set a flag every second (i.e. every time led0 becomes high)
0050 0E01      00842         MOVLW   0x01
0052 0000      00843         BANKSEL (_flags + 8)
0054 6F00      00844         MOVWF   (_flags + 8), B
0056 0000      00845         BANKSEL (_flags + 9)
0058 6B00      00846         CLRF    (_flags + 9), B
005A 00847 _00242_DS_:
               00848 ;       .line   380; timer.c    PIR1bits.TMR1IF = 0;
005A 9000      00849         BCF     _PIR1bits, 0
005C 00850 _00244_DS_:
               00851 ;       .line   382; timer.c    if(INTCON3bits.INT1F == 1) {    // button 2 ISR
005C 6A00      00852         CLRF    r0x00
005E B000      00853         BTFSC   _INTCON3bits, 0
0060 2A00      00854         INCF    r0x00, F
0062 5000      00855         MOVF    r0x00, W
0064 0A01      00856         XORLW   0x01
0066 E100      00857         BNZ     _00246_DS_
               00858 ;       .line   383; timer.c    ints.button2 = 1;           // set a flag for successive handling
0068 0E01      00859         MOVLW   0x01
006A 0000      00860         BANKSEL (_ints + 2)
006C 6F00      00861         MOVWF   (_ints + 2), B
006E 0000      00862         BANKSEL (_ints + 3)
0070 6B00      00863         CLRF    (_ints + 3), B
               00864 ;       .line   384; timer.c    INTCON3bits.INT1F = 0;
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0072 9000      00865         BCF     _INTCON3bits, 0
0074 00866 _00246_DS_:
               00867 ;       .line   386; timer.c    if (INTCON3bits.INT3F == 1) {   // button 1 ISR
0074 6A00      00868         CLRF    r0x00
0076 B400      00869         BTFSC   _INTCON3bits, 2
0078 2A00      00870         INCF    r0x00, F
007A 5000      00871         MOVF    r0x00, W
007C 0A01      00872         XORLW   0x01
007E E100      00873         BNZ     _00249_DS_
               00874 ;       .line   387; timer.c    ints.button1 = 1;           // set a flag for successive handling
0080 0E01      00875         MOVLW   0x01
0082 0000      00876         BANKSEL _ints
0084 6F00      00877         MOVWF   _ints, B
0086 0000      00878         BANKSEL (_ints + 1)
0088 6B00      00879         CLRF    (_ints + 1), B
               00880 ;       .line   388; timer.c    INTCON3bits.INT3F = 0;
008A 9400      00881         BCF     _INTCON3bits, 2
008C 00882 _00249_DS_:
008C CFE4 F000 00883         MOVFF   PREINC1, r0x00
0090 CFE4 FFD9 00884         MOVFF   PREINC1, FSR2L
0094 CFE4 FFFB 00885         MOVFF   PREINC1, PCLATU
0098 CFE4 FFFA 00886         MOVFF   PREINC1, PCLATH
009C CFE4 FFEA 00887         MOVFF   PREINC1, FSR0H
00A0 CFE4 FFE9 00888         MOVFF   PREINC1, FSR0L
00A4 CFE4 FFF4 00889         MOVFF   PREINC1, PRODH
00A8 CFE4 FFF3 00890         MOVFF   PREINC1, PRODL
00AC CFE4 FFE0 00891         MOVFF   PREINC1, BSR
00B0 CFE4 FFD8 00892         MOVFF   PREINC1, STATUS
00B4 CFE4 FFE8 00893         MOVFF   PREINC1, WREG
00B8 0010      00894         RETFIE  
               00895 
               00896 ; ; Starting pCode block
               00897 S_timer__UpdateClock    code
0000 00898 _UpdateClock:
               00899 ;       .line   348; timer.c    void UpdateClock() {
0000 CFD9 FFE5 00900         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 00901         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 00902         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 00903         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 00904         MOVFF   r0x02, POSTDEC1
               00905 ;       .line   349; timer.c    UpdateTimeValue(&clock.seconds, MAX_SECONDS, 6);
0014 0E00      00906         MOVLW   HIGH(_clock + 4)
0016 6E00      00907         MOVWF   r0x01
0018 0E00      00908         MOVLW   LOW(_clock + 4)
001A 6E00      00909         MOVWF   r0x00
001C 0E80      00910         MOVLW   0x80
001E 6E00      00911         MOVWF   r0x02
0020 0E00      00912         MOVLW   0x00
0022 6EE5      00913         MOVWF   POSTDEC1
0024 0E06      00914         MOVLW   0x06
0026 6EE5      00915         MOVWF   POSTDEC1
0028 0E00      00916         MOVLW   0x00
002A 6EE5      00917         MOVWF   POSTDEC1
002C 0E3B      00918         MOVLW   0x3b
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
002E 6EE5      00919         MOVWF   POSTDEC1
0030 5000      00920         MOVF    r0x02, W
0032 6EE5      00921         MOVWF   POSTDEC1
0034 5000      00922         MOVF    r0x01, W
0036 6EE5      00923         MOVWF   POSTDEC1
0038 5000      00924         MOVF    r0x00, W
003A 6EE5      00925         MOVWF   POSTDEC1
003C EC00 F000 00926         CALL    _UpdateTimeValue
0040 0E07      00927         MOVLW   0x07
0042 26E1      00928         ADDWF   FSR1L, F
0044 0000      00929         BANKSEL (_clock + 4)
               00930 ;       .line   350; timer.c    if (!clock.seconds) { // new minute
0046 5100      00931         MOVF    (_clock + 4), W, B
0048 0000      00932         BANKSEL (_clock + 5)
004A 1100      00933         IORWF   (_clock + 5), W, B
004C A4D8      00934         BTFSS   STATUS, 2
004E D000      00935         BRA     _00207_DS_
               00936 ;       .line   351; timer.c    UpdateTimeValue(&clock.minutes, MAX_MINUTES, 3);
0050 0E00      00937         MOVLW   HIGH(_clock + 2)
0052 6E00      00938         MOVWF   r0x01
0054 0E00      00939         MOVLW   LOW(_clock + 2)
0056 6E00      00940         MOVWF   r0x00
0058 0E80      00941         MOVLW   0x80
005A 6E00      00942         MOVWF   r0x02
005C 0E00      00943         MOVLW   0x00
005E 6EE5      00944         MOVWF   POSTDEC1
0060 0E03      00945         MOVLW   0x03
0062 6EE5      00946         MOVWF   POSTDEC1
0064 0E00      00947         MOVLW   0x00
0066 6EE5      00948         MOVWF   POSTDEC1
0068 0E3B      00949         MOVLW   0x3b
006A 6EE5      00950         MOVWF   POSTDEC1
006C 5000      00951         MOVF    r0x02, W
006E 6EE5      00952         MOVWF   POSTDEC1
0070 5000      00953         MOVF    r0x01, W
0072 6EE5      00954         MOVWF   POSTDEC1
0074 5000      00955         MOVF    r0x00, W
0076 6EE5      00956         MOVWF   POSTDEC1
0078 EC00 F000 00957         CALL    _UpdateTimeValue
007C 0E07      00958         MOVLW   0x07
007E 26E1      00959         ADDWF   FSR1L, F
               00960 ;       .line   352; timer.c    time_value[5] = ':';
0080 0E3A      00961         MOVLW   0x3a
0082 0000      00962         BANKSEL (_time_value + 5)
0084 6F00      00963         MOVWF   (_time_value + 5), B
0086 0000      00964         BANKSEL (_clock + 2)
               00965 ;       .line   353; timer.c    if (!clock.minutes) { // new hour
0088 5100      00966         MOVF    (_clock + 2), W, B
008A 0000      00967         BANKSEL (_clock + 3)
008C 1100      00968         IORWF   (_clock + 3), W, B
008E E100      00969         BNZ     _00201_DS_
               00970 ;       .line   354; timer.c    UpdateTimeValue(&clock.hours, MAX_HOURS, 0);
0090 0E00      00971         MOVLW   HIGH(_clock)
0092 6E00      00972         MOVWF   r0x01
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0094 0E00      00973         MOVLW   LOW(_clock)
0096 6E00      00974         MOVWF   r0x00
0098 0E80      00975         MOVLW   0x80
009A 6E00      00976         MOVWF   r0x02
009C 0E00      00977         MOVLW   0x00
009E 6EE5      00978         MOVWF   POSTDEC1
00A0 0E00      00979         MOVLW   0x00
00A2 6EE5      00980         MOVWF   POSTDEC1
00A4 0E00      00981         MOVLW   0x00
00A6 6EE5      00982         MOVWF   POSTDEC1
00A8 0E17      00983         MOVLW   0x17
00AA 6EE5      00984         MOVWF   POSTDEC1
00AC 5000      00985         MOVF    r0x02, W
00AE 6EE5      00986         MOVWF   POSTDEC1
00B0 5000      00987         MOVF    r0x01, W
00B2 6EE5      00988         MOVWF   POSTDEC1
00B4 5000      00989         MOVF    r0x00, W
00B6 6EE5      00990         MOVWF   POSTDEC1
00B8 EC00 F000 00991         CALL    _UpdateTimeValue
00BC 0E07      00992         MOVLW   0x07
00BE 26E1      00993         ADDWF   FSR1L, F
               00994 ;       .line   355; timer.c    time_value[2] = ':';
00C0 0E3A      00995         MOVLW   0x3a
00C2 0000      00996         BANKSEL (_time_value + 2)
00C4 6F00      00997         MOVWF   (_time_value + 2), B
00C6 00998 _00201_DS_:
00C6 0000      00999         BANKSEL (_flags + 10)
               01000 ;       .line   357; timer.c    if(!flags.alarm && (clock.minutes == timer.minutes && clock.hours == timer.hours))
00C8 5100      01001         MOVF    (_flags + 10), W, B
00CA 0000      01002         BANKSEL (_flags + 11)
00CC 1100      01003         IORWF   (_flags + 11), W, B
00CE E100      01004         BNZ     _00207_DS_
00D0 0000      01005         BANKSEL (_clock + 2)
00D2 5100      01006         MOVF    (_clock + 2), W, B
00D4 0000      01007         BANKSEL (_timer + 2)
00D6 1900      01008         XORWF   (_timer + 2), W, B
00D8 E100      01009         BNZ     _00228_DS_
00DA 0000      01010         BANKSEL (_clock + 3)
00DC 5100      01011         MOVF    (_clock + 3), W, B
00DE 0000      01012         BANKSEL (_timer + 3)
00E0 1900      01013         XORWF   (_timer + 3), W, B
00E2 E000      01014         BZ      _00229_DS_
00E4 01015 _00228_DS_:
00E4 D000      01016         BRA     _00207_DS_
00E6 01017 _00229_DS_:
00E6 0000      01018         BANKSEL _clock
00E8 5100      01019         MOVF    _clock, W, B
00EA 0000      01020         BANKSEL _timer
00EC 1900      01021         XORWF   _timer, W, B
00EE E100      01022         BNZ     _00230_DS_
00F0 0000      01023         BANKSEL (_clock + 1)
00F2 5100      01024         MOVF    (_clock + 1), W, B
00F4 0000      01025         BANKSEL (_timer + 1)
00F6 1900      01026         XORWF   (_timer + 1), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00F8 E000      01027         BZ      _00231_DS_
00FA 01028 _00230_DS_:
00FA D000      01029         BRA     _00207_DS_
00FC 01030 _00231_DS_:
               01031 ;       .line   358; timer.c    flags.alarm = 1; // alarm activation
00FC 0E01      01032         MOVLW   0x01
00FE 0000      01033         BANKSEL (_flags + 10)
0100 6F00      01034         MOVWF   (_flags + 10), B
0102 0000      01035         BANKSEL (_flags + 11)
0104 6B00      01036         CLRF    (_flags + 11), B
0106 01037 _00207_DS_:
0106 0000      01038         BANKSEL (_flags + 10)
               01039 ;       .line   360; timer.c    if(flags.alarm && (clock.seconds > 30 || clock.minutes != timer.minutes || clock.hours != timer.hours))
0108 5100      01040         MOVF    (_flags + 10), W, B
010A 0000      01041         BANKSEL (_flags + 11)
010C 1100      01042         IORWF   (_flags + 11), W, B
010E E000      01043         BZ      _00209_DS_
0110 0000      01044         BANKSEL (_clock + 5)
0112 5100      01045         MOVF    (_clock + 5), W, B
0114 0F80      01046         ADDLW   0x80
0116 0F80      01047         ADDLW   0x80
0118 E100      01048         BNZ     _00232_DS_
011A 0E1F      01049         MOVLW   0x1f
011C 0000      01050         BANKSEL (_clock + 4)
011E 5D00      01051         SUBWF   (_clock + 4), W, B
0120 01052 _00232_DS_:
0120 E200      01053         BC      _00208_DS_
0122 0000      01054         BANKSEL (_clock + 2)
0124 5100      01055         MOVF    (_clock + 2), W, B
0126 0000      01056         BANKSEL (_timer + 2)
0128 1900      01057         XORWF   (_timer + 2), W, B
012A E100      01058         BNZ     _00233_DS_
012C 0000      01059         BANKSEL (_clock + 3)
012E 5100      01060         MOVF    (_clock + 3), W, B
0130 0000      01061         BANKSEL (_timer + 3)
0132 1900      01062         XORWF   (_timer + 3), W, B
0134 E000      01063         BZ      _00234_DS_
0136 01064 _00233_DS_:
0136 D000      01065         BRA     _00208_DS_
0138 01066 _00234_DS_:
0138 0000      01067         BANKSEL _clock
013A 5100      01068         MOVF    _clock, W, B
013C 0000      01069         BANKSEL _timer
013E 1900      01070         XORWF   _timer, W, B
0140 E100      01071         BNZ     _00208_DS_
0142 0000      01072         BANKSEL (_clock + 1)
0144 5100      01073         MOVF    (_clock + 1), W, B
0146 0000      01074         BANKSEL (_timer + 1)
0148 1900      01075         XORWF   (_timer + 1), W, B
014A E000      01076         BZ      _00209_DS_
014C 01077 _00208_DS_:
014C 0000      01078         BANKSEL (_flags + 10)
               01079 ;       .line   361; timer.c    flags.alarm = 0;     // alarm deactivation after ~30 seconds or after clock change
014E 6B00      01080         CLRF    (_flags + 10), B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0150 0000      01081         BANKSEL (_flags + 11)
0152 6B00      01082         CLRF    (_flags + 11), B
0154 01083 _00209_DS_:
0154 0000      01084         BANKSEL (_flags + 2)
               01085 ;       .line   362; timer.c    if (!flags.awake_setting_procedure    && !flags.time_setting_procedure)
0156 5100      01086         MOVF    (_flags + 2), W, B
0158 0000      01087         BANKSEL (_flags + 3)
015A 1100      01088         IORWF   (_flags + 3), W, B
015C E100      01089         BNZ     _00216_DS_
015E 0000      01090         BANKSEL _flags
0160 5100      01091         MOVF    _flags, W, B
0162 0000      01092         BANKSEL (_flags + 1)
0164 1100      01093         IORWF   (_flags + 1), W, B
0166 E100      01094         BNZ     _00216_DS_
               01095 ;       .line   363; timer.c    DisplayString(16, &time_value[0]);
0168 0E00      01096         MOVLW   HIGH(_time_value)
016A 6E00      01097         MOVWF   r0x01
016C 0E00      01098         MOVLW   LOW(_time_value)
016E 6E00      01099         MOVWF   r0x00
0170 0E80      01100         MOVLW   0x80
0172 6E00      01101         MOVWF   r0x02
0174 5000      01102         MOVF    r0x02, W
0176 6EE5      01103         MOVWF   POSTDEC1
0178 5000      01104         MOVF    r0x01, W
017A 6EE5      01105         MOVWF   POSTDEC1
017C 5000      01106         MOVF    r0x00, W
017E 6EE5      01107         MOVWF   POSTDEC1
0180 0E10      01108         MOVLW   0x10
0182 6EE5      01109         MOVWF   POSTDEC1
0184 EC00 F000 01110         CALL    _DisplayString
0188 0E04      01111         MOVLW   0x04
018A 26E1      01112         ADDWF   FSR1L, F
018C 01113 _00216_DS_:
018C CFE4 F000 01114         MOVFF   PREINC1, r0x02
0190 CFE4 F000 01115         MOVFF   PREINC1, r0x01
0194 CFE4 F000 01116         MOVFF   PREINC1, r0x00
0198 CFE4 FFD9 01117         MOVFF   PREINC1, FSR2L
019C 0012      01118         RETURN  
               01119 
               01120 ; ; Starting pCode block
               01121 S_timer__UpdateDisplay  code
0000 01122 _UpdateDisplay:
               01123 ;       .line   320; timer.c    void UpdateDisplay(enum display_states state) {
0000 CFD9 FFE5 01124         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01125         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01126         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01127         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01128         MOVFF   r0x02, POSTDEC1
0014 0E02      01129         MOVLW   0x02
0016 CFDB F000 01130         MOVFF   PLUSW2, r0x00
               01131 ;       .line   321; timer.c    switch (state) {
001A 0E03      01132         MOVLW   0x03
001C 5C00      01133         SUBWF   r0x00, W
001E B0D8      01134         BTFSC   STATUS, 0
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0020 D000      01135         BRA     _00191_DS_
0022 C000 FFE5 01136         MOVFF   r0x03, POSTDEC1
0026 C000 FFE5 01137         MOVFF   r0x04, POSTDEC1
002A 6A00      01138         CLRF    r0x04
002C 3400      01139         RLCF    r0x00, W
002E 3600      01140         RLCF    r0x04, F
0030 34E8      01141         RLCF    WREG, W
0032 3600      01142         RLCF    r0x04, F
0034 0BFC      01143         ANDLW   0xfc
0036 6E00      01144         MOVWF   r0x03
0038 0E00      01145         MOVLW   UPPER(_00195_DS_)
003A 6EFB      01146         MOVWF   PCLATU
003C 0E00      01147         MOVLW   HIGH(_00195_DS_)
003E 6EFA      01148         MOVWF   PCLATH
0040 0E00      01149         MOVLW   LOW(_00195_DS_)
0042 2600      01150         ADDWF   r0x03, F
0044 5000      01151         MOVF    r0x04, W
0046 22FA      01152         ADDWFC  PCLATH, F
0048 B0D8      01153         BTFSC   STATUS, 0
004A 2AFB      01154         INCF    PCLATU, F
004C 5000      01155         MOVF    r0x03, W
004E CFE4 F000 01156         MOVFF   PREINC1, r0x04
0052 CFE4 F000 01157         MOVFF   PREINC1, r0x03
0056 6EF9      01158         MOVWF   PCL
0058 01159 _00195_DS_:
0058 EF00 F000 01160         GOTO    _00187_DS_
005C EF00 F000 01161         GOTO    _00188_DS_
0060 EF00 F000 01162         GOTO    _00189_DS_
0064 01163 _00187_DS_:
               01164 ;       .line   323; timer.c    DisplayString(0,"Enter the time:");
0064 0E00      01165         MOVLW   UPPER(__str_0)
0066 6EE5      01166         MOVWF   POSTDEC1
0068 0E00      01167         MOVLW   HIGH(__str_0)
006A 6EE5      01168         MOVWF   POSTDEC1
006C 0E00      01169         MOVLW   LOW(__str_0)
006E 6EE5      01170         MOVWF   POSTDEC1
0070 0E00      01171         MOVLW   0x00
0072 6EE5      01172         MOVWF   POSTDEC1
0074 EC00 F000 01173         CALL    _DisplayString
0078 0E04      01174         MOVLW   0x04
007A 26E1      01175         ADDWF   FSR1L, F
               01176 ;       .line   324; timer.c    DisplayString(16, &time_value[0]);
007C 0E00      01177         MOVLW   HIGH(_time_value)
007E 6E00      01178         MOVWF   r0x01
0080 0E00      01179         MOVLW   LOW(_time_value)
0082 6E00      01180         MOVWF   r0x00
0084 0E80      01181         MOVLW   0x80
0086 6E00      01182         MOVWF   r0x02
0088 5000      01183         MOVF    r0x02, W
008A 6EE5      01184         MOVWF   POSTDEC1
008C 5000      01185         MOVF    r0x01, W
008E 6EE5      01186         MOVWF   POSTDEC1
0090 5000      01187         MOVF    r0x00, W
0092 6EE5      01188         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0094 0E10      01189         MOVLW   0x10
0096 6EE5      01190         MOVWF   POSTDEC1
0098 EC00 F000 01191         CALL    _DisplayString
009C 0E04      01192         MOVLW   0x04
009E 26E1      01193         ADDWF   FSR1L, F
               01194 ;       .line   325; timer.c    DisplayString(21,"   ");
00A0 0E00      01195         MOVLW   UPPER(__str_1)
00A2 6EE5      01196         MOVWF   POSTDEC1
00A4 0E00      01197         MOVLW   HIGH(__str_1)
00A6 6EE5      01198         MOVWF   POSTDEC1
00A8 0E00      01199         MOVLW   LOW(__str_1)
00AA 6EE5      01200         MOVWF   POSTDEC1
00AC 0E15      01201         MOVLW   0x15
00AE 6EE5      01202         MOVWF   POSTDEC1
00B0 EC00 F000 01203         CALL    _DisplayString
00B4 0E04      01204         MOVLW   0x04
00B6 26E1      01205         ADDWF   FSR1L, F
               01206 ;       .line   326; timer.c    break;
00B8 D000      01207         BRA     _00191_DS_
00BA 01208 _00188_DS_:
               01209 ;       .line   328; timer.c    DisplayString(0, "Enter the awake ");
00BA 0E00      01210         MOVLW   UPPER(__str_2)
00BC 6EE5      01211         MOVWF   POSTDEC1
00BE 0E00      01212         MOVLW   HIGH(__str_2)
00C0 6EE5      01213         MOVWF   POSTDEC1
00C2 0E00      01214         MOVLW   LOW(__str_2)
00C4 6EE5      01215         MOVWF   POSTDEC1
00C6 0E00      01216         MOVLW   0x00
00C8 6EE5      01217         MOVWF   POSTDEC1
00CA EC00 F000 01218         CALL    _DisplayString
00CE 0E04      01219         MOVLW   0x04
00D0 26E1      01220         ADDWF   FSR1L, F
               01221 ;       .line   329; timer.c    DisplayString(16, "time: ");
00D2 0E00      01222         MOVLW   UPPER(__str_3)
00D4 6EE5      01223         MOVWF   POSTDEC1
00D6 0E00      01224         MOVLW   HIGH(__str_3)
00D8 6EE5      01225         MOVWF   POSTDEC1
00DA 0E00      01226         MOVLW   LOW(__str_3)
00DC 6EE5      01227         MOVWF   POSTDEC1
00DE 0E10      01228         MOVLW   0x10
00E0 6EE5      01229         MOVWF   POSTDEC1
00E2 EC00 F000 01230         CALL    _DisplayString
00E6 0E04      01231         MOVLW   0x04
00E8 26E1      01232         ADDWF   FSR1L, F
               01233 ;       .line   330; timer.c    DisplayString(22, &time_value[0]);
00EA 0E00      01234         MOVLW   HIGH(_time_value)
00EC 6E00      01235         MOVWF   r0x01
00EE 0E00      01236         MOVLW   LOW(_time_value)
00F0 6E00      01237         MOVWF   r0x00
00F2 0E80      01238         MOVLW   0x80
00F4 6E00      01239         MOVWF   r0x02
00F6 5000      01240         MOVF    r0x02, W
00F8 6EE5      01241         MOVWF   POSTDEC1
00FA 5000      01242         MOVF    r0x01, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00FC 6EE5      01243         MOVWF   POSTDEC1
00FE 5000      01244         MOVF    r0x00, W
0100 6EE5      01245         MOVWF   POSTDEC1
0102 0E16      01246         MOVLW   0x16
0104 6EE5      01247         MOVWF   POSTDEC1
0106 EC00 F000 01248         CALL    _DisplayString
010A 0E04      01249         MOVLW   0x04
010C 26E1      01250         ADDWF   FSR1L, F
               01251 ;       .line   331; timer.c    break;
010E D000      01252         BRA     _00191_DS_
0110 01253 _00189_DS_:
               01254 ;       .line   333; timer.c    DisplayString(0, "                ");
0110 0E00      01255         MOVLW   UPPER(__str_4)
0112 6EE5      01256         MOVWF   POSTDEC1
0114 0E00      01257         MOVLW   HIGH(__str_4)
0116 6EE5      01258         MOVWF   POSTDEC1
0118 0E00      01259         MOVLW   LOW(__str_4)
011A 6EE5      01260         MOVWF   POSTDEC1
011C 0E00      01261         MOVLW   0x00
011E 6EE5      01262         MOVWF   POSTDEC1
0120 EC00 F000 01263         CALL    _DisplayString
0124 0E04      01264         MOVLW   0x04
0126 26E1      01265         ADDWF   FSR1L, F
               01266 ;       .line   334; timer.c    DisplayString(16 + 6, "         ");
0128 0E00      01267         MOVLW   UPPER(__str_5)
012A 6EE5      01268         MOVWF   POSTDEC1
012C 0E00      01269         MOVLW   HIGH(__str_5)
012E 6EE5      01270         MOVWF   POSTDEC1
0130 0E00      01271         MOVLW   LOW(__str_5)
0132 6EE5      01272         MOVWF   POSTDEC1
0134 0E16      01273         MOVLW   0x16
0136 6EE5      01274         MOVWF   POSTDEC1
0138 EC00 F000 01275         CALL    _DisplayString
013C 0E04      01276         MOVLW   0x04
013E 26E1      01277         ADDWF   FSR1L, F
               01278 ;       .line   335; timer.c    DisplayString(16, &time_value[0]);
0140 0E00      01279         MOVLW   HIGH(_time_value)
0142 6E00      01280         MOVWF   r0x01
0144 0E00      01281         MOVLW   LOW(_time_value)
0146 6E00      01282         MOVWF   r0x00
0148 0E80      01283         MOVLW   0x80
014A 6E00      01284         MOVWF   r0x02
014C 5000      01285         MOVF    r0x02, W
014E 6EE5      01286         MOVWF   POSTDEC1
0150 5000      01287         MOVF    r0x01, W
0152 6EE5      01288         MOVWF   POSTDEC1
0154 5000      01289         MOVF    r0x00, W
0156 6EE5      01290         MOVWF   POSTDEC1
0158 0E10      01291         MOVLW   0x10
015A 6EE5      01292         MOVWF   POSTDEC1
015C EC00 F000 01293         CALL    _DisplayString
0160 0E04      01294         MOVLW   0x04
0162 26E1      01295         ADDWF   FSR1L, F
0164 01296 _00191_DS_:
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01297 ;       .line   337; timer.c    }
0164 CFE4 F000 01298         MOVFF   PREINC1, r0x02
0168 CFE4 F000 01299         MOVFF   PREINC1, r0x01
016C CFE4 F000 01300         MOVFF   PREINC1, r0x00
0170 CFE4 FFD9 01301         MOVFF   PREINC1, FSR2L
0174 0012      01302         RETURN  
               01303 
               01304 ; ; Starting pCode block
               01305 S_timer__AssignDefaultValues    code
0000 01306 _AssignDefaultValues:
               01307 ;       .line   287; timer.c    void AssignDefaultValues() {
0000 CFD9 FFE5 01308         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01309         MOVFF   FSR1L, FSR2L
0008 0000      01310         BANKSEL _ints
               01311 ;       .line   289; timer.c    ints.button1 = 0;
000A 6B00      01312         CLRF    _ints, B
000C 0000      01313         BANKSEL (_ints + 1)
000E 6B00      01314         CLRF    (_ints + 1), B
0010 0000      01315         BANKSEL (_ints + 2)
               01316 ;       .line   290; timer.c    ints.button2 = 0;
0012 6B00      01317         CLRF    (_ints + 2), B
0014 0000      01318         BANKSEL (_ints + 3)
0016 6B00      01319         CLRF    (_ints + 3), B
               01320 ;       .line   292; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0018 0E30      01321         MOVLW   0x30
001A 0000      01322         BANKSEL (_time_value + 4)
001C 6F00      01323         MOVWF   (_time_value + 4), B
001E 0E30      01324         MOVLW   0x30
0020 0000      01325         BANKSEL (_time_value + 3)
0022 6F00      01326         MOVWF   (_time_value + 3), B
0024 0E30      01327         MOVLW   0x30
0026 0000      01328         BANKSEL (_time_value + 1)
0028 6F00      01329         MOVWF   (_time_value + 1), B
002A 0E30      01330         MOVLW   0x30
002C 0000      01331         BANKSEL _time_value
002E 6F00      01332         MOVWF   _time_value, B
               01333 ;       .line   293; timer.c    time_value[2] = ':';
0030 0E3A      01334         MOVLW   0x3a
0032 0000      01335         BANKSEL (_time_value + 2)
0034 6F00      01336         MOVWF   (_time_value + 2), B
0036 0000      01337         BANKSEL (_time_value + 5)
               01338 ;       .line   294; timer.c    time_value[5] = '\0';
0038 6B00      01339         CLRF    (_time_value + 5), B
003A 0000      01340         BANKSEL _in_setting
               01341 ;       .line   295; timer.c    in_setting = HOURS; // start from setting the hours
003C 6B00      01342         CLRF    _in_setting, B
               01343 ;       .line   297; timer.c    flags.time_setting_procedure = 1;
003E 0E01      01344         MOVLW   0x01
0040 0000      01345         BANKSEL _flags
0042 6F00      01346         MOVWF   _flags, B
0044 0000      01347         BANKSEL (_flags + 1)
0046 6B00      01348         CLRF    (_flags + 1), B
0048 0000      01349         BANKSEL (_flags + 2)
               01350 ;       .line   298; timer.c    flags.awake_setting_procedure = 0;
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
004A 6B00      01351         CLRF    (_flags + 2), B
004C 0000      01352         BANKSEL (_flags + 3)
004E 6B00      01353         CLRF    (_flags + 3), B
0050 0000      01354         BANKSEL (_flags + 4)
               01355 ;       .line   299; timer.c    flags.set = 0;
0052 6B00      01356         CLRF    (_flags + 4), B
0054 0000      01357         BANKSEL (_flags + 5)
0056 6B00      01358         CLRF    (_flags + 5), B
0058 0000      01359         BANKSEL (_flags + 6)
               01360 ;       .line   300; timer.c    flags.half_sec = 0;
005A 6B00      01361         CLRF    (_flags + 6), B
005C 0000      01362         BANKSEL (_flags + 7)
005E 6B00      01363         CLRF    (_flags + 7), B
0060 0000      01364         BANKSEL (_flags + 8)
               01365 ;       .line   301; timer.c    flags.one_sec = 0;
0062 6B00      01366         CLRF    (_flags + 8), B
0064 0000      01367         BANKSEL (_flags + 9)
0066 6B00      01368         CLRF    (_flags + 9), B
0068 0000      01369         BANKSEL (_flags + 10)
               01370 ;       .line   302; timer.c    flags.alarm = 0;
006A 6B00      01371         CLRF    (_flags + 10), B
006C 0000      01372         BANKSEL (_flags + 11)
006E 6B00      01373         CLRF    (_flags + 11), B
0070 0000      01374         BANKSEL _timer
               01375 ;       .line   304; timer.c    timer.hours = 0;
0072 6B00      01376         CLRF    _timer, B
0074 0000      01377         BANKSEL (_timer + 1)
0076 6B00      01378         CLRF    (_timer + 1), B
0078 0000      01379         BANKSEL (_timer + 2)
               01380 ;       .line   305; timer.c    timer.minutes = 0;
007A 6B00      01381         CLRF    (_timer + 2), B
007C 0000      01382         BANKSEL (_timer + 3)
007E 6B00      01383         CLRF    (_timer + 3), B
0080 0000      01384         BANKSEL _setting
               01385 ;       .line   307; timer.c    setting.hours = 0;
0082 6B00      01386         CLRF    _setting, B
0084 0000      01387         BANKSEL (_setting + 1)
0086 6B00      01388         CLRF    (_setting + 1), B
0088 0000      01389         BANKSEL (_setting + 2)
               01390 ;       .line   308; timer.c    setting.minutes = 0;
008A 6B00      01391         CLRF    (_setting + 2), B
008C 0000      01392         BANKSEL (_setting + 3)
008E 6B00      01393         CLRF    (_setting + 3), B
               01394 ;       .line   310; timer.c    UpdateDisplay(CLOCK_SETTING);
0090 0E00      01395         MOVLW   0x00
0092 6EE5      01396         MOVWF   POSTDEC1
0094 EC00 F000 01397         CALL    _UpdateDisplay
0098 2AE1      01398         INCF    FSR1L, F
009A CFE4 FFD9 01399         MOVFF   PREINC1, FSR2L
009E 0012      01400         RETURN  
               01401 
               01402 ; ; Starting pCode block
               01403 S_timer__ConfigureRegisters     code
0000 01404 _ConfigureRegisters:
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               01405 ;       .line   245; timer.c    void ConfigureRegisters() {
0000 CFD9 FFE5 01406         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01407         MOVFF   FSR1L, FSR2L
               01408 ;       .line   247; timer.c    INTCONbits.GIE      =   1;   //enable high priority interrupts
0008 8E00      01409         BSF     _INTCONbits, 7
               01410 ;       .line   248; timer.c    RCONbits.IPEN       =   1;   //enable interrupts priority levels
000A 8E00      01411         BSF     _RCONbits, 7
               01412 ;       .line   254; timer.c    T1CONbits.TMR1ON    =   0;    // disable timer1
000C 9000      01413         BCF     _T1CONbits, 0
               01414 ;       .line   255; timer.c    T1CONbits.RD16      =   1;    // use timer1 16-bit counter
000E 8E00      01415         BSF     _T1CONbits, 7
               01416 ;       .line   256; timer.c    T1CONbits.T1CKPS0   =   0;    // prescaler set to 1:1
0010 9800      01417         BCF     _T1CONbits, 4
               01418 ;       .line   257; timer.c    T1CONbits.T1CKPS1   =   0;
0012 9A00      01419         BCF     _T1CONbits, 5
               01420 ;       .line   258; timer.c    T1CONbits.T1OSCEN   =   1;    // timer1 oscillator enable
0014 8600      01421         BSF     _T1CONbits, 3
               01422 ;       .line   259; timer.c    T1CONbits.TMR1CS    =   1;    // external clock selected
0016 8200      01423         BSF     _T1CONbits, 1
               01424 ;       .line   260; timer.c    PIR1bits.TMR1IF     =   0;    // clear timer1 overflow bit
0018 9000      01425         BCF     _PIR1bits, 0
               01426 ;       .line   261; timer.c    PIE1bits.TMR1IE     =   1;    // timer1 interrupt enable
001A 8000      01427         BSF     _PIE1bits, 0
               01428 ;       .line   262; timer.c    IPR1bits.TMR1IP     =   1;    // high priority interrupt
001C 8000      01429         BSF     _IPR1bits, 0
               01430 ;       .line   263; timer.c    TMR1L               =   (0x10000 - EXTCLOCK_FREQ/2) & 0xff;    // timer1 initial value
001E 6A00      01431         CLRF    _TMR1L
               01432 ;       .line   264; timer.c    TMR1H               =   (0x10000 - EXTCLOCK_FREQ/2) >> 8;
0020 0EC0      01433         MOVLW   0xc0
0022 6E00      01434         MOVWF   _TMR1H
               01435 ;       .line   267; timer.c    INTCON3bits.INT1P   =   1;    //connect INT1 interrupt (button 2) to high prio
0024 8C00      01436         BSF     _INTCON3bits, 6
               01437 ;       .line   268; timer.c    INTCON2bits.INT3IP  =   1;    //connect INT3 interrupt (button 1) to high prio
0026 8200      01438         BSF     _INTCON2bits, 1
               01439 ;       .line   269; timer.c    INTCON2bits.INTEDG1 =   0;    //INT1 interrupts on falling edge
0028 9A00      01440         BCF     _INTCON2bits, 5
               01441 ;       .line   270; timer.c    INTCON2bits.INTEDG3 =   0;    //INT3 interrupts on falling edge
002A 9600      01442         BCF     _INTCON2bits, 3
               01443 ;       .line   271; timer.c    INTCON3bits.INT1F   =   0;    //clear INT1 flag
002C 9000      01444         BCF     _INTCON3bits, 0
               01445 ;       .line   272; timer.c    INTCON3bits.INT3F   =   0;    //clear INT3 flag
002E 9400      01446         BCF     _INTCON3bits, 2
               01447 ;       .line   273; timer.c    INTCON3bits.INT1E   =   1;    //enable INT1 interrupt (button 2)
0030 8600      01448         BSF     _INTCON3bits, 3
               01449 ;       .line   274; timer.c    INTCON3bits.INT3E   =   1;    //enable INT1 interrupt (button 1)
0032 8A00      01450         BSF     _INTCON3bits, 5
               01451 ;       .line   277; timer.c    TRISJbits.TRISJ0    =   0;    // configure PORTJ0 for output (led0)
0034 9000      01452         BCF     _TRISJbits, 0
               01453 ;       .line   278; timer.c    TRISJbits.TRISJ1    =   0;    // configure PORTJ1 for output (led1)
0036 9200      01454         BCF     _TRISJbits, 1
               01455 ;       .line   279; timer.c    LATJbits.LATJ0      =   1;    // led0 output high
0038 8000      01456         BSF     _LATJbits, 0
               01457 ;       .line   280; timer.c    LATJbits.LATJ1      =   0;    // led1 output low
003A 9200      01458         BCF     _LATJbits, 1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
003C CFE4 FFD9 01459         MOVFF   PREINC1, FSR2L
0040 0012      01460         RETURN  
               01461 
               01462 ; ; Starting pCode block
               01463 S_timer__HandleButton2Pressure  code
0000 01464 _HandleButton2Pressure:
               01465 ;       .line   224; timer.c    void HandleButton2Pressure() {
0000 CFD9 FFE5 01466         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01467         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01468         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01469         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01470         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01471         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01472         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01473         MOVFF   r0x05, POSTDEC1
0020 0000      01474         BANKSEL _flags
               01475 ;       .line   225; timer.c    if (flags.time_setting_procedure) { // setting the clock's time
0022 5100      01476         MOVF    _flags, W, B
0024 0000      01477         BANKSEL (_flags + 1)
0026 1100      01478         IORWF   (_flags + 1), W, B
0028 E000      01479         BZ      _00170_DS_
               01480 ;       .line   227; timer.c    UpdateProperTimeValue(&setting.hours, &setting.minutes); 
002A 0E00      01481         MOVLW   HIGH(_setting)
002C 6E00      01482         MOVWF   r0x01
002E 0E00      01483         MOVLW   LOW(_setting)
0030 6E00      01484         MOVWF   r0x00
0032 0E80      01485         MOVLW   0x80
0034 6E00      01486         MOVWF   r0x02
0036 0E00      01487         MOVLW   HIGH(_setting + 2)
0038 6E00      01488         MOVWF   r0x04
003A 0E00      01489         MOVLW   LOW(_setting + 2)
003C 6E00      01490         MOVWF   r0x03
003E 0E80      01491         MOVLW   0x80
0040 6E00      01492         MOVWF   r0x05
0042 5000      01493         MOVF    r0x05, W
0044 6EE5      01494         MOVWF   POSTDEC1
0046 5000      01495         MOVF    r0x04, W
0048 6EE5      01496         MOVWF   POSTDEC1
004A 5000      01497         MOVF    r0x03, W
004C 6EE5      01498         MOVWF   POSTDEC1
004E 5000      01499         MOVF    r0x02, W
0050 6EE5      01500         MOVWF   POSTDEC1
0052 5000      01501         MOVF    r0x01, W
0054 6EE5      01502         MOVWF   POSTDEC1
0056 5000      01503         MOVF    r0x00, W
0058 6EE5      01504         MOVWF   POSTDEC1
005A EC00 F000 01505         CALL    _UpdateProperTimeValue
005E 0E06      01506         MOVLW   0x06
0060 26E1      01507         ADDWF   FSR1L, F
0062 D000      01508         BRA     _00172_DS_
0064 01509 _00170_DS_:
0064 0000      01510         BANKSEL (_flags + 2)
               01511 ;       .line   228; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0066 5100      01512         MOVF    (_flags + 2), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0068 0000      01513         BANKSEL (_flags + 3)
006A 1100      01514         IORWF   (_flags + 3), W, B
006C E000      01515         BZ      _00167_DS_
               01516 ;       .line   230; timer.c    UpdateProperTimeValue(&timer.hours, &timer.minutes);
006E 0E00      01517         MOVLW   HIGH(_timer)
0070 6E00      01518         MOVWF   r0x01
0072 0E00      01519         MOVLW   LOW(_timer)
0074 6E00      01520         MOVWF   r0x00
0076 0E80      01521         MOVLW   0x80
0078 6E00      01522         MOVWF   r0x02
007A 0E00      01523         MOVLW   HIGH(_timer + 2)
007C 6E00      01524         MOVWF   r0x04
007E 0E00      01525         MOVLW   LOW(_timer + 2)
0080 6E00      01526         MOVWF   r0x03
0082 0E80      01527         MOVLW   0x80
0084 6E00      01528         MOVWF   r0x05
0086 5000      01529         MOVF    r0x05, W
0088 6EE5      01530         MOVWF   POSTDEC1
008A 5000      01531         MOVF    r0x04, W
008C 6EE5      01532         MOVWF   POSTDEC1
008E 5000      01533         MOVF    r0x03, W
0090 6EE5      01534         MOVWF   POSTDEC1
0092 5000      01535         MOVF    r0x02, W
0094 6EE5      01536         MOVWF   POSTDEC1
0096 5000      01537         MOVF    r0x01, W
0098 6EE5      01538         MOVWF   POSTDEC1
009A 5000      01539         MOVF    r0x00, W
009C 6EE5      01540         MOVWF   POSTDEC1
009E EC00 F000 01541         CALL    _UpdateProperTimeValue
00A2 0E06      01542         MOVLW   0x06
00A4 26E1      01543         ADDWF   FSR1L, F
00A6 D000      01544         BRA     _00172_DS_
00A8 01545 _00167_DS_:
00A8 0000      01546         BANKSEL (_flags + 4)
               01547 ;       .line   231; timer.c    } else if (flags.set) {
00AA 5100      01548         MOVF    (_flags + 4), W, B
00AC 0000      01549         BANKSEL (_flags + 5)
00AE 1100      01550         IORWF   (_flags + 5), W, B
00B0 E000      01551         BZ      _00172_DS_
               01552 ;       .line   232; timer.c    flags.awake_setting_procedure = 1;
00B2 0E01      01553         MOVLW   0x01
00B4 0000      01554         BANKSEL (_flags + 2)
00B6 6F00      01555         MOVWF   (_flags + 2), B
00B8 0000      01556         BANKSEL (_flags + 3)
00BA 6B00      01557         CLRF    (_flags + 3), B
               01558 ;       .line   233; timer.c    Int2String(timer.hours, 0);
00BC 0E00      01559         MOVLW   0x00
00BE 6EE5      01560         MOVWF   POSTDEC1
00C0 0E00      01561         MOVLW   0x00
00C2 6EE5      01562         MOVWF   POSTDEC1
00C4 0000      01563         BANKSEL (_timer + 1)
00C6 5100      01564         MOVF    (_timer + 1), W, B
00C8 6EE5      01565         MOVWF   POSTDEC1
00CA 0000      01566         BANKSEL _timer
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00CC 5100      01567         MOVF    _timer, W, B
00CE 6EE5      01568         MOVWF   POSTDEC1
00D0 EC00 F000 01569         CALL    _Int2String
00D4 0E04      01570         MOVLW   0x04
00D6 26E1      01571         ADDWF   FSR1L, F
               01572 ;       .line   234; timer.c    time_value[2] = ':';
00D8 0E3A      01573         MOVLW   0x3a
00DA 0000      01574         BANKSEL (_time_value + 2)
00DC 6F00      01575         MOVWF   (_time_value + 2), B
               01576 ;       .line   235; timer.c    Int2String(timer.minutes, 3);
00DE 0E00      01577         MOVLW   0x00
00E0 6EE5      01578         MOVWF   POSTDEC1
00E2 0E03      01579         MOVLW   0x03
00E4 6EE5      01580         MOVWF   POSTDEC1
00E6 0000      01581         BANKSEL (_timer + 3)
00E8 5100      01582         MOVF    (_timer + 3), W, B
00EA 6EE5      01583         MOVWF   POSTDEC1
00EC 0000      01584         BANKSEL (_timer + 2)
00EE 5100      01585         MOVF    (_timer + 2), W, B
00F0 6EE5      01586         MOVWF   POSTDEC1
00F2 EC00 F000 01587         CALL    _Int2String
00F6 0E04      01588         MOVLW   0x04
00F8 26E1      01589         ADDWF   FSR1L, F
00FA 0000      01590         BANKSEL _in_setting
               01591 ;       .line   236; timer.c    in_setting = HOURS;
00FC 6B00      01592         CLRF    _in_setting, B
               01593 ;       .line   237; timer.c    UpdateDisplay(TIMER_SETTING);
00FE 0E01      01594         MOVLW   0x01
0100 6EE5      01595         MOVWF   POSTDEC1
0102 EC00 F000 01596         CALL    _UpdateDisplay
0106 2AE1      01597         INCF    FSR1L, F
0108 01598 _00172_DS_:
0108 CFE4 F000 01599         MOVFF   PREINC1, r0x05
010C CFE4 F000 01600         MOVFF   PREINC1, r0x04
0110 CFE4 F000 01601         MOVFF   PREINC1, r0x03
0114 CFE4 F000 01602         MOVFF   PREINC1, r0x02
0118 CFE4 F000 01603         MOVFF   PREINC1, r0x01
011C CFE4 F000 01604         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 01605         MOVFF   PREINC1, FSR2L
0124 0012      01606         RETURN  
               01607 
               01608 ; ; Starting pCode block
               01609 S_timer__UpdateProperTimeValue  code
0000 01610 _UpdateProperTimeValue:
               01611 ;       .line   209; timer.c    void UpdateProperTimeValue(int* const hours, int* const minutes) {
0000 CFD9 FFE5 01612         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01613         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 01614         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 01615         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 01616         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 01617         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 01618         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 01619         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 01620         MOVFF   r0x06, POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0024 0E02      01621         MOVLW   0x02
0026 CFDB F000 01622         MOVFF   PLUSW2, r0x00
002A 0E03      01623         MOVLW   0x03
002C CFDB F000 01624         MOVFF   PLUSW2, r0x01
0030 0E04      01625         MOVLW   0x04
0032 CFDB F000 01626         MOVFF   PLUSW2, r0x02
0036 0E05      01627         MOVLW   0x05
0038 CFDB F000 01628         MOVFF   PLUSW2, r0x03
003C 0E06      01629         MOVLW   0x06
003E CFDB F000 01630         MOVFF   PLUSW2, r0x04
0042 0E07      01631         MOVLW   0x07
0044 CFDB F000 01632         MOVFF   PLUSW2, r0x05
0048 0000      01633         BANKSEL _in_setting
               01634 ;       .line   210; timer.c    if (in_setting == HOURS) {
004A 5100      01635         MOVF    _in_setting, W, B
004C E100      01636         BNZ     _00157_DS_
               01637 ;       .line   211; timer.c    UpdateTimeValue(hours, MAX_HOURS, 0);
004E 0E00      01638         MOVLW   0x00
0050 6EE5      01639         MOVWF   POSTDEC1
0052 0E00      01640         MOVLW   0x00
0054 6EE5      01641         MOVWF   POSTDEC1
0056 0E00      01642         MOVLW   0x00
0058 6EE5      01643         MOVWF   POSTDEC1
005A 0E17      01644         MOVLW   0x17
005C 6EE5      01645         MOVWF   POSTDEC1
005E 5000      01646         MOVF    r0x02, W
0060 6EE5      01647         MOVWF   POSTDEC1
0062 5000      01648         MOVF    r0x01, W
0064 6EE5      01649         MOVWF   POSTDEC1
0066 5000      01650         MOVF    r0x00, W
0068 6EE5      01651         MOVWF   POSTDEC1
006A EC00 F000 01652         CALL    _UpdateTimeValue
006E 0E07      01653         MOVLW   0x07
0070 26E1      01654         ADDWF   FSR1L, F
0072 0000      01655         BANKSEL (_flags + 2)
               01656 ;       .line   212; timer.c    DisplayString(16 + 6 * flags.awake_setting_procedure, &time_value[0]);
0074 5100      01657         MOVF    (_flags + 2), W, B
0076 6E00      01658         MOVWF   r0x00
               01659 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               01660 ; ;Unrolled 8 X 8 multiplication
               01661 ; ;FIXME: the function does not support result==WREG
0078 5000      01662         MOVF    r0x00, W
007A 0D06      01663         MULLW   0x06
007C CFF3 F000 01664         MOVFF   PRODL, r0x00
0080 0E10      01665         MOVLW   0x10
0082 2600      01666         ADDWF   r0x00, F
0084 0E00      01667         MOVLW   HIGH(_time_value)
0086 6E00      01668         MOVWF   r0x02
0088 0E00      01669         MOVLW   LOW(_time_value)
008A 6E00      01670         MOVWF   r0x01
008C 0E80      01671         MOVLW   0x80
008E 6E00      01672         MOVWF   r0x06
0090 5000      01673         MOVF    r0x06, W
0092 6EE5      01674         MOVWF   POSTDEC1
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0094 5000      01675         MOVF    r0x02, W
0096 6EE5      01676         MOVWF   POSTDEC1
0098 5000      01677         MOVF    r0x01, W
009A 6EE5      01678         MOVWF   POSTDEC1
009C 5000      01679         MOVF    r0x00, W
009E 6EE5      01680         MOVWF   POSTDEC1
00A0 EC00 F000 01681         CALL    _DisplayString
00A4 0E04      01682         MOVLW   0x04
00A6 26E1      01683         ADDWF   FSR1L, F
00A8 D000      01684         BRA     _00159_DS_
00AA 01685 _00157_DS_:
               01686 ;       .line   214; timer.c    UpdateTimeValue(minutes, MAX_MINUTES, 3);
00AA 0E00      01687         MOVLW   0x00
00AC 6EE5      01688         MOVWF   POSTDEC1
00AE 0E03      01689         MOVLW   0x03
00B0 6EE5      01690         MOVWF   POSTDEC1
00B2 0E00      01691         MOVLW   0x00
00B4 6EE5      01692         MOVWF   POSTDEC1
00B6 0E3B      01693         MOVLW   0x3b
00B8 6EE5      01694         MOVWF   POSTDEC1
00BA 5000      01695         MOVF    r0x05, W
00BC 6EE5      01696         MOVWF   POSTDEC1
00BE 5000      01697         MOVF    r0x04, W
00C0 6EE5      01698         MOVWF   POSTDEC1
00C2 5000      01699         MOVF    r0x03, W
00C4 6EE5      01700         MOVWF   POSTDEC1
00C6 EC00 F000 01701         CALL    _UpdateTimeValue
00CA 0E07      01702         MOVLW   0x07
00CC 26E1      01703         ADDWF   FSR1L, F
00CE 0000      01704         BANKSEL (_flags + 2)
               01705 ;       .line   215; timer.c    DisplayString(19 + 6 * flags.awake_setting_procedure, &time_value[3]);
00D0 5100      01706         MOVF    (_flags + 2), W, B
00D2 6E00      01707         MOVWF   r0x00
               01708 ; ;multiply lit val:0x06 by variable r0x00 and store in r0x00
               01709 ; ;Unrolled 8 X 8 multiplication
               01710 ; ;FIXME: the function does not support result==WREG
00D4 5000      01711         MOVF    r0x00, W
00D6 0D06      01712         MULLW   0x06
00D8 CFF3 F000 01713         MOVFF   PRODL, r0x00
00DC 0E13      01714         MOVLW   0x13
00DE 2600      01715         ADDWF   r0x00, F
00E0 0E00      01716         MOVLW   HIGH(_time_value + 3)
00E2 6E00      01717         MOVWF   r0x02
00E4 0E00      01718         MOVLW   LOW(_time_value + 3)
00E6 6E00      01719         MOVWF   r0x01
00E8 0E80      01720         MOVLW   0x80
00EA 6E00      01721         MOVWF   r0x03
00EC 5000      01722         MOVF    r0x03, W
00EE 6EE5      01723         MOVWF   POSTDEC1
00F0 5000      01724         MOVF    r0x02, W
00F2 6EE5      01725         MOVWF   POSTDEC1
00F4 5000      01726         MOVF    r0x01, W
00F6 6EE5      01727         MOVWF   POSTDEC1
00F8 5000      01728         MOVF    r0x00, W
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00FA 6EE5      01729         MOVWF   POSTDEC1
00FC EC00 F000 01730         CALL    _DisplayString
0100 0E04      01731         MOVLW   0x04
0102 26E1      01732         ADDWF   FSR1L, F
0104 01733 _00159_DS_:
0104 CFE4 F000 01734         MOVFF   PREINC1, r0x06
0108 CFE4 F000 01735         MOVFF   PREINC1, r0x05
010C CFE4 F000 01736         MOVFF   PREINC1, r0x04
0110 CFE4 F000 01737         MOVFF   PREINC1, r0x03
0114 CFE4 F000 01738         MOVFF   PREINC1, r0x02
0118 CFE4 F000 01739         MOVFF   PREINC1, r0x01
011C CFE4 F000 01740         MOVFF   PREINC1, r0x00
0120 CFE4 FFD9 01741         MOVFF   PREINC1, FSR2L
0124 0012      01742         RETURN  
               01743 
               01744 ; ; Starting pCode block
               01745 S_timer__HandleButton1Pressure  code
0000 01746 _HandleButton1Pressure:
               01747 ;       .line   153; timer.c    void HandleButton1Pressure() {
0000 CFD9 FFE5 01748         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01749         MOVFF   FSR1L, FSR2L
0008 0000      01750         BANKSEL _flags
               01751 ;       .line   154; timer.c    if (flags.time_setting_procedure) { // setting clock's time
000A 5100      01752         MOVF    _flags, W, B
000C 0000      01753         BANKSEL (_flags + 1)
000E 1100      01754         IORWF   (_flags + 1), W, B
0010 B4D8      01755         BTFSC   STATUS, 2
0012 D000      01756         BRA     _00149_DS_
0014 0000      01757         BANKSEL _in_setting
               01758 ;       .line   155; timer.c    if (in_setting == HOURS) {
0016 5100      01759         MOVF    _in_setting, W, B
0018 E100      01760         BNZ     _00138_DS_
               01761 ;       .line   156; timer.c    CompleteHoursSetting(); // start minutes setting
001A EC00 F000 01762         CALL    _CompleteHoursSetting
001E D000      01763         BRA     _00151_DS_
0020 01764 _00138_DS_:
0020 0000      01765         BANKSEL _setting
               01766 ;       .line   159; timer.c    clock.hours = setting.hours;
0022 5100      01767         MOVF    _setting, W, B
0024 0000      01768         BANKSEL _clock
0026 6F00      01769         MOVWF   _clock, B
0028 0000      01770         BANKSEL (_setting + 1)
002A 5100      01771         MOVF    (_setting + 1), W, B
002C 0000      01772         BANKSEL (_clock + 1)
002E 6F00      01773         MOVWF   (_clock + 1), B
0030 0000      01774         BANKSEL (_setting + 2)
               01775 ;       .line   160; timer.c    clock.minutes = setting.minutes;
0032 5100      01776         MOVF    (_setting + 2), W, B
0034 0000      01777         BANKSEL (_clock + 2)
0036 6F00      01778         MOVWF   (_clock + 2), B
0038 0000      01779         BANKSEL (_setting + 3)
003A 5100      01780         MOVF    (_setting + 3), W, B
003C 0000      01781         BANKSEL (_clock + 3)
003E 6F00      01782         MOVWF   (_clock + 3), B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0040 0000      01783         BANKSEL (_clock + 4)
               01784 ;       .line   161; timer.c    clock.seconds = 0;
0042 6B00      01785         CLRF    (_clock + 4), B
0044 0000      01786         BANKSEL (_clock + 5)
0046 6B00      01787         CLRF    (_clock + 5), B
0048 0000      01788         BANKSEL _flags
               01789 ;       .line   162; timer.c    flags.time_setting_procedure = 0; // end the time setting
004A 6B00      01790         CLRF    _flags, B
004C 0000      01791         BANKSEL (_flags + 1)
004E 6B00      01792         CLRF    (_flags + 1), B
0050 0000      01793         BANKSEL (_flags + 4)
               01794 ;       .line   164; timer.c    if (!flags.set) {
0052 5100      01795         MOVF    (_flags + 4), W, B
0054 0000      01796         BANKSEL (_flags + 5)
0056 1100      01797         IORWF   (_flags + 5), W, B
0058 E100      01798         BNZ     _00135_DS_
               01799 ;       .line   165; timer.c    flags.awake_setting_procedure = 1; // start the second procedure
005A 0E01      01800         MOVLW   0x01
005C 0000      01801         BANKSEL (_flags + 2)
005E 6F00      01802         MOVWF   (_flags + 2), B
0060 0000      01803         BANKSEL (_flags + 3)
0062 6B00      01804         CLRF    (_flags + 3), B
               01805 ;       .line   167; timer.c    time_value[0] = time_value[1] = time_value[3] = time_value[4] = '0';
0064 0E30      01806         MOVLW   0x30
0066 0000      01807         BANKSEL (_time_value + 4)
0068 6F00      01808         MOVWF   (_time_value + 4), B
006A 0E30      01809         MOVLW   0x30
006C 0000      01810         BANKSEL (_time_value + 3)
006E 6F00      01811         MOVWF   (_time_value + 3), B
0070 0E30      01812         MOVLW   0x30
0072 0000      01813         BANKSEL (_time_value + 1)
0074 6F00      01814         MOVWF   (_time_value + 1), B
0076 0E30      01815         MOVLW   0x30
0078 0000      01816         BANKSEL _time_value
007A 6F00      01817         MOVWF   _time_value, B
               01818 ;       .line   168; timer.c    UpdateDisplay(TIMER_SETTING);
007C 0E01      01819         MOVLW   0x01
007E 6EE5      01820         MOVWF   POSTDEC1
0080 EC00 F000 01821         CALL    _UpdateDisplay
0084 2AE1      01822         INCF    FSR1L, F
0086 0000      01823         BANKSEL _in_setting
               01824 ;       .line   169; timer.c    in_setting = HOURS; // start from setting hours
0088 6B00      01825         CLRF    _in_setting, B
008A D000      01826         BRA     _00151_DS_
008C 01827 _00135_DS_:
               01828 ;       .line   171; timer.c    SetupCompleteTime();
008C EC00 F000 01829         CALL    _SetupCompleteTime
0090 D000      01830         BRA     _00151_DS_
0092 01831 _00149_DS_:
0092 0000      01832         BANKSEL (_flags + 2)
               01833 ;       .line   174; timer.c    } else if (flags.awake_setting_procedure) { // setting the awake time
0094 5100      01834         MOVF    (_flags + 2), W, B
0096 0000      01835         BANKSEL (_flags + 3)
0098 1100      01836         IORWF   (_flags + 3), W, B
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
009A E000      01837         BZ      _00146_DS_
009C 0000      01838         BANKSEL _in_setting
               01839 ;       .line   175; timer.c    if (in_setting == HOURS) {
009E 5100      01840         MOVF    _in_setting, W, B
00A0 E100      01841         BNZ     _00141_DS_
               01842 ;       .line   176; timer.c    CompleteHoursSetting();
00A2 EC00 F000 01843         CALL    _CompleteHoursSetting
00A6 D000      01844         BRA     _00151_DS_
00A8 01845 _00141_DS_:
00A8 0000      01846         BANKSEL (_flags + 2)
               01847 ;       .line   179; timer.c    flags.awake_setting_procedure = 0; 
00AA 6B00      01848         CLRF    (_flags + 2), B
00AC 0000      01849         BANKSEL (_flags + 3)
00AE 6B00      01850         CLRF    (_flags + 3), B
               01851 ;       .line   180; timer.c    flags.set = 1; 
00B0 0E01      01852         MOVLW   0x01
00B2 0000      01853         BANKSEL (_flags + 4)
00B4 6F00      01854         MOVWF   (_flags + 4), B
00B6 0000      01855         BANKSEL (_flags + 5)
00B8 6B00      01856         CLRF    (_flags + 5), B
               01857 ;       .line   182; timer.c    SetupCompleteTime();
00BA EC00 F000 01858         CALL    _SetupCompleteTime
               01859 ;       .line   183; timer.c    T1CONbits.TMR1ON    =    1;
00BE 8000      01860         BSF     _T1CONbits, 0
00C0 D000      01861         BRA     _00151_DS_
00C2 01862 _00146_DS_:
00C2 0000      01863         BANKSEL (_flags + 4)
               01864 ;       .line   185; timer.c    } else if (flags.set) {
00C4 5100      01865         MOVF    (_flags + 4), W, B
00C6 0000      01866         BANKSEL (_flags + 5)
00C8 1100      01867         IORWF   (_flags + 5), W, B
00CA B4D8      01868         BTFSC   STATUS, 2
00CC D000      01869         BRA     _00151_DS_
00CE 0000      01870         BANKSEL _clock
               01871 ;       .line   187; timer.c    setting.hours   = clock.hours;
00D0 5100      01872         MOVF    _clock, W, B
00D2 0000      01873         BANKSEL _setting
00D4 6F00      01874         MOVWF   _setting, B
00D6 0000      01875         BANKSEL (_clock + 1)
00D8 5100      01876         MOVF    (_clock + 1), W, B
00DA 0000      01877         BANKSEL (_setting + 1)
00DC 6F00      01878         MOVWF   (_setting + 1), B
00DE 0000      01879         BANKSEL (_clock + 2)
               01880 ;       .line   188; timer.c    setting.minutes = clock.minutes;
00E0 5100      01881         MOVF    (_clock + 2), W, B
00E2 0000      01882         BANKSEL (_setting + 2)
00E4 6F00      01883         MOVWF   (_setting + 2), B
00E6 0000      01884         BANKSEL (_clock + 3)
00E8 5100      01885         MOVF    (_clock + 3), W, B
00EA 0000      01886         BANKSEL (_setting + 3)
00EC 6F00      01887         MOVWF   (_setting + 3), B
               01888 ;       .line   189; timer.c    flags.time_setting_procedure = 1; // start the time setting
00EE 0E01      01889         MOVLW   0x01
00F0 0000      01890         BANKSEL _flags
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00F2 6F00      01891         MOVWF   _flags, B
00F4 0000      01892         BANKSEL (_flags + 1)
00F6 6B00      01893         CLRF    (_flags + 1), B
               01894 ;       .line   190; timer.c    Int2String(setting.hours, 0);
00F8 0E00      01895         MOVLW   0x00
00FA 6EE5      01896         MOVWF   POSTDEC1
00FC 0E00      01897         MOVLW   0x00
00FE 6EE5      01898         MOVWF   POSTDEC1
0100 0000      01899         BANKSEL (_setting + 1)
0102 5100      01900         MOVF    (_setting + 1), W, B
0104 6EE5      01901         MOVWF   POSTDEC1
0106 0000      01902         BANKSEL _setting
0108 5100      01903         MOVF    _setting, W, B
010A 6EE5      01904         MOVWF   POSTDEC1
010C EC00 F000 01905         CALL    _Int2String
0110 0E04      01906         MOVLW   0x04
0112 26E1      01907         ADDWF   FSR1L, F
               01908 ;       .line   191; timer.c    time_value[2] = ':';
0114 0E3A      01909         MOVLW   0x3a
0116 0000      01910         BANKSEL (_time_value + 2)
0118 6F00      01911         MOVWF   (_time_value + 2), B
               01912 ;       .line   192; timer.c    Int2String(setting.minutes, 3);
011A 0E00      01913         MOVLW   0x00
011C 6EE5      01914         MOVWF   POSTDEC1
011E 0E03      01915         MOVLW   0x03
0120 6EE5      01916         MOVWF   POSTDEC1
0122 0000      01917         BANKSEL (_setting + 3)
0124 5100      01918         MOVF    (_setting + 3), W, B
0126 6EE5      01919         MOVWF   POSTDEC1
0128 0000      01920         BANKSEL (_setting + 2)
012A 5100      01921         MOVF    (_setting + 2), W, B
012C 6EE5      01922         MOVWF   POSTDEC1
012E EC00 F000 01923         CALL    _Int2String
0132 0E04      01924         MOVLW   0x04
0134 26E1      01925         ADDWF   FSR1L, F
               01926 ;       .line   193; timer.c    UpdateDisplay(CLOCK_SETTING);
0136 0E00      01927         MOVLW   0x00
0138 6EE5      01928         MOVWF   POSTDEC1
013A EC00 F000 01929         CALL    _UpdateDisplay
013E 2AE1      01930         INCF    FSR1L, F
0140 0000      01931         BANKSEL _in_setting
               01932 ;       .line   194; timer.c    in_setting = HOURS;
0142 6B00      01933         CLRF    _in_setting, B
0144 01934 _00151_DS_:
0144 CFE4 FFD9 01935         MOVFF   PREINC1, FSR2L
0148 0012      01936         RETURN  
               01937 
               01938 ; ; Starting pCode block
               01939 S_timer__SetupCompleteTime      code
0000 01940 _SetupCompleteTime:
               01941 ;       .line   137; timer.c    void SetupCompleteTime() {
0000 CFD9 FFE5 01942         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 01943         MOVFF   FSR1L, FSR2L
               01944 ;       .line   139; timer.c    Int2String(clock.hours, 0);
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0008 0E00      01945         MOVLW   0x00
000A 6EE5      01946         MOVWF   POSTDEC1
000C 0E00      01947         MOVLW   0x00
000E 6EE5      01948         MOVWF   POSTDEC1
0010 0000      01949         BANKSEL (_clock + 1)
0012 5100      01950         MOVF    (_clock + 1), W, B
0014 6EE5      01951         MOVWF   POSTDEC1
0016 0000      01952         BANKSEL _clock
0018 5100      01953         MOVF    _clock, W, B
001A 6EE5      01954         MOVWF   POSTDEC1
001C EC00 F000 01955         CALL    _Int2String
0020 0E04      01956         MOVLW   0x04
0022 26E1      01957         ADDWF   FSR1L, F
               01958 ;       .line   140; timer.c    time_value[2] = ':';
0024 0E3A      01959         MOVLW   0x3a
0026 0000      01960         BANKSEL (_time_value + 2)
0028 6F00      01961         MOVWF   (_time_value + 2), B
               01962 ;       .line   141; timer.c    Int2String(clock.minutes, 3);
002A 0E00      01963         MOVLW   0x00
002C 6EE5      01964         MOVWF   POSTDEC1
002E 0E03      01965         MOVLW   0x03
0030 6EE5      01966         MOVWF   POSTDEC1
0032 0000      01967         BANKSEL (_clock + 3)
0034 5100      01968         MOVF    (_clock + 3), W, B
0036 6EE5      01969         MOVWF   POSTDEC1
0038 0000      01970         BANKSEL (_clock + 2)
003A 5100      01971         MOVF    (_clock + 2), W, B
003C 6EE5      01972         MOVWF   POSTDEC1
003E EC00 F000 01973         CALL    _Int2String
0042 0E04      01974         MOVLW   0x04
0044 26E1      01975         ADDWF   FSR1L, F
               01976 ;       .line   142; timer.c    time_value[5] = ':';
0046 0E3A      01977         MOVLW   0x3a
0048 0000      01978         BANKSEL (_time_value + 5)
004A 6F00      01979         MOVWF   (_time_value + 5), B
               01980 ;       .line   143; timer.c    Int2String(clock.seconds, 6);
004C 0E00      01981         MOVLW   0x00
004E 6EE5      01982         MOVWF   POSTDEC1
0050 0E06      01983         MOVLW   0x06
0052 6EE5      01984         MOVWF   POSTDEC1
0054 0000      01985         BANKSEL (_clock + 5)
0056 5100      01986         MOVF    (_clock + 5), W, B
0058 6EE5      01987         MOVWF   POSTDEC1
005A 0000      01988         BANKSEL (_clock + 4)
005C 5100      01989         MOVF    (_clock + 4), W, B
005E 6EE5      01990         MOVWF   POSTDEC1
0060 EC00 F000 01991         CALL    _Int2String
0064 0E04      01992         MOVLW   0x04
0066 26E1      01993         ADDWF   FSR1L, F
               01994 ;       .line   145; timer.c    UpdateDisplay(TIME_FLOWING);
0068 0E02      01995         MOVLW   0x02
006A 6EE5      01996         MOVWF   POSTDEC1
006C EC00 F000 01997         CALL    _UpdateDisplay
0070 2AE1      01998         INCF    FSR1L, F
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0072 CFE4 FFD9 01999         MOVFF   PREINC1, FSR2L
0076 0012      02000         RETURN  
               02001 
               02002 ; ; Starting pCode block
               02003 S_timer__Int2String     code
0000 02004 _Int2String:
               02005 ;       .line   123; timer.c    void Int2String(int value, int pos) {
0000 CFD9 FFE5 02006         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02007         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02008         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02009         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02010         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02011         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02012         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02013         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02014         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02015         MOVFF   r0x07, POSTDEC1
0028 0E02      02016         MOVLW   0x02
002A CFDB F000 02017         MOVFF   PLUSW2, r0x00
002E 0E03      02018         MOVLW   0x03
0030 CFDB F000 02019         MOVFF   PLUSW2, r0x01
0034 0E04      02020         MOVLW   0x04
0036 CFDB F000 02021         MOVFF   PLUSW2, r0x02
003A 0E05      02022         MOVLW   0x05
003C CFDB F000 02023         MOVFF   PLUSW2, r0x03
               02024 ;       .line   124; timer.c    ultoa(value, &time_value[pos], BASE);
0040 6AE8      02025         CLRF    WREG
0042 BE00      02026         BTFSC   r0x01, 7
0044 0EFF      02027         MOVLW   0xff
0046 6E00      02028         MOVWF   r0x04
0048 6E00      02029         MOVWF   r0x05
004A 0E00      02030         MOVLW   LOW(_time_value)
004C 2400      02031         ADDWF   r0x02, W
004E 6E00      02032         MOVWF   r0x06
0050 0E00      02033         MOVLW   HIGH(_time_value)
0052 2000      02034         ADDWFC  r0x03, W
0054 6E00      02035         MOVWF   r0x07
0056 0E0A      02036         MOVLW   0x0a
0058 6EE5      02037         MOVWF   POSTDEC1
005A 5000      02038         MOVF    r0x07, W
005C 6EE5      02039         MOVWF   POSTDEC1
005E 5000      02040         MOVF    r0x06, W
0060 6EE5      02041         MOVWF   POSTDEC1
0062 5000      02042         MOVF    r0x05, W
0064 6EE5      02043         MOVWF   POSTDEC1
0066 5000      02044         MOVF    r0x04, W
0068 6EE5      02045         MOVWF   POSTDEC1
006A 5000      02046         MOVF    r0x01, W
006C 6EE5      02047         MOVWF   POSTDEC1
006E 5000      02048         MOVF    r0x00, W
0070 6EE5      02049         MOVWF   POSTDEC1
0072 EC00 F000 02050         CALL    _ultoa
0076 0E07      02051         MOVLW   0x07
0078 26E1      02052         ADDWF   FSR1L, F
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
               02053 ;       .line   126; timer.c    if (!(time_value[pos + 1])) {
007A 5000      02054         MOVF    r0x02, W
007C 6E00      02055         MOVWF   r0x00
007E 2800      02056         INCF    r0x00, W
0080 6E00      02057         MOVWF   r0x01
0082 6A00      02058         CLRF    r0x04
0084 BE00      02059         BTFSC   r0x01, 7
0086 6800      02060         SETF    r0x04
0088 0E00      02061         MOVLW   LOW(_time_value)
008A 2600      02062         ADDWF   r0x01, F
008C 0E00      02063         MOVLW   HIGH(_time_value)
008E 2200      02064         ADDWFC  r0x04, F
0090 C000 FFE9 02065         MOVFF   r0x01, FSR0L
0094 C000 FFEA 02066         MOVFF   r0x04, FSR0H
0098 CFEF F000 02067         MOVFF   INDF0, r0x05
009C 5000      02068         MOVF    r0x05, W
009E E100      02069         BNZ     _00124_DS_
               02070 ;       .line   127; timer.c    time_value[pos + 1] = time_value[pos];
00A0 0E00      02071         MOVLW   LOW(_time_value)
00A2 2600      02072         ADDWF   r0x02, F
00A4 0E00      02073         MOVLW   HIGH(_time_value)
00A6 2200      02074         ADDWFC  r0x03, F
00A8 C000 FFE9 02075         MOVFF   r0x02, FSR0L
00AC C000 FFEA 02076         MOVFF   r0x03, FSR0H
00B0 CFEF F000 02077         MOVFF   INDF0, r0x05
00B4 C000 FFE9 02078         MOVFF   r0x01, FSR0L
00B8 C000 FFEA 02079         MOVFF   r0x04, FSR0H
00BC C000 FFEF 02080         MOVFF   r0x05, INDF0
               02081 ;       .line   128; timer.c    time_value[pos] = '0';
00C0 C000 FFE9 02082         MOVFF   r0x02, FSR0L
00C4 C000 FFEA 02083         MOVFF   r0x03, FSR0H
00C8 0E30      02084         MOVLW   0x30
00CA 6EEF      02085         MOVWF   INDF0
               02086 ;       .line   129; timer.c    time_value[pos + 2] = '\0';
00CC 2A00      02087         INCF    r0x00, F
00CE 2A00      02088         INCF    r0x00, F
00D0 6A00      02089         CLRF    r0x01
00D2 BE00      02090         BTFSC   r0x00, 7
00D4 6800      02091         SETF    r0x01
00D6 0E00      02092         MOVLW   LOW(_time_value)
00D8 2600      02093         ADDWF   r0x00, F
00DA 0E00      02094         MOVLW   HIGH(_time_value)
00DC 2200      02095         ADDWFC  r0x01, F
00DE C000 FFE9 02096         MOVFF   r0x00, FSR0L
00E2 C000 FFEA 02097         MOVFF   r0x01, FSR0H
00E6 0E00      02098         MOVLW   0x00
00E8 6EEF      02099         MOVWF   INDF0
00EA 02100 _00124_DS_:
00EA CFE4 F000 02101         MOVFF   PREINC1, r0x07
00EE CFE4 F000 02102         MOVFF   PREINC1, r0x06
00F2 CFE4 F000 02103         MOVFF   PREINC1, r0x05
00F6 CFE4 F000 02104         MOVFF   PREINC1, r0x04
00FA CFE4 F000 02105         MOVFF   PREINC1, r0x03
00FE CFE4 F000 02106         MOVFF   PREINC1, r0x02
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
0102 CFE4 F000 02107         MOVFF   PREINC1, r0x01
0106 CFE4 F000 02108         MOVFF   PREINC1, r0x00
010A CFE4 FFD9 02109         MOVFF   PREINC1, FSR2L
010E 0012      02110         RETURN  
               02111 
               02112 ; ; Starting pCode block
               02113 S_timer__CompleteHoursSetting   code
0000 02114 _CompleteHoursSetting:
               02115 ;       .line   111; timer.c    void CompleteHoursSetting() {
0000 CFD9 FFE5 02116         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02117         MOVFF   FSR1L, FSR2L
               02118 ;       .line   112; timer.c    in_setting = MINUTES;
0008 0E01      02119         MOVLW   0x01
000A 0000      02120         BANKSEL _in_setting
000C 6F00      02121         MOVWF   _in_setting, B
               02122 ;       .line   113; timer.c    time_value[2] = ':'; // overwite '\0' added by ultoa when setting hours
000E 0E3A      02123         MOVLW   0x3a
0010 0000      02124         BANKSEL (_time_value + 2)
0012 6F00      02125         MOVWF   (_time_value + 2), B
0014 CFE4 FFD9 02126         MOVFF   PREINC1, FSR2L
0018 0012      02127         RETURN  
               02128 
               02129 ; ; Starting pCode block
               02130 S_timer__UpdateTimeValue        code
0000 02131 _UpdateTimeValue:
               02132 ;       .line   98; timer.c     void UpdateTimeValue(int* const value, int limit, int pos) {
0000 CFD9 FFE5 02133         MOVFF   FSR2L, POSTDEC1
0004 CFE1 FFD9 02134         MOVFF   FSR1L, FSR2L
0008 C000 FFE5 02135         MOVFF   r0x00, POSTDEC1
000C C000 FFE5 02136         MOVFF   r0x01, POSTDEC1
0010 C000 FFE5 02137         MOVFF   r0x02, POSTDEC1
0014 C000 FFE5 02138         MOVFF   r0x03, POSTDEC1
0018 C000 FFE5 02139         MOVFF   r0x04, POSTDEC1
001C C000 FFE5 02140         MOVFF   r0x05, POSTDEC1
0020 C000 FFE5 02141         MOVFF   r0x06, POSTDEC1
0024 C000 FFE5 02142         MOVFF   r0x07, POSTDEC1
0028 C000 FFE5 02143         MOVFF   r0x08, POSTDEC1
002C 0E02      02144         MOVLW   0x02
002E CFDB F000 02145         MOVFF   PLUSW2, r0x00
0032 0E03      02146         MOVLW   0x03
0034 CFDB F000 02147         MOVFF   PLUSW2, r0x01
0038 0E04      02148         MOVLW   0x04
003A CFDB F000 02149         MOVFF   PLUSW2, r0x02
003E 0E05      02150         MOVLW   0x05
0040 CFDB F000 02151         MOVFF   PLUSW2, r0x03
0044 0E06      02152         MOVLW   0x06
0046 CFDB F000 02153         MOVFF   PLUSW2, r0x04
004A 0E07      02154         MOVLW   0x07
004C CFDB F000 02155         MOVFF   PLUSW2, r0x05
0050 0E08      02156         MOVLW   0x08
0052 CFDB F000 02157         MOVFF   PLUSW2, r0x06
               02158 ;       .line   99; timer.c     if (*value == limit) {
0056 C000 FFE9 02159         MOVFF   r0x00, FSR0L
005A C000 FFF3 02160         MOVFF   r0x01, PRODL
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
005E 5000      02161         MOVF    r0x02, W
0060 EC00 F000 02162         CALL    __gptrget2
0064 6E00      02163         MOVWF   r0x07
0066 CFF3 F000 02164         MOVFF   PRODL, r0x08
006A 5000      02165         MOVF    r0x07, W
006C 1800      02166         XORWF   r0x03, W
006E E100      02167         BNZ     _00111_DS_
0070 5000      02168         MOVF    r0x08, W
0072 1800      02169         XORWF   r0x04, W
0074 E000      02170         BZ      _00112_DS_
0076 02171 _00111_DS_:
0076 D000      02172         BRA     _00106_DS_
0078 02173 _00112_DS_:
               02174 ;       .line   100; timer.c    *value = 0;
0078 0E00      02175         MOVLW   0x00
007A 6EE5      02176         MOVWF   POSTDEC1
007C 0E00      02177         MOVLW   0x00
007E 6EF4      02178         MOVWF   PRODH
0080 C000 FFE9 02179         MOVFF   r0x00, FSR0L
0084 C000 FFF3 02180         MOVFF   r0x01, PRODL
0088 5000      02181         MOVF    r0x02, W
008A EC00 F000 02182         CALL    __gptrput2
008E D000      02183         BRA     _00107_DS_
0090 02184 _00106_DS_:
               02185 ;       .line   102; timer.c    (*value)++;
0090 2A00      02186         INCF    r0x07, F
0092 B0D8      02187         BTFSC   STATUS, 0
0094 2A00      02188         INCF    r0x08, F
0096 C000 FFE5 02189         MOVFF   r0x07, POSTDEC1
009A C000 FFF4 02190         MOVFF   r0x08, PRODH
009E C000 FFE9 02191         MOVFF   r0x00, FSR0L
00A2 C000 FFF3 02192         MOVFF   r0x01, PRODL
00A6 5000      02193         MOVF    r0x02, W
00A8 EC00 F000 02194         CALL    __gptrput2
00AC 02195 _00107_DS_:
               02196 ;       .line   104; timer.c    Int2String(*value, pos);
00AC C000 FFE9 02197         MOVFF   r0x00, FSR0L
00B0 C000 FFF3 02198         MOVFF   r0x01, PRODL
00B4 5000      02199         MOVF    r0x02, W
00B6 EC00 F000 02200         CALL    __gptrget2
00BA 6E00      02201         MOVWF   r0x00
00BC CFF3 F000 02202         MOVFF   PRODL, r0x01
00C0 5000      02203         MOVF    r0x06, W
00C2 6EE5      02204         MOVWF   POSTDEC1
00C4 5000      02205         MOVF    r0x05, W
00C6 6EE5      02206         MOVWF   POSTDEC1
00C8 5000      02207         MOVF    r0x01, W
00CA 6EE5      02208         MOVWF   POSTDEC1
00CC 5000      02209         MOVF    r0x00, W
00CE 6EE5      02210         MOVWF   POSTDEC1
00D0 EC00 F000 02211         CALL    _Int2String
00D4 0E04      02212         MOVLW   0x04
00D6 26E1      02213         ADDWF   FSR1L, F
00D8 CFE4 F000 02214         MOVFF   PREINC1, r0x08
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
00DC CFE4 F000 02215         MOVFF   PREINC1, r0x07
00E0 CFE4 F000 02216         MOVFF   PREINC1, r0x06
00E4 CFE4 F000 02217         MOVFF   PREINC1, r0x05
00E8 CFE4 F000 02218         MOVFF   PREINC1, r0x04
00EC CFE4 F000 02219         MOVFF   PREINC1, r0x03
00F0 CFE4 F000 02220         MOVFF   PREINC1, r0x02
00F4 CFE4 F000 02221         MOVFF   PREINC1, r0x01
00F8 CFE4 F000 02222         MOVFF   PREINC1, r0x00
00FC CFE4 FFD9 02223         MOVFF   PREINC1, FSR2L
0100 0012      02224         RETURN  
               02225 
               02226 ; ; Starting pCode block
0102 02227 __str_0:
0102 6E45 6574 02228         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69
     2072 6874 
     2065 6974 
010E 656D 003A 02229         DB      0x6d, 0x65, 0x3a, 0x00
               02230 ; ; Starting pCode block
0112 02231 __str_1:
0112 2020 0020 02232         DB      0x20, 0x20, 0x20, 0x00
               02233 ; ; Starting pCode block
0116 02234 __str_2:
0116 6E45 6574 02235         DB      0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x77
     2072 6874 
     2065 7761 
0122 6B61 2065 02236         DB      0x61, 0x6b, 0x65, 0x20, 0x00
     0000      
               02237 ; ; Starting pCode block
0128 02238 __str_3:
0128 6974 656D 02239         DB      0x74, 0x69, 0x6d, 0x65, 0x3a, 0x20, 0x00
     203A 0000 
               02240 ; ; Starting pCode block
0130 02241 __str_4:
0130 2020 2020 02242         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
     2020 2020 
     2020 2020 
013C 2020 2020 02243         DB      0x20, 0x20, 0x20, 0x20, 0x00
     0000      
               02244 ; ; Starting pCode block
0142 02245 __str_5:
0142 2020 2020 02246         DB      0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00
     2020 2020 
     0020      
               02247 
               02248 
               02249 ; Statistics:
               02250 ; code size:     3358 (0x0d1e) bytes ( 2.56%)
               02251 ;                1679 (0x068f) words
               02252 ; udata size:      40 (0x0028) bytes ( 1.04%)
               02253 ; access size:     10 (0x000a) bytes
               02254 
               02255 
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

BSR                               00000FE0
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1L                             00000FE1
FSR2L                             00000FD9
INDF0                             00000FEF
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PLUSW2                            00000FDB
POSTDEC1                          00000FE5
PREINC1                           00000FE4
PRODH                             00000FF4
PRODL                             00000FF3
STATUS                            00000FD8
WREG                              00000FE8
_00106_DS_                        00000090
_00107_DS_                        000000AC
_00111_DS_                        00000076
_00112_DS_                        00000078
_00124_DS_                        000000EA
_00135_DS_                        0000008C
_00138_DS_                        00000020
_00141_DS_                        000000A8
_00146_DS_                        000000C2
_00149_DS_                        00000092
_00151_DS_                        00000144
_00157_DS_                        000000AA
_00159_DS_                        00000104
_00167_DS_                        000000A8
_00170_DS_                        00000064
_00172_DS_                        00000108
_00187_DS_                        00000064
_00188_DS_                        000000BA
_00189_DS_                        00000110
_00191_DS_                        00000164
_00195_DS_                        00000058
_00201_DS_                        000000C6
_00207_DS_                        00000106
_00208_DS_                        0000014C
_00209_DS_                        00000154
_00216_DS_                        0000018C
_00228_DS_                        000000E4
_00229_DS_                        000000E6
_00230_DS_                        000000FA
_00231_DS_                        000000FC
_00232_DS_                        00000120
_00233_DS_                        00000136
_00234_DS_                        00000138
_00242_DS_                        0000005A
_00244_DS_                        0000005C
_00246_DS_                        00000074
_00249_DS_                        0000008C
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_00265_DS_                        00000012
_00272_DS_                        0000005E
_00274_DS_                        00000072
_00277_DS_                        000000B6
_00278_DS_                        000000CE
_00281_DS_                        000000DE
_00283_DS_                        000000F4
_00287_DS_                        00000044
_00294_DS_                        00000090
_00298_DS_                        000000DE
_00302_DS_                        00000088
_ADCON0                           00000000
_ADCON0bits                       00000000
_ADCON1                           00000000
_ADCON1bits                       00000000
_ADCON2                           00000000
_ADCON2bits                       00000000
_ADRES                            00000000
_ADRESH                           00000000
_ADRESL                           00000000
_AssignDefaultValues              00000000
_BAUDCON                          00000000
_BAUDCON1                         00000000
_BAUDCON1bits                     00000000
_BAUDCON2                         00000000
_BAUDCON2bits                     00000000
_BAUDCONbits                      00000000
_BAUDCTL                          00000000
_BAUDCTL1                         00000000
_BAUDCTL1bits                     00000000
_BAUDCTL2                         00000000
_BAUDCTL2bits                     00000000
_BAUDCTLbits                      00000000
_BSR                              00000000
_CCP1CON                          00000000
_CCP1CONbits                      00000000
_CCP2CON                          00000000
_CCP2CONbits                      00000000
_CCP3CON                          00000000
_CCP3CONbits                      00000000
_CCP4CON                          00000000
_CCP4CONbits                      00000000
_CCP5CON                          00000000
_CCP5CONbits                      00000000
_CCPR1                            00000000
_CCPR1H                           00000000
_CCPR1L                           00000000
_CCPR2                            00000000
_CCPR2H                           00000000
_CCPR2L                           00000000
_CCPR3                            00000000
_CCPR3H                           00000000
_CCPR3L                           00000000
_CCPR4                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_CCPR4H                           00000000
_CCPR4L                           00000000
_CCPR5                            00000000
_CCPR5H                           00000000
_CCPR5L                           00000000
_CMCON                            00000000
_CMCONbits                        00000000
_CVRCON                           00000000
_CVRCONbits                       00000000
_CompleteHoursSetting             00000000
_ConfigureRegisters               00000000
_DDRA                             00000000
_DDRAbits                         00000000
_DDRB                             00000000
_DDRBbits                         00000000
_DDRC                             00000000
_DDRCbits                         00000000
_DDRD                             00000000
_DDRDbits                         00000000
_DDRE                             00000000
_DDREbits                         00000000
_DDRF                             00000000
_DDRFbits                         00000000
_DDRG                             00000000
_DDRGbits                         00000000
_DDRH                             00000000
_DDRHbits                         00000000
_DDRJ                             00000000
_DDRJbits                         00000000
_DisplayString                    00000000
_EBSTCON                          00000000
_EBSTCONbits                      00000000
_EBSTCS                           00000000
_EBSTCSH                          00000000
_EBSTCSL                          00000000
_EBSTSD                           00000000
_ECCP1AS                          00000000
_ECCP1ASbits                      00000000
_ECCP1CON                         00000000
_ECCP1CONbits                     00000000
_ECCP1DEL                         00000000
_ECCP1DELbits                     00000000
_ECCP2AS                          00000000
_ECCP2ASbits                      00000000
_ECCP2CON                         00000000
_ECCP2CONbits                     00000000
_ECCP2DEL                         00000000
_ECCP2DELbits                     00000000
_ECCP3AS                          00000000
_ECCP3ASbits                      00000000
_ECCP3CON                         00000000
_ECCP3CONbits                     00000000
_ECCP3DEL                         00000000
_ECCP3DELbits                     00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ECON1                            00000000
_ECON1bits                        00000000
_ECON2                            00000000
_ECON2bits                        00000000
_EDATA                            00000000
_EDATAbits                        00000000
_EDMACS                           00000000
_EDMACSH                          00000000
_EDMACSL                          00000000
_EDMADST                          00000000
_EDMADSTH                         00000000
_EDMADSTL                         00000000
_EDMAND                           00000000
_EDMANDH                          00000000
_EDMANDL                          00000000
_EDMAST                           00000000
_EDMASTH                          00000000
_EDMASTL                          00000000
_EECON1                           00000000
_EECON1bits                       00000000
_EECON2                           00000000
_EFLOCON                          00000000
_EFLOCONbits                      00000000
_EHT0                             00000000
_EHT1                             00000000
_EHT2                             00000000
_EHT3                             00000000
_EHT4                             00000000
_EHT5                             00000000
_EHT6                             00000000
_EHT7                             00000000
_EIE                              00000000
_EIEbits                          00000000
_EIR                              00000000
_EIRbits                          00000000
_EPAUS                            00000000
_EPAUSH                           00000000
_EPAUSL                           00000000
_EPKTCNT                          00000000
_EPMCS                            00000000
_EPMCSH                           00000000
_EPMCSL                           00000000
_EPMM0                            00000000
_EPMM1                            00000000
_EPMM2                            00000000
_EPMM3                            00000000
_EPMM4                            00000000
_EPMM5                            00000000
_EPMM6                            00000000
_EPMM7                            00000000
_EPMO                             00000000
_EPMOH                            00000000
_EPMOL                            00000000
_ERDPT                            00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_ERDPTH                           00000000
_ERDPTL                           00000000
_ERXFCON                          00000000
_ERXFCONbits                      00000000
_ERXND                            00000000
_ERXNDH                           00000000
_ERXNDL                           00000000
_ERXRDPT                          00000000
_ERXRDPTH                         00000000
_ERXRDPTL                         00000000
_ERXST                            00000000
_ERXSTH                           00000000
_ERXSTL                           00000000
_ERXWRPT                          00000000
_ERXWRPTH                         00000000
_ERXWRPTL                         00000000
_ESTAT                            00000000
_ESTATbits                        00000000
_ETXND                            00000000
_ETXNDH                           00000000
_ETXNDL                           00000000
_ETXST                            00000000
_ETXSTH                           00000000
_ETXSTL                           00000000
_EWOLIE                           00000000
_EWOLIEbits                       00000000
_EWOLIR                           00000000
_EWOLIRbits                       00000000
_EWRPT                            00000000
_EWRPTH                           00000000
_EWRPTL                           00000000
_FSR0H                            00000000
_FSR0L                            00000000
_FSR1H                            00000000
_FSR1L                            00000000
_FSR2H                            00000000
_FSR2L                            00000000
_HandleButton1Pressure            00000000
_HandleButton2Pressure            00000000
_HighISR                          00000000
_INDF0                            00000000
_INDF1                            00000000
_INDF2                            00000000
_INTCON                           00000000
_INTCON2                          00000000
_INTCON2bits                      00000000
_INTCON3                          00000000
_INTCON3bits                      00000000
_INTCONbits                       00000000
_IPR1                             00000000
_IPR1bits                         00000000
_IPR2                             00000000
_IPR2bits                         00000000
_IPR3                             00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_IPR3bits                         00000000
_Int2String                       00000000
_LATA                             00000000
_LATAbits                         00000000
_LATB                             00000000
_LATBbits                         00000000
_LATC                             00000000
_LATCbits                         00000000
_LATD                             00000000
_LATDbits                         00000000
_LATE                             00000000
_LATEbits                         00000000
_LATF                             00000000
_LATFbits                         00000000
_LATG                             00000000
_LATGbits                         00000000
_LATH                             00000000
_LATHbits                         00000000
_LATJ                             00000000
_LATJbits                         00000000
_LCDInit                          00000000
_LCDText                          00000000
_LCDUpdate                        00000000
_MAADR1                           00000000
_MAADR2                           00000000
_MAADR3                           00000000
_MAADR4                           00000000
_MAADR5                           00000000
_MAADR6                           00000000
_MABBIPG                          00000000
_MACLCON1                         00000000
_MACLCON1bits                     00000000
_MACLCON2                         00000000
_MACLCON2bits                     00000000
_MACON1                           00000000
_MACON1bits                       00000000
_MACON2                           00000000
_MACON2bits                       00000000
_MACON3                           00000000
_MACON3bits                       00000000
_MACON4                           00000000
_MACON4bits                       00000000
_MAIPG                            00000000
_MAIPGH                           00000000
_MAIPGL                           00000000
_MAMXFL                           00000000
_MAMXFLH                          00000000
_MAMXFLL                          00000000
_MEMCON                           00000000
_MEMCONbits                       00000000
_MICMD                            00000000
_MICMDbits                        00000000
_MICON                            00000000
_MICONbits                        00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_MIRD                             00000000
_MIRDH                            00000000
_MIRDL                            00000000
_MIREGADR                         00000000
_MISTAT                           00000000
_MISTATbits                       00000000
_MIWR                             00000000
_MIWRH                            00000000
_MIWRL                            00000000
_OSCCON                           00000000
_OSCCONbits                       00000000
_OSCTUNE                          00000000
_OSCTUNEbits                      00000000
_PC                               00000000
_PCL                              00000000
_PCLATH                           00000000
_PCLATU                           00000000
_PIE1                             00000000
_PIE1bits                         00000000
_PIE2                             00000000
_PIE2bits                         00000000
_PIE3                             00000000
_PIE3bits                         00000000
_PIR1                             00000000
_PIR1bits                         00000000
_PIR2                             00000000
_PIR2bits                         00000000
_PIR3                             00000000
_PIR3bits                         00000000
_PLUSW0                           00000000
_PLUSW1                           00000000
_PLUSW2                           00000000
_PORTA                            00000000
_PORTAbits                        00000000
_PORTB                            00000000
_PORTBbits                        00000000
_PORTC                            00000000
_PORTCbits                        00000000
_PORTD                            00000000
_PORTDbits                        00000000
_PORTE                            00000000
_PORTEbits                        00000000
_PORTF                            00000000
_PORTFbits                        00000000
_PORTG                            00000000
_PORTGbits                        00000000
_PORTH                            00000000
_PORTHbits                        00000000
_PORTJ                            00000000
_PORTJbits                        00000000
_POSTDEC0                         00000000
_POSTDEC1                         00000000
_POSTDEC2                         00000000
_POSTINC0                         00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_POSTINC1                         00000000
_POSTINC2                         00000000
_PR2                              00000000
_PR4                              00000000
_PREINC0                          00000000
_PREINC1                          00000000
_PREINC2                          00000000
_PROD                             00000000
_PRODH                            00000000
_PRODL                            00000000
_PSPCON                           00000000
_PSPCONbits                       00000000
_RCON                             00000000
_RCONbits                         00000000
_RCREG                            00000000
_RCREG1                           00000000
_RCREG2                           00000000
_RCSTA                            00000000
_RCSTA1                           00000000
_RCSTA1bits                       00000000
_RCSTA2                           00000000
_RCSTA2bits                       00000000
_RCSTAbits                        00000000
_SPBRG                            00000000
_SPBRG1                           00000000
_SPBRG2                           00000000
_SPBRGH                           00000000
_SPBRGH1                          00000000
_SPBRGH2                          00000000
_SSP1ADD                          00000000
_SSP1BUF                          00000000
_SSP1CON1                         00000000
_SSP1CON1bits                     00000000
_SSP1CON2                         00000000
_SSP1CON2bits                     00000000
_SSP1STAT                         00000000
_SSP1STATbits                     00000000
_SSP2ADD                          00000000
_SSP2BUF                          00000000
_SSP2CON1                         00000000
_SSP2CON1bits                     00000000
_SSP2CON2                         00000000
_SSP2CON2bits                     00000000
_SSP2STAT                         00000000
_SSP2STATbits                     00000000
_SSPADD                           00000000
_SSPBUF                           00000000
_SSPCON1                          00000000
_SSPCON1bits                      00000000
_SSPCON2                          00000000
_SSPCON2bits                      00000000
_SSPSTAT                          00000000
_SSPSTATbits                      00000000
_STATUS                           00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_STATUSbits                       00000000
_STKPTR                           00000000
_STKPTRbits                       00000000
_SetupCompleteTime                00000000
_T0CON                            00000000
_T0CONbits                        00000000
_T1CON                            00000000
_T1CONbits                        00000000
_T2CON                            00000000
_T2CONbits                        00000000
_T3CON                            00000000
_T3CONbits                        00000000
_T4CON                            00000000
_T4CONbits                        00000000
_TABLAT                           00000000
_TBLPTR                           00000000
_TBLPTRH                          00000000
_TBLPTRL                          00000000
_TBLPTRU                          00000000
_TMR0H                            00000000
_TMR0L                            00000000
_TMR1H                            00000000
_TMR1L                            00000000
_TMR2                             00000000
_TMR3H                            00000000
_TMR3L                            00000000
_TMR4                             00000000
_TOS                              00000000
_TOSH                             00000000
_TOSL                             00000000
_TOSU                             00000000
_TRISA                            00000000
_TRISAbits                        00000000
_TRISB                            00000000
_TRISBbits                        00000000
_TRISC                            00000000
_TRISCbits                        00000000
_TRISD                            00000000
_TRISDbits                        00000000
_TRISE                            00000000
_TRISEbits                        00000000
_TRISF                            00000000
_TRISFbits                        00000000
_TRISG                            00000000
_TRISGbits                        00000000
_TRISH                            00000000
_TRISHbits                        00000000
_TRISJ                            00000000
_TRISJbits                        00000000
_TXREG                            00000000
_TXREG1                           00000000
_TXREG2                           00000000
_TXSTA                            00000000
_TXSTA1                           00000000
gpasm-0.13.7 beta               Objects/timer.asm11-28-2017  23:15:15         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE
 
_TXSTA1bits                       00000000
_TXSTA2                           00000000
_TXSTA2bits                       00000000
_TXSTAbits                        00000000
_UpdateClock                      00000000
_UpdateDisplay                    00000000
_UpdateProperTimeValue            00000000
_UpdateTimeValue                  00000000
_WDTCON                           00000000
_WDTCONbits                       00000000
_WREG                             00000000
__18F97J60                        00000001
__gptrget1                        00000000
__gptrget2                        00000000
__gptrput1                        00000000
__gptrput2                        00000000
__str_0                           00000102
__str_1                           00000112
__str_2                           00000116
__str_3                           00000128
__str_4                           00000130
__str_5                           00000142
_clock                            00000000
_flags                            00000000
_in_setting                       00000000
_ints                             00000000
_main                             00000000
_setting                          00000000
_stdin                            00000000
_stdout                           00000000
_strlen                           00000000
_time_value                       00000000
_timer                            00000000
_ultoa                            00000000
ivec_0x1_HighISR                  00000008
r0x00                             00000000
r0x01                             00000001
r0x02                             00000002
r0x03                             00000003
r0x04                             00000004
r0x05                             00000005
r0x06                             00000006
r0x07                             00000007
r0x08                             00000008
r0x09                             00000009


Errors   :       0
Warnings :       0 reported,       0 suppressed
Messages :       0 reported,       0 suppressed

